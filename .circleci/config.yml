version: 2.1

parameters:
  node-version:
    type: string
    default: '16.17.0'

  cypress-version:
    type: string
    default: '10.10.0'

commands:
  yarn-install:
    steps:
      - restore_cache:
          keys:
            - node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      # yarn's state of installation
      - restore_cache:
          keys:
            - yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run:
          name: yarn install
          command: |-
            # Check if we restored cache and have node_modules already
            if [ -f "node_modules/.yarn-state.yml" ] && [ -f ".yarn/install-state.gz" ]; then
              echo "node_modules restored from cache"
              exit 0
            else
              echo "node_modules could not be restored from cache, activating fallback installation"
              yarn install --immutable --immutable-cache
            fi

      - save_cache:
          key: node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules'

      - save_cache:
          key: yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - '.yarn/install-state.gz'

  checksum:
    steps:
      - run: |-
          git ls-files -s contracts packages tools v1 v2 v3 > "/tmp/checksum.txt"
          cat "/tmp/checksum.txt"

  build-save:
    steps:
      - checksum
      - run: cp "/tmp/checksum.txt" "/tmp/build-cache.txt"
      - save_cache:
          key: build-no-private-{{ .Environment.CACHE_VERSION }}-{{ checksum "/tmp/checksum.txt" }}
          paths:
            - './contracts'
            - './packages'
            - './tools'
            - './v1'
            - './v2'
            - './v3'
            - '/tmp/build-cache.txt'

  build-restore:
    steps:
      - checksum
      - restore_cache:
          keys:
            - build-no-private-{{ .Environment.CACHE_VERSION }}-{{ checksum "/tmp/checksum.txt" }}

jobs:
  yarn-install:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      CYPRESS_CRASH_REPORTS: 0
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout

      # yarn's state of installation
      - restore_cache:
          keys:
            - yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      # yarn's own state of node_modules
      - restore_cache:
          keys:
            - yarn-state-node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run:
          name: Halt if node_modules exist in cache
          command: |-
            # Check if we restored cache and have node_modules already
            if [ -f "node_modules/.yarn-state.yml" ]; then
              echo "SKIP, no changes detected"
              circleci-agent step halt
            fi

      #
      # Proceed with installing node modules, but to speed things up, restore caches
      #

      # node_modules cache
      - restore_cache:
          keys:
            - node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run: yarn install --immutable --immutable-cache

      - save_cache:
          key: node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules'

      - save_cache:
          key: yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - '.yarn/install-state.gz'

      - save_cache:
          key: yarn-state-node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules/.yarn-state.yml'

  checks:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn npm audit --recursive --severity=critical
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn pretty
      - run: yarn lint

  tests:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: NODE_ENV=test yarn test --coverage --coverageReporters=json --reporters=jest-junit --runInBand
      - store_test_results:
          path: './junit.xml'
      - store_artifacts:
          path: 'coverage'

  typecheck:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - build-restore
      - run:
          name: Build
          command: |-
            # Check if we restored build cache already
            if [ -f "/tmp/build-cache.txt" ]; then
              echo "SKIP, no changes detected"
            else
              yarn workspaces foreach --topological-dev --verbose --no-private run build
              # codegen is part of build, so ensure we have all the autogenerated code committed
              git diff --name-only --exit-code
            fi
      - build-save
      - run: yarn typecheck

  v2-e2e:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install

      - run:
          name: Run server localhost:3000
          working_directory: /tmp/app/v2/ui
          command: NODE_ENV=test yarn start
          background: true

      - run:
          name: Wait for server localhost:3000
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000

      - run:
          working_directory: /tmp/app/v2/cypress
          command: NODE_ENV=test cypress run --e2e --browser chrome

      - store_test_results:
          path: 'v2/cypress/cypress/reports'

      - store_artifacts:
          path: 'v2/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v2/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v2/cypress/cypress/videos'
          destination: 'videos'

      - store_artifacts:
          path: 'v2/cypress/cypress/forks'
          destination: 'forks'

  v2-cy:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    steps:
      - checkout
      - yarn-install

      - run:
          working_directory: /tmp/app/v2/cypress
          command: NODE_ENV=test cypress run --component --browser chrome

      - store_test_results:
          path: 'v2/cypress/cypress/reports'

      - store_artifacts:
          path: 'v2/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v2/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v2/cypress/cypress/videos'
          destination: 'videos'

  combine-coverage:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: rm -rf /tmp/cov
      - run: yarn download-cci-coverage tests /tmp/cov || true
      - run: yarn download-cci-coverage v2-cy /tmp/cov || true
      - run: yarn download-cci-coverage v2-e2e /tmp/cov || true
      - run: ls -alR /tmp/cov
      - run: mkdir -p /tmp/cov/combined
      - run: yarn nyc merge /tmp/cov /tmp/cov/combined/coverage.json || true
      - run: |-
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN} --file /tmp/cov/combined/coverage.json

workflows:
  version: 2.1

  ui:
    jobs:
      - yarn-install
      - checks:
          requires: [yarn-install]
      - typecheck:
          requires: [yarn-install]
      - tests:
          requires: [yarn-install]
      - v2-cy:
          requires: [yarn-install]
      - v2-e2e:
          requires: [yarn-install]
      - combine-coverage:
          requires: [tests, v2-cy, v2-e2e]
