version: 2.1

parameters:
  node-version:
    type: string
    default: '16.17.0'

  cypress-version:
    type: string
    default: 'cypress-12.4.0-node-16.18.1-chrome-109.0.5414.74-1-ff-109.0-edge-109.0.1518.52-1'

commands:
  yarn-install:
    steps:
      - restore_cache:
          keys:
            - node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      # yarn's state of installation
      - restore_cache:
          keys:
            - yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run:
          name: yarn install
          command: |-
            # Check if we restored cache and have node_modules already
            if [ -f "node_modules/.yarn-state.yml" ] && [ -f ".yarn/install-state.gz" ]; then
              echo "node_modules restored from cache"
              exit 0
            else
              echo "node_modules could not be restored from cache, activating fallback installation"
              yarn install --immutable --immutable-cache
            fi

      - save_cache:
          key: node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules'

      - save_cache:
          key: yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - '.yarn/install-state.gz'

  checksum:
    steps:
      - run: |-
          git ls-files -s contracts packages tools v1 v2 v3 > "/tmp/checksum.txt"
          cat "/tmp/checksum.txt"

  build-save:
    steps:
      - checksum
      - run: cp "/tmp/checksum.txt" "/tmp/build-cache.txt"
      - save_cache:
          key: build-no-private-{{ .Environment.CACHE_VERSION }}-{{ checksum "/tmp/checksum.txt" }}
          paths:
            - './packages'
            - './tools'
            - './v1'
            - './v2'
            - './v3'
            - '/tmp/build-cache.txt'

  build-restore:
    steps:
      - checksum
      - restore_cache:
          keys:
            - build-no-private-{{ .Environment.CACHE_VERSION }}-{{ checksum "/tmp/checksum.txt" }}

  install-foundry:
    steps:
      - run:
          name: Install foundry used for cannon and e2e tests
          environment:
            SHELL: /bin/bash
          command: |-
            apt update && apt install --yes curl
            curl -L https://foundry.paradigm.xyz | bash
            export PATH="$PATH:$HOME/.foundry/bin"
            echo export PATH="$PATH:$HOME/.foundry/bin" > $BASH_ENV
            foundryup

  ipfs-deploy:
    parameters:
      source-dir:
        type: string
      ipfs-api:
        type: string
      ipns-key:
        type: string
      ipfs-cluster-api:
        type: string
    steps:
      - run:
          name: 'Install IPFS'
          command: |
            LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
            LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
            DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
            echo "DOWNLOAD_URL=$DOWNLOAD_URL"
            curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
            tar -xzf ipfs.tar.gz
            sudo cp -f ./go-ipfs/ipfs /usr/local/bin/
            ipfs init

      - run:
          command: ipfs daemon
          background: true
      - run:
          name: 'Wait for IPFS daemon to start'
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

      - run: ipfs add --progress=true --pin=true --recursive "<< parameters.source-dir >>"
      - run:
          name: 'Save IPFS_CID'
          command: |
            export IPFS_CID=$(ipfs add --progress=false --pin=true --recursive --quieter "<< parameters.source-dir >>")
            echo $IPFS_CID
            echo "export IPFS_CID=$IPFS_CID" >> $BASH_ENV
      - run:
          name: 'Pin to the remote IPFS node'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/pin/add?recursive=true&progress=true&arg=$IPFS_CID"
      - run:
          name: 'List remote IPNS keys'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/key/list" | jq
      - run:
          name: 'Publish IPFS_CID to IPNS key << parameters.ipns-key >>'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/name/publish?key=<< parameters.ipns-key >>&arg=$IPFS_CID" | jq
      - run:
          name: 'Pin to Synthetix IPFS cluster'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-cluster-api >>/pin/add?arg=$IPFS_CID" | jq

jobs:
  yarn-install:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      CYPRESS_CRASH_REPORTS: 0
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout

      # yarn's state of installation
      - restore_cache:
          keys:
            - yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      # yarn's own state of node_modules
      - restore_cache:
          keys:
            - yarn-state-node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run:
          name: Halt if node_modules exist in cache
          command: |-
            # Check if we restored cache and have node_modules already
            if [ -f "node_modules/.yarn-state.yml" ]; then
              echo "SKIP, no changes detected"
              circleci-agent step halt
            fi

      #
      # Proceed with installing node modules, but to speed things up, restore caches
      #

      # node_modules cache
      - restore_cache:
          keys:
            - node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

      - run: yarn install --immutable --immutable-cache

      - save_cache:
          key: node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules'

      - save_cache:
          key: yarn-install-state-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - '.yarn/install-state.gz'

      - save_cache:
          key: yarn-state-node-modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
          paths:
            - 'node_modules/.yarn-state.yml'

  checks:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn npm audit --recursive --severity=critical
      - run: yarn dedupe --check
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn pretty
      - run: yarn lint

  tests:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: NODE_ENV=test yarn test --coverage --coverageReporters=json --reporters=jest-junit --runInBand
      - store_test_results:
          path: './junit.xml'
      - store_artifacts:
          path: 'coverage'

      - run: yarn workspace @snx-v3/subgraphs test
      - run: yarn workspace @snx-v3/subgraphs test --coverage
      - run: yarn workspace @synthetixio/perps-v2-subgraph test
      - run: yarn workspace @synthetixio/perps-v2-subgraph test --coverage

  typecheck:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - build-restore
      - run:
          name: Build
          command: |-
            # Check if we restored build cache already
            if [ -f "/tmp/build-cache.txt" ]; then
              echo "SKIP, no changes detected"
            else
              yarn workspaces foreach --topological-dev --verbose --no-private run build
              # codegen is part of build, so ensure we have all the autogenerated code committed
              git diff --name-only --exit-code
            fi
      - build-save
      - run: yarn typecheck

  v2-e2e:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    resource_class: large
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - install-foundry
      - yarn-install

      - run:
          name: Run server localhost:3000
          working_directory: /tmp/app/v2/ui
          command: yarn start
          background: true

      - run:
          name: Run anvil localhost:8545
          command: anvil --fork-url https://mainnet.infura.io/v3/$INFURA_KEY
          background: true

      - run:
          name: Wait for server localhost:3000
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000

      - run:
          name: Wait for anvil localhost:8545
          command: wget -q -O - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data='{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}' --header='Content-Type:application/json' http://localhost:8545

      - run:
          working_directory: /tmp/app/v2/cypress
          command: cypress run --e2e --browser chrome

      - store_test_results:
          path: 'v2/cypress/cypress/reports'

      - store_artifacts:
          path: 'v2/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v2/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v2/cypress/cypress/videos'
          destination: 'videos'

      - store_artifacts:
          path: 'v2/cypress/cypress/forks'
          destination: 'forks'

  v2-cy:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - yarn-install

      - run:
          working_directory: /tmp/app/v2/cypress
          command: cypress run --component --browser chrome

      - store_test_results:
          path: 'v2/cypress/cypress/reports'

      - store_artifacts:
          path: 'v2/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v2/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v2/cypress/cypress/videos'
          destination: 'videos'

  v3-e2e:
    parameters:
      chain:
        type: string
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    resource_class: large
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - install-foundry
      - yarn-install

      - run:
          name: Run server localhost:3000
          working_directory: /tmp/app/v3/ui
          command: yarn start
          background: true

      - run:
          name: Run anvil localhost:8545
          command: anvil --fork-url https://<< parameters.chain >>.infura.io/v3/$INFURA_KEY
          background: true

      - run:
          name: Wait for server localhost:3000
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000

      - run:
          name: Wait for anvil localhost:8545
          command: wget -q -O - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data='{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}' --header='Content-Type:application/json' http://localhost:8545

      - run:
          working_directory: /tmp/app/v3/cypress
          command: cypress run --e2e --browser chrome

      - store_test_results:
          path: 'v3/cypress/cypress/reports'

      - store_artifacts:
          path: 'v3/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v3/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v3/cypress/cypress/videos'
          destination: 'videos'

      - store_artifacts:
          path: 'v3/cypress/cypress/forks'
          destination: 'forks'

  v3-cy:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - yarn-install

      - run:
          working_directory: /tmp/app/v3/cypress
          command: cypress run --component --browser chrome

      - store_test_results:
          path: 'v3/cypress/cypress/reports'

      - store_artifacts:
          path: 'v3/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'v3/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'v3/cypress/cypress/videos'
          destination: 'videos'

  combine-coverage:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: rm -rf /tmp/cov
      - run: yarn download-cci-coverage tests /tmp/cov || true
      - run: yarn download-cci-coverage v2-cy /tmp/cov || true
      - run: yarn download-cci-coverage v2-e2e /tmp/cov || true
      - run: yarn download-cci-coverage v3-cy /tmp/cov || true
      - run: yarn download-cci-coverage v3-e2e-optimism-mainnet /tmp/cov || true
      - run: mkdir -p /tmp/cov
      - run: ls -alR /tmp/cov
      - run: mkdir -p /tmp/cov/combined
      - run: yarn nyc merge /tmp/cov /tmp/cov/combined/coverage.json || true
      - run: |-
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN} --file /tmp/cov/combined/coverage.json

  v2-ipfs:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @synthetixio/v2-ui build
      - ipfs-deploy:
          source-dir: './v2/ui/out'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'staking.synthetix.eth'

  v3-ipfs:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @snx-v3/ui build
      - ipfs-deploy:
          source-dir: './v3/ui/dist'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'v3.synthetix.eth'

  perps-watcher-ipfs:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @synthetixio/perps-v2-dashboard build
      - ipfs-deploy:
          source-dir: './v2/perps-v2/ui/dist'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'watcher.synthetix.io'

workflows:
  version: 2.1

  ui:
    jobs:
      - yarn-install
      - checks:
          requires: [yarn-install]
      - typecheck:
          requires: [yarn-install]
      - tests:
          requires: [yarn-install]

      - v2-cy:
          requires: [yarn-install]
      - v2-e2e:
          requires: [yarn-install]
      - v2-ipfs:
          requires: [tests, typecheck, v2-cy, v2-e2e]
          filters:
            branches:
              only:
                - release
                - master
                - ipfs-deploy

      - perps-watcher-ipfs:
          requires: [tests, typecheck]
          filters:
            branches:
              only:
                - release
                - master
                - ipfs-deploy

      - v3-cy:
          requires: [yarn-install]
      - v3-e2e:
          chain: optimism-mainnet
          name: v3-e2e-optimism-mainnet
          requires: [yarn-install]
      - v3-e2e:
          chain: optimism-goerli
          name: v3-e2e-optimism-goerli
          requires: [yarn-install]
      - v3-ipfs:
          requires: [tests, typecheck, v3-cy, v3-e2e-optimism-mainnet]
          filters:
            branches:
              only:
                - release
                - master
                - ipfs-deploy

      - combine-coverage:
          requires: [tests, v2-cy, v2-e2e, v3-cy, v3-e2e-optimism-mainnet]
