import { CloseIcon } from '@chakra-ui/icons';
import { Box, Flex, IconButton, Text } from '@chakra-ui/react';
import { FC } from 'react';
import { useParams } from 'react-router-dom';
import { Handle, Position } from 'reactflow';
import { useRecoilState } from 'recoil';
import { nodesState } from '../state/nodes';
import { shortAddress } from '../utils/addresses';
import { NodeStateButton } from './NodeStateButton';

export const UniswapNode: FC<{ data: { label: string }; id: string }> = ({ data, id }) => {
  const [nodes, setNodes] = useRecoilState(nodesState);
  const params = useParams();
  const node = nodes.find((node) => node.id === id);
  return (
    <Box
      bg="pink.800"
      borderRadius="4px"
      p="3"
      display="flex"
      flexDirection="column"
      alignItems="center"
    >
      <Flex gap="2" alignItems="center" mb="2" width="100%">
        <svg
          width="33"
          height="32"
          viewBox="0 0 33 32"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M14.3268 13.7364C14.9333 14.8091 13.5768 15.1415 12.9403 15.2027C11.9756 15.2969 11.7759 14.7385 11.9644 14.0369C12.0262 13.7857 12.1634 13.5597 12.3574 13.3895C12.5515 13.2194 12.7929 13.1133 13.049 13.0857C13.3014 13.0625 13.5551 13.1112 13.7811 13.2263C14.0072 13.3414 14.1963 13.5182 14.3268 13.7364Z"
            fill="white"
          />
          <path
            d="M18.1135 11.752C17.4085 17.1689 26.9127 16.0416 26.7317 20.3529C27.6692 19.1287 28.0723 15.8024 25.3124 14.0903C22.8534 12.5638 19.6491 13.3991 18.1135 11.752Z"
            fill="white"
          />
          <path
            d="M23.5879 9.70951C23.526 9.65206 23.4622 9.59556 23.4004 9.53906C23.4632 9.59651 23.526 9.65681 23.5879 9.70951Z"
            fill="white"
          />
          <path
            d="M25.7971 13.6577L25.7915 13.6493C25.7057 13.4892 25.6079 13.3358 25.499 13.1906C25.1786 12.7546 24.719 12.4421 24.1969 12.3054C23.8493 12.2153 23.4939 12.1591 23.1356 12.1378C22.7728 12.1114 22.4025 12.0963 22.0285 12.0765C21.2785 12.0351 20.5107 11.9579 19.7607 11.7432C19.5732 11.6895 19.3857 11.6311 19.2048 11.5605C19.1111 11.5266 19.0239 11.4898 18.9311 11.4503C18.8383 11.4107 18.7436 11.3655 18.6498 11.3175C18.2972 11.1234 17.9705 10.8852 17.6777 10.6084C17.1002 10.0687 16.6465 9.4566 16.1918 8.8633C15.7631 8.26775 15.3031 7.6956 14.8137 7.14935C14.3308 6.6142 13.76 6.16635 13.1262 5.82525C12.47 5.4932 11.7572 5.2887 11.0254 5.22255C11.7846 5.1397 12.5525 5.2338 13.2697 5.4975C13.9933 5.7797 14.6548 6.20175 15.2168 6.7397C15.5837 7.08535 15.9282 7.45435 16.248 7.84435C18.6292 7.37345 20.5604 7.7916 22.0444 8.6034L22.0782 8.62035C22.5505 8.8777 22.9932 9.1866 23.3981 9.5414C23.4628 9.5979 23.5266 9.6544 23.5856 9.71185C23.9017 10.0036 24.1959 10.3183 24.4659 10.6536L24.4865 10.6809C25.3631 11.7959 25.7962 12.9552 25.7971 13.6577Z"
            fill="white"
          />
          <path d="M25.7966 13.6577L25.791 13.6465L25.7966 13.6577Z" fill="white" />
          <path
            d="M11.1458 5.91992C11.7533 6.00847 12.373 6.25142 12.7723 6.71477C13.1717 7.17812 13.3189 7.78082 13.4342 8.35437C13.5279 8.79887 13.602 9.25187 13.7764 9.67282C13.8607 9.87812 13.9845 10.058 14.0876 10.252C14.1729 10.413 14.3285 10.5581 14.3885 10.7304C14.3993 10.7551 14.4033 10.7823 14.4001 10.8091C14.397 10.8359 14.3869 10.8614 14.3707 10.883C14.1589 11.1184 13.587 10.8566 13.3714 10.7511C12.9986 10.5655 12.6648 10.3098 12.388 9.99772C11.5227 9.03242 11.0755 7.64332 11.1027 6.37857C11.1087 6.22502 11.1231 6.07192 11.1458 5.91992Z"
            fill="white"
          />
          <path
            d="M21.3065 16.8066C19.994 20.486 25.947 22.9543 23.7167 26.695C26.0051 25.7457 27.0916 22.8781 26.142 20.6028C25.3113 18.6054 22.8552 17.8774 21.3065 16.8066Z"
            fill="white"
          />
          <path
            d="M13.4336 21.6166C13.7912 21.3458 14.1823 21.1226 14.597 20.9526C15.0165 20.7839 15.4518 20.6577 15.8963 20.5759C16.7785 20.4074 17.6513 20.3659 18.3844 20.0693C18.7466 19.9272 19.0799 19.7197 19.3678 19.4571C19.6464 19.1971 19.8598 18.8743 19.9903 18.5154C20.1239 18.1367 20.1782 17.7343 20.1496 17.3335C20.1165 16.903 20.0195 16.4799 19.8618 16.0781C20.1886 16.4196 20.4265 16.8367 20.5546 17.2925C20.6826 17.7483 20.6968 18.2288 20.5959 18.6915C20.4812 19.1813 20.2336 19.6295 19.8806 19.9864C19.5312 20.3322 19.1098 20.5959 18.6469 20.7586C18.205 20.9143 17.7443 21.0093 17.2772 21.0412C16.8272 21.0788 16.3922 21.0892 15.9647 21.1146C15.1004 21.151 14.2468 21.3203 13.4336 21.6166Z"
            fill="white"
          />
          <path
            d="M21.8297 28.0849C21.6975 28.1904 21.5653 28.3024 21.42 28.4004C21.2738 28.4972 21.1206 28.5828 20.9616 28.6565C20.6306 28.8187 20.2667 28.9016 19.8985 28.8986C18.901 28.8797 18.196 28.1339 17.7836 27.291C17.5023 26.7165 17.3083 26.0959 16.9745 25.5488C16.4973 24.7662 15.6808 24.1361 14.7246 24.2529C14.3346 24.3019 13.969 24.478 13.7524 24.818C13.1824 25.706 14.0009 26.9501 15.0443 26.774C15.133 26.7604 15.2199 26.7364 15.303 26.7024C15.3859 26.667 15.4632 26.6197 15.5327 26.5621C15.6784 26.4402 15.7883 26.2806 15.8505 26.1006C15.919 25.9129 15.9343 25.7098 15.8946 25.5139C15.8517 25.3092 15.7314 25.1292 15.5589 25.012C15.7595 25.1063 15.9157 25.2751 15.9949 25.4828C16.0769 25.6966 16.098 25.9291 16.0558 26.1543C16.0148 26.3889 15.9119 26.6081 15.7577 26.789C15.6758 26.8821 15.5811 26.963 15.4764 27.0292C15.3727 27.0946 15.2617 27.1474 15.1455 27.1865C14.91 27.2673 14.6594 27.2934 14.4124 27.2627C14.0657 27.2131 13.7386 27.0706 13.4656 26.8503C13.1431 26.5941 12.9031 26.2588 12.6115 25.9707C12.2773 25.6184 11.883 25.3291 11.4472 25.1165C11.1467 24.9839 10.8322 24.886 10.5097 24.8246C10.3475 24.7907 10.1835 24.7662 10.0194 24.7455C9.94444 24.7379 9.57694 24.656 9.52539 24.704C10.0324 24.2351 10.5852 23.8186 11.1753 23.4609C11.7812 23.0997 12.4318 22.8201 13.1103 22.6293C13.8137 22.4304 14.5495 22.3738 15.2749 22.4627C15.6483 22.5077 16.014 22.6027 16.3623 22.7452C16.7273 22.8916 17.0642 23.1007 17.3579 23.363C17.6487 23.6381 17.8836 23.9672 18.0498 24.332C18.1998 24.6736 18.3118 25.0308 18.3835 25.3971C18.5973 26.4924 18.5185 28.1904 19.9463 28.4409C20.0207 28.4554 20.0958 28.466 20.1713 28.4729L20.4047 28.4785C20.5652 28.4671 20.7247 28.4441 20.8819 28.4098C21.2076 28.3328 21.5251 28.224 21.8297 28.0849Z"
            fill="white"
          />
          <path d="M13.5335 26.8907L13.4961 26.8613L13.5335 26.8907Z" fill="white" />
          <path
            d="M12.2526 11.4336C12.2006 11.6343 12.1098 11.8228 11.9854 11.9883C11.7538 12.2902 11.4473 12.5257 11.0967 12.6711C10.7812 12.8076 10.4472 12.8959 10.1058 12.9328C10.0317 12.9423 9.9548 12.948 9.88075 12.9536C9.66445 12.9619 9.4565 13.0395 9.2873 13.175C9.1181 13.3105 8.99655 13.497 8.94045 13.707C8.91475 13.8115 8.89565 13.9174 8.88325 14.0244C8.8495 14.3013 8.8439 14.5894 8.8139 14.9378C8.74045 15.5308 8.5697 16.1074 8.3086 16.6443C7.96925 17.3619 7.5886 17.9401 7.67675 18.767C7.73485 19.3038 8.0086 19.6635 8.37235 20.0346C9.02855 20.7088 10.4976 21.0103 10.1695 22.6714C9.97165 23.6631 8.33485 24.7038 6.0343 25.0673C6.26305 25.0325 5.74085 24.1481 5.70805 24.0917C5.4615 23.7036 5.1915 23.3382 4.99557 22.9172C4.6112 22.1007 4.43308 21.1562 4.59058 20.2616C4.75651 19.3198 5.45025 18.5984 6.0268 17.8789C6.713 17.0229 7.433 15.9012 7.59235 14.79C7.62985 14.5206 7.6561 14.1835 7.7161 13.8483C7.7733 13.4768 7.88915 13.117 8.0592 12.7822C8.1753 12.5626 8.32815 12.3648 8.5111 12.1973C8.60645 12.1084 8.66935 11.99 8.68975 11.8609C8.71015 11.7318 8.68685 11.5996 8.6236 11.4854L4.95619 4.85926L10.2239 11.3893C10.2839 11.465 10.3597 11.5265 10.446 11.5694C10.5323 11.6123 10.6269 11.6356 10.7232 11.6377C10.8194 11.6398 10.915 11.6206 11.003 11.5814C11.0911 11.5422 11.1694 11.484 11.2326 11.411C11.2993 11.3329 11.3372 11.2339 11.3397 11.131C11.3423 11.028 11.3094 10.9274 11.2467 10.846C10.9026 10.4043 10.5389 9.9541 10.1864 9.5115L8.86075 7.86345L6.2002 4.57297L2.57227 0L6.54145 4.2782L9.37355 7.42365L10.7864 9.00015C11.2551 9.53035 11.7238 10.0436 12.1926 10.6011L12.2694 10.6953L12.2863 10.8413C12.3092 11.0392 12.2977 11.2396 12.2526 11.4336Z"
            fill="white"
          />
          <path
            d="M13.4661 26.8466C13.2115 26.6491 12.9851 26.4175 12.793 26.1582C12.9991 26.4051 13.2241 26.6352 13.4661 26.8466Z"
            fill="white"
          />
        </svg>

        <Text fontSize="lg" fontWeight="bold" mr="auto">
          Uniswap Node
        </Text>
        <IconButton
          disabled={!!params.nodeId}
          icon={<CloseIcon />}
          onClick={(e) => {
            e.stopPropagation();
            setNodes((state) => {
              const newState = state
                .filter((s) => s.id !== node?.id)
                .map((s) => {
                  if (s.parents.includes(node?.id || '')) {
                    return {
                      ...s,
                      parents: s.parents.filter((parent) => parent !== node?.id),
                    };
                  }
                  return s;
                });
              return newState;
            });
          }}
          aria-label="close"
          variant="ghost"
          size="xs"
        />
      </Flex>
      <Flex
        flexDirection="column"
        gap="4"
        bg="pink.900"
        p="5"
        borderWidth="1px"
        borderStyle="solid"
        borderColor="whiteAlpha.400"
        borderRadius="4px"
        mb="2"
      >
        {data.label && (
          <Flex gap="2">
            <Text fontWeight="bold" color="whiteAlpha.800" fontSize="xs">
              Name:
            </Text>
            <Text fontSize="xs" color="whiteAlpha.800">
              {data.label}
            </Text>
          </Flex>
        )}
        <Flex gap="2">
          <Text fontWeight="bold" color="whiteAlpha.800" fontSize="xs">
            Token 1:
          </Text>
          <Text fontSize="xs" color="whiteAlpha.800">
            {shortAddress(node?.parameters[0])}
          </Text>
        </Flex>
        <Flex gap="2">
          <Text fontWeight="bold" color="whiteAlpha.800" fontSize="xs">
            Token 2:
          </Text>
          <Text fontSize="xs" color="whiteAlpha.800">
            {shortAddress(node?.parameters[1])}
          </Text>
        </Flex>
        <Flex gap="2">
          <Text fontWeight="bold" color="whiteAlpha.800" fontSize="xs">
            Pool:
          </Text>
          <Text fontSize="xs" color="whiteAlpha.800">
            {shortAddress(node?.parameters[2])}
          </Text>
        </Flex>
        <Flex gap="2">
          <Text fontWeight="bold" color="whiteAlpha.800" fontSize="xs">
            Seconds Ago:
          </Text>
          <Text fontSize="xs" color="whiteAlpha.800">
            {node?.parameters[3]} Seconds
          </Text>
        </Flex>
      </Flex>
      {node && <NodeStateButton node={node} />}
      <Handle
        type="source"
        isValidConnection={() => true}
        position={Position.Bottom}
        style={{ background: '#4E0055' }}
        isConnectable
      ></Handle>
    </Box>
  );
};
