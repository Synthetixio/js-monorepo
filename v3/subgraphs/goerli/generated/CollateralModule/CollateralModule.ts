// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollateralModule__getAccountCollateralResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalDeposited(): BigInt {
    return this.value0;
  }

  getTotalAssigned(): BigInt {
    return this.value1;
  }

  getTotalLocked(): BigInt {
    return this.value2;
  }
}

export class CollateralModule extends ethereum.SmartContract {
  static bind(address: Address): CollateralModule {
    return new CollateralModule('CollateralModule', address);
  }

  getAccountAvailableCollateral(accountId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getAccountAvailableCollateral',
      'getAccountAvailableCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getAccountAvailableCollateral(
    accountId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getAccountAvailableCollateral',
      'getAccountAvailableCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountCollateral(
    accountId: BigInt,
    collateralType: Address
  ): CollateralModule__getAccountCollateralResult {
    let result = super.call(
      'getAccountCollateral',
      'getAccountCollateral(uint128,address):(uint256,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );

    return new CollateralModule__getAccountCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountCollateral(
    accountId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<CollateralModule__getAccountCollateralResult> {
    let result = super.tryCall(
      'getAccountCollateral',
      'getAccountCollateral(uint128,address):(uint256,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralModule__getAccountCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class CleanExpiredLocksCall extends ethereum.Call {
  get inputs(): CleanExpiredLocksCall__Inputs {
    return new CleanExpiredLocksCall__Inputs(this);
  }

  get outputs(): CleanExpiredLocksCall__Outputs {
    return new CleanExpiredLocksCall__Outputs(this);
  }
}

export class CleanExpiredLocksCall__Inputs {
  _call: CleanExpiredLocksCall;

  constructor(call: CleanExpiredLocksCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offset(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get items(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CleanExpiredLocksCall__Outputs {
  _call: CleanExpiredLocksCall;

  constructor(call: CleanExpiredLocksCall) {
    this._call = call;
  }
}

export class CreateLockCall extends ethereum.Call {
  get inputs(): CreateLockCall__Inputs {
    return new CreateLockCall__Inputs(this);
  }

  get outputs(): CreateLockCall__Outputs {
    return new CreateLockCall__Outputs(this);
  }
}

export class CreateLockCall__Inputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLockCall__Outputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
