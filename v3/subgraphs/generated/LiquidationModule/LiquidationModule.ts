// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidationData(): LiquidationLiquidationDataStruct {
    return changetype<LiquidationLiquidationDataStruct>(this._event.parameters[3].value.toTuple());
  }

  get liquidateAsAccountId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class LiquidationLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class VaultLiquidation extends ethereum.Event {
  get params(): VaultLiquidation__Params {
    return new VaultLiquidation__Params(this);
  }
}

export class VaultLiquidation__Params {
  _event: VaultLiquidation;

  constructor(event: VaultLiquidation) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationData(): VaultLiquidationLiquidationDataStruct {
    return changetype<VaultLiquidationLiquidationDataStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get liquidateAsAccountId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class VaultLiquidationLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidationModule__liquidateResultLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidationModule__liquidateVaultResultLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidationModule extends ethereum.SmartContract {
  static bind(address: Address): LiquidationModule {
    return new LiquidationModule('LiquidationModule', address);
  }

  isPositionLiquidatable(accountId: BigInt, poolId: BigInt, collateralType: Address): boolean {
    let result = super.call(
      'isPositionLiquidatable',
      'isPositionLiquidatable(uint128,uint128,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBoolean();
  }

  try_isPositionLiquidatable(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isPositionLiquidatable',
      'isPositionLiquidatable(uint128,uint128,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVaultLiquidatable(poolId: BigInt, collateralType: Address): boolean {
    let result = super.call('isVaultLiquidatable', 'isVaultLiquidatable(uint128,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBoolean();
  }

  try_isVaultLiquidatable(poolId: BigInt, collateralType: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isVaultLiquidatable',
      'isVaultLiquidatable(uint128,address):(bool)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt
  ): LiquidationModule__liquidateResultLiquidationDataStruct {
    let result = super.call(
      'liquidate',
      'liquidate(uint128,uint128,address,uint128):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
      ]
    );

    return changetype<LiquidationModule__liquidateResultLiquidationDataStruct>(result[0].toTuple());
  }

  try_liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt
  ): ethereum.CallResult<LiquidationModule__liquidateResultLiquidationDataStruct> {
    let result = super.tryCall(
      'liquidate',
      'liquidate(uint128,uint128,address,uint128):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LiquidationModule__liquidateResultLiquidationDataStruct>(value[0].toTuple())
    );
  }

  liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): LiquidationModule__liquidateVaultResultLiquidationDataStruct {
    let result = super.call(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );

    return changetype<LiquidationModule__liquidateVaultResultLiquidationDataStruct>(
      result[0].toTuple()
    );
  }

  try_liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): ethereum.CallResult<LiquidationModule__liquidateVaultResultLiquidationDataStruct> {
    let result = super.tryCall(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LiquidationModule__liquidateVaultResultLiquidationDataStruct>(value[0].toTuple())
    );
  }
}

export class IsPositionLiquidatableCall extends ethereum.Call {
  get inputs(): IsPositionLiquidatableCall__Inputs {
    return new IsPositionLiquidatableCall__Inputs(this);
  }

  get outputs(): IsPositionLiquidatableCall__Outputs {
    return new IsPositionLiquidatableCall__Outputs(this);
  }
}

export class IsPositionLiquidatableCall__Inputs {
  _call: IsPositionLiquidatableCall;

  constructor(call: IsPositionLiquidatableCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class IsPositionLiquidatableCall__Outputs {
  _call: IsPositionLiquidatableCall;

  constructor(call: IsPositionLiquidatableCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsVaultLiquidatableCall extends ethereum.Call {
  get inputs(): IsVaultLiquidatableCall__Inputs {
    return new IsVaultLiquidatableCall__Inputs(this);
  }

  get outputs(): IsVaultLiquidatableCall__Outputs {
    return new IsVaultLiquidatableCall__Outputs(this);
  }
}

export class IsVaultLiquidatableCall__Inputs {
  _call: IsVaultLiquidatableCall;

  constructor(call: IsVaultLiquidatableCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class IsVaultLiquidatableCall__Outputs {
  _call: IsVaultLiquidatableCall;

  constructor(call: IsVaultLiquidatableCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidateAsAccountId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get liquidationData(): LiquidateCallLiquidationDataStruct {
    return changetype<LiquidateCallLiquidationDataStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class LiquidateCallLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidateVaultCall extends ethereum.Call {
  get inputs(): LiquidateVaultCall__Inputs {
    return new LiquidateVaultCall__Inputs(this);
  }

  get outputs(): LiquidateVaultCall__Outputs {
    return new LiquidateVaultCall__Outputs(this);
  }
}

export class LiquidateVaultCall__Inputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidateAsAccountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxUsd(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateVaultCall__Outputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get liquidationData(): LiquidateVaultCallLiquidationDataStruct {
    return changetype<LiquidateVaultCallLiquidationDataStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class LiquidateVaultCallLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}
