// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get debtLiquidated(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountRewarded(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class VaultLiquidation extends ethereum.Event {
  get params(): VaultLiquidation__Params {
    return new VaultLiquidation__Params(this);
  }
}

export class VaultLiquidation__Params {
  _event: VaultLiquidation;

  constructor(event: VaultLiquidation) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get debtLiquidated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountRewarded(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidationModule__liquidateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountRewarded(): BigInt {
    return this.value0;
  }

  getDebtLiquidated(): BigInt {
    return this.value1;
  }

  getCollateralLiquidated(): BigInt {
    return this.value2;
  }
}

export class LiquidationModule__liquidateVaultResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountLiquidated(): BigInt {
    return this.value0;
  }

  getCollateralRewarded(): BigInt {
    return this.value1;
  }
}

export class LiquidationModule extends ethereum.SmartContract {
  static bind(address: Address): LiquidationModule {
    return new LiquidationModule('LiquidationModule', address);
  }

  isLiquidatable(accountId: BigInt, poolId: BigInt, collateralType: Address): boolean {
    let result = super.call('isLiquidatable', 'isLiquidatable(uint128,uint128,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBoolean();
  }

  try_isLiquidatable(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall('isLiquidatable', 'isLiquidatable(uint128,uint128,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): LiquidationModule__liquidateResult {
    let result = super.call(
      'liquidate',
      'liquidate(uint128,uint128,address):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return new LiquidationModule__liquidateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<LiquidationModule__liquidateResult> {
    let result = super.tryCall(
      'liquidate',
      'liquidate(uint128,uint128,address):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquidationModule__liquidateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): LiquidationModule__liquidateVaultResult {
    let result = super.call(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );

    return new LiquidationModule__liquidateVaultResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): ethereum.CallResult<LiquidationModule__liquidateVaultResult> {
    let result = super.tryCall(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):(uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LiquidationModule__liquidateVaultResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class IsLiquidatableCall extends ethereum.Call {
  get inputs(): IsLiquidatableCall__Inputs {
    return new IsLiquidatableCall__Inputs(this);
  }

  get outputs(): IsLiquidatableCall__Outputs {
    return new IsLiquidatableCall__Outputs(this);
  }
}

export class IsLiquidatableCall__Inputs {
  _call: IsLiquidatableCall;

  constructor(call: IsLiquidatableCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class IsLiquidatableCall__Outputs {
  _call: IsLiquidatableCall;

  constructor(call: IsLiquidatableCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get amountRewarded(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get debtLiquidated(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class LiquidateVaultCall extends ethereum.Call {
  get inputs(): LiquidateVaultCall__Inputs {
    return new LiquidateVaultCall__Inputs(this);
  }

  get outputs(): LiquidateVaultCall__Outputs {
    return new LiquidateVaultCall__Outputs(this);
  }
}

export class LiquidateVaultCall__Inputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidateAsAccountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxUsd(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateVaultCall__Outputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get amountLiquidated(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get collateralRewarded(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
