// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class MarketRegistered extends ethereum.Event {
  get params(): MarketRegistered__Params {
    return new MarketRegistered__Params(this);
  }
}

export class MarketRegistered__Params {
  _event: MarketRegistered;

  constructor(event: MarketRegistered) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UsdDeposited extends ethereum.Event {
  get params(): UsdDeposited__Params {
    return new UsdDeposited__Params(this);
  }
}

export class UsdDeposited__Params {
  _event: UsdDeposited;

  constructor(event: UsdDeposited) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class UsdWithdrawn extends ethereum.Event {
  get params(): UsdWithdrawn__Params {
    return new UsdWithdrawn__Params(this);
  }
}

export class UsdWithdrawn__Params {
  _event: UsdWithdrawn;

  constructor(event: UsdWithdrawn) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MarketManagerModule extends ethereum.SmartContract {
  static bind(address: Address): MarketManagerModule {
    return new MarketManagerModule('MarketManagerModule', address);
  }

  getMarketCollateral(marketId: BigInt): BigInt {
    let result = super.call('getMarketCollateral', 'getMarketCollateral(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketCollateral(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketCollateral', 'getMarketCollateral(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketDebtPerShare(marketId: BigInt): BigInt {
    let result = super.call('getMarketDebtPerShare', 'getMarketDebtPerShare(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketDebtPerShare(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketDebtPerShare', 'getMarketDebtPerShare(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketIssuance(marketId: BigInt): BigInt {
    let result = super.call('getMarketIssuance', 'getMarketIssuance(uint128):(int128)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketIssuance(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketIssuance', 'getMarketIssuance(uint128):(int128)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketReportedDebt(marketId: BigInt): BigInt {
    let result = super.call('getMarketReportedDebt', 'getMarketReportedDebt(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketReportedDebt(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketReportedDebt',
      'getMarketReportedDebt(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketTotalBalance(marketId: BigInt): BigInt {
    let result = super.call('getMarketTotalBalance', 'getMarketTotalBalance(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketTotalBalance(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketTotalBalance', 'getMarketTotalBalance(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableUsd(marketId: BigInt): BigInt {
    let result = super.call('getWithdrawableUsd', 'getWithdrawableUsd(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getWithdrawableUsd(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getWithdrawableUsd', 'getWithdrawableUsd(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerMarket(market: Address): BigInt {
    let result = super.call('registerMarket', 'registerMarket(address):(uint128)', [
      ethereum.Value.fromAddress(market),
    ]);

    return result[0].toBigInt();
  }

  try_registerMarket(market: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('registerMarket', 'registerMarket(address):(uint128)', [
      ethereum.Value.fromAddress(market),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DepositUsdCall extends ethereum.Call {
  get inputs(): DepositUsdCall__Inputs {
    return new DepositUsdCall__Inputs(this);
  }

  get outputs(): DepositUsdCall__Outputs {
    return new DepositUsdCall__Outputs(this);
  }
}

export class DepositUsdCall__Inputs {
  _call: DepositUsdCall;

  constructor(call: DepositUsdCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositUsdCall__Outputs {
  _call: DepositUsdCall;

  constructor(call: DepositUsdCall) {
    this._call = call;
  }
}

export class GetMarketDebtPerShareCall extends ethereum.Call {
  get inputs(): GetMarketDebtPerShareCall__Inputs {
    return new GetMarketDebtPerShareCall__Inputs(this);
  }

  get outputs(): GetMarketDebtPerShareCall__Outputs {
    return new GetMarketDebtPerShareCall__Outputs(this);
  }
}

export class GetMarketDebtPerShareCall__Inputs {
  _call: GetMarketDebtPerShareCall;

  constructor(call: GetMarketDebtPerShareCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetMarketDebtPerShareCall__Outputs {
  _call: GetMarketDebtPerShareCall;

  constructor(call: GetMarketDebtPerShareCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterMarketCall extends ethereum.Call {
  get inputs(): RegisterMarketCall__Inputs {
    return new RegisterMarketCall__Inputs(this);
  }

  get outputs(): RegisterMarketCall__Outputs {
    return new RegisterMarketCall__Outputs(this);
  }
}

export class RegisterMarketCall__Inputs {
  _call: RegisterMarketCall;

  constructor(call: RegisterMarketCall) {
    this._call = call;
  }

  get market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterMarketCall__Outputs {
  _call: RegisterMarketCall;

  constructor(call: RegisterMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawUsdCall extends ethereum.Call {
  get inputs(): WithdrawUsdCall__Inputs {
    return new WithdrawUsdCall__Inputs(this);
  }

  get outputs(): WithdrawUsdCall__Outputs {
    return new WithdrawUsdCall__Outputs(this);
  }
}

export class WithdrawUsdCall__Inputs {
  _call: WithdrawUsdCall;

  constructor(call: WithdrawUsdCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawUsdCall__Outputs {
  _call: WithdrawUsdCall;

  constructor(call: WithdrawUsdCall) {
    this._call = call;
  }
}
