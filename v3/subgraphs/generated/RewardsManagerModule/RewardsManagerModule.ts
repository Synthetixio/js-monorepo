// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RewardsDistributed extends ethereum.Event {
  get params(): RewardsDistributed__Params {
    return new RewardsDistributed__Params(this);
  }
}

export class RewardsDistributed__Params {
  _event: RewardsDistributed;

  constructor(event: RewardsDistributed) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RewardsDistributorRegistered extends ethereum.Event {
  get params(): RewardsDistributorRegistered__Params {
    return new RewardsDistributorRegistered__Params(this);
  }
}

export class RewardsDistributorRegistered__Params {
  _event: RewardsDistributorRegistered;

  constructor(event: RewardsDistributorRegistered) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RewardsManagerModule__getClaimableRewardsResult {
  value0: Array<BigInt>;
  value1: Array<Address>;

  constructor(value0: Array<BigInt>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set('value1', ethereum.Value.fromAddressArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }
}

export class RewardsManagerModule extends ethereum.SmartContract {
  static bind(address: Address): RewardsManagerModule {
    return new RewardsManagerModule('RewardsManagerModule', address);
  }

  claimRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt,
    distributor: Address
  ): BigInt {
    let result = super.call(
      'claimRewards',
      'claimRewards(uint128,address,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(distributor),
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt,
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'claimRewards',
      'claimRewards(uint128,address,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(distributor),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt
  ): RewardsManagerModule__getClaimableRewardsResult {
    let result = super.call(
      'getClaimableRewards',
      'getClaimableRewards(uint128,address,uint128):(uint256[],address[])',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
      ]
    );

    return new RewardsManagerModule__getClaimableRewardsResult(
      result[0].toBigIntArray(),
      result[1].toAddressArray()
    );
  }

  try_getClaimableRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt
  ): ethereum.CallResult<RewardsManagerModule__getClaimableRewardsResult> {
    let result = super.tryCall(
      'getClaimableRewards',
      'getClaimableRewards(uint128,address,uint128):(uint256[],address[])',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsManagerModule__getClaimableRewardsResult(
        value[0].toBigIntArray(),
        value[1].toAddressArray()
      )
    );
  }

  getRewardRate(poolId: BigInt, collateralType: Address, distributor: Address): BigInt {
    let result = super.call('getRewardRate', 'getRewardRate(uint128,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
      ethereum.Value.fromAddress(distributor),
    ]);

    return result[0].toBigInt();
  }

  try_getRewardRate(
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getRewardRate',
      'getRewardRate(uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get distributor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeRewardsCall extends ethereum.Call {
  get inputs(): DistributeRewardsCall__Inputs {
    return new DistributeRewardsCall__Inputs(this);
  }

  get outputs(): DistributeRewardsCall__Outputs {
    return new DistributeRewardsCall__Outputs(this);
  }
}

export class DistributeRewardsCall__Inputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DistributeRewardsCall__Outputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }
}

export class GetClaimableRewardsCall extends ethereum.Call {
  get inputs(): GetClaimableRewardsCall__Inputs {
    return new GetClaimableRewardsCall__Inputs(this);
  }

  get outputs(): GetClaimableRewardsCall__Outputs {
    return new GetClaimableRewardsCall__Outputs(this);
  }
}

export class GetClaimableRewardsCall__Inputs {
  _call: GetClaimableRewardsCall;

  constructor(call: GetClaimableRewardsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GetClaimableRewardsCall__Outputs {
  _call: GetClaimableRewardsCall;

  constructor(call: GetClaimableRewardsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<Address> {
    return this._call.outputValues[1].value.toAddressArray();
  }
}

export class RegisterRewardsDistributorCall extends ethereum.Call {
  get inputs(): RegisterRewardsDistributorCall__Inputs {
    return new RegisterRewardsDistributorCall__Inputs(this);
  }

  get outputs(): RegisterRewardsDistributorCall__Outputs {
    return new RegisterRewardsDistributorCall__Outputs(this);
  }
}

export class RegisterRewardsDistributorCall__Inputs {
  _call: RegisterRewardsDistributorCall;

  constructor(call: RegisterRewardsDistributorCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get distributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RegisterRewardsDistributorCall__Outputs {
  _call: RegisterRewardsDistributorCall;

  constructor(call: RegisterRewardsDistributorCall) {
    this._call = call;
  }
}
