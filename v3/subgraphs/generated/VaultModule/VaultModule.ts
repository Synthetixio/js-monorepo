// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class DelegationUpdated extends ethereum.Event {
  get params(): DelegationUpdated__Params {
    return new DelegationUpdated__Params(this);
  }
}

export class DelegationUpdated__Params {
  _event: DelegationUpdated;

  constructor(event: DelegationUpdated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class VaultModule__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromSignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getCollateralAmount(): BigInt {
    return this.value0;
  }

  getCollateralValue(): BigInt {
    return this.value1;
  }

  getDebt(): BigInt {
    return this.value2;
  }

  getCollateralizationRatio(): BigInt {
    return this.value3;
  }
}

export class VaultModule__getPositionCollateralResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class VaultModule__getVaultCollateralResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class VaultModule extends ethereum.SmartContract {
  static bind(address: Address): VaultModule {
    return new VaultModule('VaultModule', address);
  }

  getPosition(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): VaultModule__getPositionResult {
    let result = super.call(
      'getPosition',
      'getPosition(uint128,uint128,address):(uint256,uint256,int256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return new VaultModule__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPosition(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<VaultModule__getPositionResult> {
    let result = super.tryCall(
      'getPosition',
      'getPosition(uint128,uint128,address):(uint256,uint256,int256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultModule__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPositionCollateral(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): VaultModule__getPositionCollateralResult {
    let result = super.call(
      'getPositionCollateral',
      'getPositionCollateral(uint128,uint128,address):(uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return new VaultModule__getPositionCollateralResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_getPositionCollateral(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<VaultModule__getPositionCollateralResult> {
    let result = super.tryCall(
      'getPositionCollateral',
      'getPositionCollateral(uint128,uint128,address):(uint256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultModule__getPositionCollateralResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getPositionCollateralizationRatio(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): BigInt {
    let result = super.call(
      'getPositionCollateralizationRatio',
      'getPositionCollateralizationRatio(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionCollateralizationRatio(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPositionCollateralizationRatio',
      'getPositionCollateralizationRatio(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionDebt(accountId: BigInt, poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getPositionDebt',
      'getPositionDebt(uint128,uint128,address):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionDebt(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPositionDebt',
      'getPositionDebt(uint128,uint128,address):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultCollateral(
    poolId: BigInt,
    collateralType: Address
  ): VaultModule__getVaultCollateralResult {
    let result = super.call(
      'getVaultCollateral',
      'getVaultCollateral(uint128,address):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );

    return new VaultModule__getVaultCollateralResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_getVaultCollateral(
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<VaultModule__getVaultCollateralResult> {
    let result = super.tryCall(
      'getVaultCollateral',
      'getVaultCollateral(uint128,address):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultModule__getVaultCollateralResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getVaultCollateralRatio(poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getVaultCollateralRatio',
      'getVaultCollateralRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getVaultCollateralRatio(
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getVaultCollateralRatio',
      'getVaultCollateralRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultDebt(poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call('getVaultDebt', 'getVaultDebt(uint128,address):(int256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBigInt();
  }

  try_getVaultDebt(poolId: BigInt, collateralType: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getVaultDebt', 'getVaultDebt(uint128,address):(int256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DelegateCollateralCall extends ethereum.Call {
  get inputs(): DelegateCollateralCall__Inputs {
    return new DelegateCollateralCall__Inputs(this);
  }

  get outputs(): DelegateCollateralCall__Outputs {
    return new DelegateCollateralCall__Outputs(this);
  }
}

export class DelegateCollateralCall__Inputs {
  _call: DelegateCollateralCall;

  constructor(call: DelegateCollateralCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DelegateCollateralCall__Outputs {
  _call: DelegateCollateralCall;

  constructor(call: DelegateCollateralCall) {
    this._call = call;
  }
}

export class GetPositionCall extends ethereum.Call {
  get inputs(): GetPositionCall__Inputs {
    return new GetPositionCall__Inputs(this);
  }

  get outputs(): GetPositionCall__Outputs {
    return new GetPositionCall__Outputs(this);
  }
}

export class GetPositionCall__Inputs {
  _call: GetPositionCall;

  constructor(call: GetPositionCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionCall__Outputs {
  _call: GetPositionCall;

  constructor(call: GetPositionCall) {
    this._call = call;
  }

  get collateralAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get debt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get collateralizationRatio(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class GetPositionCollateralizationRatioCall extends ethereum.Call {
  get inputs(): GetPositionCollateralizationRatioCall__Inputs {
    return new GetPositionCollateralizationRatioCall__Inputs(this);
  }

  get outputs(): GetPositionCollateralizationRatioCall__Outputs {
    return new GetPositionCollateralizationRatioCall__Outputs(this);
  }
}

export class GetPositionCollateralizationRatioCall__Inputs {
  _call: GetPositionCollateralizationRatioCall;

  constructor(call: GetPositionCollateralizationRatioCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionCollateralizationRatioCall__Outputs {
  _call: GetPositionCollateralizationRatioCall;

  constructor(call: GetPositionCollateralizationRatioCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetPositionDebtCall extends ethereum.Call {
  get inputs(): GetPositionDebtCall__Inputs {
    return new GetPositionDebtCall__Inputs(this);
  }

  get outputs(): GetPositionDebtCall__Outputs {
    return new GetPositionDebtCall__Outputs(this);
  }
}

export class GetPositionDebtCall__Inputs {
  _call: GetPositionDebtCall;

  constructor(call: GetPositionDebtCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionDebtCall__Outputs {
  _call: GetPositionDebtCall;

  constructor(call: GetPositionDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultCollateralRatioCall extends ethereum.Call {
  get inputs(): GetVaultCollateralRatioCall__Inputs {
    return new GetVaultCollateralRatioCall__Inputs(this);
  }

  get outputs(): GetVaultCollateralRatioCall__Outputs {
    return new GetVaultCollateralRatioCall__Outputs(this);
  }
}

export class GetVaultCollateralRatioCall__Inputs {
  _call: GetVaultCollateralRatioCall;

  constructor(call: GetVaultCollateralRatioCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetVaultCollateralRatioCall__Outputs {
  _call: GetVaultCollateralRatioCall;

  constructor(call: GetVaultCollateralRatioCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultDebtCall extends ethereum.Call {
  get inputs(): GetVaultDebtCall__Inputs {
    return new GetVaultDebtCall__Inputs(this);
  }

  get outputs(): GetVaultDebtCall__Outputs {
    return new GetVaultDebtCall__Outputs(this);
  }
}

export class GetVaultDebtCall__Inputs {
  _call: GetVaultDebtCall;

  constructor(call: GetVaultDebtCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetVaultDebtCall__Outputs {
  _call: GetVaultDebtCall;

  constructor(call: GetVaultDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
