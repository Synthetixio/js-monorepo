// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0xc3d78114D70CeDFD7fEE812142517A05243491a4';
export const abi = [
  'error CapacityLocked(uint256 marketId)',
  'error EmptyDistribution()',
  'error FeatureUnavailable()',
  'error InvalidParameter(string parameter, string reason)',
  'error MarketNotFound(uint128 marketId)',
  'error OverflowInt256ToInt128()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint128ToInt128()',
  'error OverflowUint256ToInt256()',
  'error OverflowUint256ToUint128()',
  'error PoolAlreadyExists(uint128 poolId)',
  'error PoolNotFound(uint128 poolId)',
  'error Unauthorized(address addr)',
  'error ZeroAddress()',
  'event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)',
  'event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)',
  'event PoolNameUpdated(uint128 indexed poolId, string indexed name, address indexed sender)',
  'event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)',
  'event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)',
  'event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)',
  'event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)',
  'function acceptPoolOwnership(uint128 poolId)',
  'function createPool(uint128 requestedPoolId, address owner)',
  'function getMinLiquidityRatio() view returns (uint256)',
  'function getNominatedPoolOwner(uint128 poolId) view returns (address)',
  'function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])',
  'function getPoolName(uint128 poolId) view returns (string poolName)',
  'function getPoolOwner(uint128 poolId) view returns (address)',
  'function nominatePoolOwner(address nominatedOwner, uint128 poolId)',
  'function renouncePoolNomination(uint128 poolId)',
  'function revokePoolNomination(uint128 poolId)',
  'function setMinLiquidityRatio(uint256 minLiquidityRatio)',
  'function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)',
  'function setPoolName(uint128 poolId, string name)',
];
export const name = 'PoolModule';
export const source = 'contracts/modules/core/PoolModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface PoolModuleInterface extends utils.Interface {
  functions: {
    'acceptPoolOwnership(uint128)': FunctionFragment;
    'createPool(uint128,address)': FunctionFragment;
    'getMinLiquidityRatio()': FunctionFragment;
    'getNominatedPoolOwner(uint128)': FunctionFragment;
    'getPoolConfiguration(uint128)': FunctionFragment;
    'getPoolName(uint128)': FunctionFragment;
    'getPoolOwner(uint128)': FunctionFragment;
    'nominatePoolOwner(address,uint128)': FunctionFragment;
    'renouncePoolNomination(uint128)': FunctionFragment;
    'revokePoolNomination(uint128)': FunctionFragment;
    'setMinLiquidityRatio(uint256)': FunctionFragment;
    'setPoolConfiguration(uint128,(uint128,uint128,int128)[])': FunctionFragment;
    'setPoolName(uint128,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptPoolOwnership'
      | 'createPool'
      | 'getMinLiquidityRatio'
      | 'getNominatedPoolOwner'
      | 'getPoolConfiguration'
      | 'getPoolName'
      | 'getPoolOwner'
      | 'nominatePoolOwner'
      | 'renouncePoolNomination'
      | 'revokePoolNomination'
      | 'setMinLiquidityRatio'
      | 'setPoolConfiguration'
      | 'setPoolName'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'acceptPoolOwnership',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'createPool',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'getMinLiquidityRatio', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getNominatedPoolOwner',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolConfiguration',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolName',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolOwner',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominatePoolOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renouncePoolNomination',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokePoolNomination',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinLiquidityRatio',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPoolConfiguration',
    values: [
      PromiseOrValue<BigNumberish>,
      {
        marketId: PromiseOrValue<BigNumberish>;
        weightD18: PromiseOrValue<BigNumberish>;
        maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPoolName',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'acceptPoolOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinLiquidityRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNominatedPoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatePoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renouncePoolNomination', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokePoolNomination', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinLiquidityRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolName', data: BytesLike): Result;

  events: {
    'PoolConfigurationSet(uint128,tuple[],address)': EventFragment;
    'PoolCreated(uint128,address,address)': EventFragment;
    'PoolNameUpdated(uint128,string,address)': EventFragment;
    'PoolNominationRenounced(uint128,address)': EventFragment;
    'PoolNominationRevoked(uint128,address)': EventFragment;
    'PoolOwnerNominated(uint128,address,address)': EventFragment;
    'PoolOwnershipAccepted(uint128,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PoolConfigurationSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolNameUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolNominationRenounced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolNominationRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolOwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolOwnershipAccepted'): EventFragment;
}

export interface PoolConfigurationSetEventObject {
  poolId: BigNumber;
  markets: [BigNumber, BigNumber, BigNumber] &
    { marketId: BigNumber; weightD18: BigNumber; maxDebtShareValueD18: BigNumber }[];
  sender: string;
}
export type PoolConfigurationSetEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber] &
      { marketId: BigNumber; weightD18: BigNumber; maxDebtShareValueD18: BigNumber }[],
    string
  ],
  PoolConfigurationSetEventObject
>;

export type PoolConfigurationSetEventFilter = TypedEventFilter<PoolConfigurationSetEvent>;

export interface PoolCreatedEventObject {
  poolId: BigNumber;
  owner: string;
  sender: string;
}
export type PoolCreatedEvent = TypedEvent<[BigNumber, string, string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolNameUpdatedEventObject {
  poolId: BigNumber;
  name: string;
  sender: string;
}
export type PoolNameUpdatedEvent = TypedEvent<
  [BigNumber, string, string],
  PoolNameUpdatedEventObject
>;

export type PoolNameUpdatedEventFilter = TypedEventFilter<PoolNameUpdatedEvent>;

export interface PoolNominationRenouncedEventObject {
  poolId: BigNumber;
  owner: string;
}
export type PoolNominationRenouncedEvent = TypedEvent<
  [BigNumber, string],
  PoolNominationRenouncedEventObject
>;

export type PoolNominationRenouncedEventFilter = TypedEventFilter<PoolNominationRenouncedEvent>;

export interface PoolNominationRevokedEventObject {
  poolId: BigNumber;
  owner: string;
}
export type PoolNominationRevokedEvent = TypedEvent<
  [BigNumber, string],
  PoolNominationRevokedEventObject
>;

export type PoolNominationRevokedEventFilter = TypedEventFilter<PoolNominationRevokedEvent>;

export interface PoolOwnerNominatedEventObject {
  poolId: BigNumber;
  nominatedOwner: string;
  owner: string;
}
export type PoolOwnerNominatedEvent = TypedEvent<
  [BigNumber, string, string],
  PoolOwnerNominatedEventObject
>;

export type PoolOwnerNominatedEventFilter = TypedEventFilter<PoolOwnerNominatedEvent>;

export interface PoolOwnershipAcceptedEventObject {
  poolId: BigNumber;
  owner: string;
}
export type PoolOwnershipAcceptedEvent = TypedEvent<
  [BigNumber, string],
  PoolOwnershipAcceptedEventObject
>;

export type PoolOwnershipAcceptedEventFilter = TypedEventFilter<PoolOwnershipAcceptedEvent>;

export interface PoolModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptPoolOwnership(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      requestedPoolId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMinLiquidityRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNominatedPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] &
          { marketId: BigNumber; weightD18: BigNumber; maxDebtShareValueD18: BigNumber }[]
      ]
    >;

    getPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { poolName: string }>;

    getPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nominatePoolOwner(
      nominatedOwner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renouncePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidityRatio(
      minLiquidityRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      newMarketConfigurations: {
        marketId: PromiseOrValue<BigNumberish>;
        weightD18: PromiseOrValue<BigNumberish>;
        maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
      }[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptPoolOwnership(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    requestedPoolId: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMinLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getNominatedPoolOwner(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolConfiguration(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] &
      { marketId: BigNumber; weightD18: BigNumber; maxDebtShareValueD18: BigNumber }[]
  >;

  getPoolName(poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getPoolOwner(poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  nominatePoolOwner(
    nominatedOwner: PromiseOrValue<string>,
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renouncePoolNomination(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePoolNomination(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidityRatio(
    minLiquidityRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolConfiguration(
    poolId: PromiseOrValue<BigNumberish>,
    newMarketConfigurations: {
      marketId: PromiseOrValue<BigNumberish>;
      weightD18: PromiseOrValue<BigNumberish>;
      maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
    }[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolName(
    poolId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptPoolOwnership(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPool(
      requestedPoolId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNominatedPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] &
        { marketId: BigNumber; weightD18: BigNumber; maxDebtShareValueD18: BigNumber }[]
    >;

    getPoolName(poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getPoolOwner(poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    nominatePoolOwner(
      nominatedOwner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidityRatio(
      minLiquidityRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      newMarketConfigurations: {
        marketId: PromiseOrValue<BigNumberish>;
        weightD18: PromiseOrValue<BigNumberish>;
        maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'PoolConfigurationSet(uint128,tuple[],address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      markets?: null,
      sender?: PromiseOrValue<string> | null
    ): PoolConfigurationSetEventFilter;
    PoolConfigurationSet(
      poolId?: PromiseOrValue<BigNumberish> | null,
      markets?: null,
      sender?: PromiseOrValue<string> | null
    ): PoolConfigurationSetEventFilter;

    'PoolCreated(uint128,address,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;

    'PoolNameUpdated(uint128,string,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PoolNameUpdatedEventFilter;
    PoolNameUpdated(
      poolId?: PromiseOrValue<BigNumberish> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PoolNameUpdatedEventFilter;

    'PoolNominationRenounced(uint128,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolNominationRenouncedEventFilter;
    PoolNominationRenounced(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolNominationRenouncedEventFilter;

    'PoolNominationRevoked(uint128,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolNominationRevokedEventFilter;
    PoolNominationRevoked(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolNominationRevokedEventFilter;

    'PoolOwnerNominated(uint128,address,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      nominatedOwner?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolOwnerNominatedEventFilter;
    PoolOwnerNominated(
      poolId?: PromiseOrValue<BigNumberish> | null,
      nominatedOwner?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolOwnerNominatedEventFilter;

    'PoolOwnershipAccepted(uint128,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolOwnershipAcceptedEventFilter;
    PoolOwnershipAccepted(
      poolId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PoolOwnershipAcceptedEventFilter;
  };

  estimateGas: {
    acceptPoolOwnership(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      requestedPoolId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMinLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNominatedPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominatePoolOwner(
      nominatedOwner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renouncePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinLiquidityRatio(
      minLiquidityRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      newMarketConfigurations: {
        marketId: PromiseOrValue<BigNumberish>;
        weightD18: PromiseOrValue<BigNumberish>;
        maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
      }[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptPoolOwnership(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      requestedPoolId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMinLiquidityRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNominatedPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolOwner(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominatePoolOwner(
      nominatedOwner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renouncePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePoolNomination(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidityRatio(
      minLiquidityRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolConfiguration(
      poolId: PromiseOrValue<BigNumberish>,
      newMarketConfigurations: {
        marketId: PromiseOrValue<BigNumberish>;
        weightD18: PromiseOrValue<BigNumberish>;
        maxDebtShareValueD18: PromiseOrValue<BigNumberish>;
      }[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolName(
      poolId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
