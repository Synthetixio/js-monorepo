// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0x19628d24CD41b30f65fe702B1a236Da40133375a';
export const abi = [
  'error EmptyDistribution()',
  'error FeatureUnavailable()',
  'error IncorrectMarketInterface(address market)',
  'error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)',
  'error NotEnoughLiquidity(uint128 marketId, uint256 amount)',
  'error OverflowInt256ToInt128()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint128ToInt128()',
  'error OverflowUint256ToInt256()',
  'error OverflowUint256ToUint128()',
  'error Unauthorized(address addr)',
  'event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)',
  'event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed sender)',
  'event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed sender)',
  'function depositMarketUsd(uint128 marketId, address target, uint256 amount)',
  'function getMarketCollateral(uint128 marketId) view returns (uint256)',
  'function getMarketDebtPerShare(uint128 marketId) returns (int256)',
  'function getMarketNetIssuance(uint128 marketId) view returns (int128)',
  'function getMarketReportedDebt(uint128 marketId) view returns (uint256)',
  'function getMarketTotalDebt(uint128 marketId) view returns (int256)',
  'function getWithdrawableUsd(uint128 marketId) view returns (uint256)',
  'function isMarketCapacityLocked(uint128 marketId) view returns (bool)',
  'function registerMarket(address market) returns (uint128 marketId)',
  'function withdrawMarketUsd(uint128 marketId, address target, uint256 amount)',
];
export const name = 'MarketManagerModule';
export const source = 'contracts/modules/core/MarketManagerModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface MarketManagerModuleInterface extends utils.Interface {
  functions: {
    'depositMarketUsd(uint128,address,uint256)': FunctionFragment;
    'getMarketCollateral(uint128)': FunctionFragment;
    'getMarketDebtPerShare(uint128)': FunctionFragment;
    'getMarketNetIssuance(uint128)': FunctionFragment;
    'getMarketReportedDebt(uint128)': FunctionFragment;
    'getMarketTotalDebt(uint128)': FunctionFragment;
    'getWithdrawableUsd(uint128)': FunctionFragment;
    'isMarketCapacityLocked(uint128)': FunctionFragment;
    'registerMarket(address)': FunctionFragment;
    'withdrawMarketUsd(uint128,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'depositMarketUsd'
      | 'getMarketCollateral'
      | 'getMarketDebtPerShare'
      | 'getMarketNetIssuance'
      | 'getMarketReportedDebt'
      | 'getMarketTotalDebt'
      | 'getWithdrawableUsd'
      | 'isMarketCapacityLocked'
      | 'registerMarket'
      | 'withdrawMarketUsd'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'depositMarketUsd',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketCollateral',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketDebtPerShare',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketNetIssuance',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketReportedDebt',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketTotalDebt',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getWithdrawableUsd',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isMarketCapacityLocked',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'registerMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawMarketUsd',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'depositMarketUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketDebtPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketNetIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketReportedDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketTotalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawableUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMarketCapacityLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawMarketUsd', data: BytesLike): Result;

  events: {
    'MarketRegistered(address,uint128,address)': EventFragment;
    'MarketUsdDeposited(uint128,address,uint256,address)': EventFragment;
    'MarketUsdWithdrawn(uint128,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MarketRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketUsdDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketUsdWithdrawn'): EventFragment;
}

export interface MarketRegisteredEventObject {
  market: string;
  marketId: BigNumber;
  sender: string;
}
export type MarketRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  MarketRegisteredEventObject
>;

export type MarketRegisteredEventFilter = TypedEventFilter<MarketRegisteredEvent>;

export interface MarketUsdDepositedEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  sender: string;
}
export type MarketUsdDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MarketUsdDepositedEventObject
>;

export type MarketUsdDepositedEventFilter = TypedEventFilter<MarketUsdDepositedEvent>;

export interface MarketUsdWithdrawnEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  sender: string;
}
export type MarketUsdWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MarketUsdWithdrawnEventObject
>;

export type MarketUsdWithdrawnEventFilter = TypedEventFilter<MarketUsdWithdrawnEvent>;

export interface MarketManagerModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketManagerModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMarketCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketDebtPerShare(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMarketNetIssuance(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketReportedDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketTotalDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableUsd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isMarketCapacityLocked(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositMarketUsd(
    marketId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMarketCollateral(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketDebtPerShare(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMarketNetIssuance(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketReportedDebt(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketTotalDebt(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawableUsd(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isMarketCapacityLocked(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerMarket(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMarketUsd(
    marketId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketNetIssuance(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketReportedDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableUsd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCapacityLocked(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'MarketRegistered(address,uint128,address)'(
      market?: PromiseOrValue<string> | null,
      marketId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): MarketRegisteredEventFilter;
    MarketRegistered(
      market?: PromiseOrValue<string> | null,
      marketId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): MarketRegisteredEventFilter;

    'MarketUsdDeposited(uint128,address,uint256,address)'(
      marketId?: PromiseOrValue<BigNumberish> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): MarketUsdDepositedEventFilter;
    MarketUsdDeposited(
      marketId?: PromiseOrValue<BigNumberish> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): MarketUsdDepositedEventFilter;

    'MarketUsdWithdrawn(uint128,address,uint256,address)'(
      marketId?: PromiseOrValue<BigNumberish> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): MarketUsdWithdrawnEventFilter;
    MarketUsdWithdrawn(
      marketId?: PromiseOrValue<BigNumberish> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): MarketUsdWithdrawnEventFilter;
  };

  estimateGas: {
    depositMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMarketCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMarketNetIssuance(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketReportedDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableUsd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCapacityLocked(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMarketCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketDebtPerShare(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMarketNetIssuance(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketReportedDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalDebt(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableUsd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketCapacityLocked(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMarket(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMarketUsd(
      marketId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
