// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0xf6f4CB44267564886BC76c5028890FaFE0A2347F';
export const abi = [
  'error CapacityLocked(uint256 marketId)',
  'error CollateralDepositDisabled(address collateralType)',
  'error EmptyDistribution()',
  'error InsufficientAccountCollateral(uint256 requestedAmount)',
  'error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)',
  'error InsufficientDelegation(uint256 minDelegation)',
  'error InvalidLeverage(uint256 leverage)',
  'error MarketNotFound(uint128 marketId)',
  'error OverflowInt128ToUint128()',
  'error OverflowInt256ToInt128()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint128ToInt128()',
  'error OverflowUint256ToInt256()',
  'error OverflowUint256ToUint128()',
  'error PermissionDenied(uint128 accountId, bytes32 permission, address target)',
  'error PoolNotFound(uint128 poolId)',
  'error PositionOutOfBounds()',
  'error ValueAlreadyInSet()',
  'error ValueNotInSet()',
  'event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)',
  'function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmount, uint256 leverage)',
  'function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)',
  'function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)',
  'function getPositionCollateralizationRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)',
  'function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256)',
  'function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)',
  'function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)',
  'function getVaultDebt(uint128 poolId, address collateralType) returns (int256)',
];
export const name = 'VaultModule';
export const source = 'contracts/modules/core/VaultModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface VaultModuleInterface extends utils.Interface {
  functions: {
    'delegateCollateral(uint128,uint128,address,uint256,uint256)': FunctionFragment;
    'getPosition(uint128,uint128,address)': FunctionFragment;
    'getPositionCollateral(uint128,uint128,address)': FunctionFragment;
    'getPositionCollateralizationRatio(uint128,uint128,address)': FunctionFragment;
    'getPositionDebt(uint128,uint128,address)': FunctionFragment;
    'getVaultCollateral(uint128,address)': FunctionFragment;
    'getVaultCollateralRatio(uint128,address)': FunctionFragment;
    'getVaultDebt(uint128,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'delegateCollateral'
      | 'getPosition'
      | 'getPositionCollateral'
      | 'getPositionCollateralizationRatio'
      | 'getPositionDebt'
      | 'getVaultCollateral'
      | 'getVaultCollateralRatio'
      | 'getVaultDebt'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'delegateCollateral',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionCollateralizationRatio',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionDebt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultCollateralRatio',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultDebt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'delegateCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionCollateral', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPositionCollateralizationRatio',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPositionDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultDebt', data: BytesLike): Result;

  events: {
    'DelegationUpdated(uint128,uint128,address,uint256,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DelegationUpdated'): EventFragment;
}

export interface DelegationUpdatedEventObject {
  accountId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  amount: BigNumber;
  leverage: BigNumber;
  sender: string;
}
export type DelegationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  DelegationUpdatedEventObject
>;

export type DelegationUpdatedEventFilter = TypedEventFilter<DelegationUpdatedEvent>;

export interface VaultModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegateCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      newCollateralAmount: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPositionCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

    getPositionCollateralizationRatio(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPositionDebt(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVaultCollateral(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

    getVaultCollateralRatio(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVaultDebt(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  delegateCollateral(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    newCollateralAmount: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPosition(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPositionCollateral(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

  getPositionCollateralizationRatio(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPositionDebt(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVaultCollateral(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

  getVaultCollateralRatio(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVaultDebt(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegateCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      newCollateralAmount: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralAmount: BigNumber;
        collateralValue: BigNumber;
        debt: BigNumber;
        collateralizationRatio: BigNumber;
      }
    >;

    getPositionCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

    getPositionCollateralizationRatio(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateral(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; value: BigNumber }>;

    getVaultCollateralRatio(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'DelegationUpdated(uint128,uint128,address,uint256,uint256,address)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: PromiseOrValue<string> | null
    ): DelegationUpdatedEventFilter;
    DelegationUpdated(
      accountId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: PromiseOrValue<string> | null
    ): DelegationUpdatedEventFilter;
  };

  estimateGas: {
    delegateCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      newCollateralAmount: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPositionCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCollateralizationRatio(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVaultCollateral(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralRatio(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegateCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      newCollateralAmount: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPositionCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionCollateralizationRatio(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPositionDebt(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVaultCollateral(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralRatio(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVaultDebt(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
