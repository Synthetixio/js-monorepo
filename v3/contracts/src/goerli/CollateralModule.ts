// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0x77A93818448911f2388Ad2220E20dBD09153e4fb';
export const abi = [
  'error CollateralDepositDisabled(address collateralType)',
  'error CollateralNotFound()',
  'error FailedTransfer(address from, address to, uint256 value)',
  'error InsufficientAccountCollateral(uint256 amount)',
  'error InsufficientAllowance(uint256 required, uint256 existing)',
  'error OutOfBounds()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint256ToUint128()',
  'error PermissionDenied(uint128 accountId, bytes32 permission, address target)',
  'error PositionOutOfBounds()',
  'event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)',
  'event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)',
  'function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 items)',
  'function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)',
  'function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)',
  'function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)',
  'function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)',
  'function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)',
];
export const name = 'CollateralModule';
export const source = 'contracts/modules/core/CollateralModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface CollateralModuleInterface extends utils.Interface {
  functions: {
    'cleanExpiredLocks(uint128,address,uint256,uint256)': FunctionFragment;
    'createLock(uint128,address,uint256,uint64)': FunctionFragment;
    'deposit(uint128,address,uint256)': FunctionFragment;
    'getAccountAvailableCollateral(uint128,address)': FunctionFragment;
    'getAccountCollateral(uint128,address)': FunctionFragment;
    'withdraw(uint128,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'cleanExpiredLocks'
      | 'createLock'
      | 'deposit'
      | 'getAccountAvailableCollateral'
      | 'getAccountCollateral'
      | 'withdraw'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'cleanExpiredLocks',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'createLock',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountAvailableCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'cleanExpiredLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountAvailableCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposited(uint128,address,uint256,address)': EventFragment;
    'Withdrawn(uint128,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface DepositedEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface WithdrawnEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface CollateralModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cleanExpiredLocks(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLock(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expireTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountAvailableCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalAssigned: BigNumber;
        totalLocked: BigNumber;
      }
    >;

    withdraw(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cleanExpiredLocks(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    offset: PromiseOrValue<BigNumberish>,
    items: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLock(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expireTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountAvailableCollateral(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountCollateral(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalDeposited: BigNumber;
      totalAssigned: BigNumber;
      totalLocked: BigNumber;
    }
  >;

  withdraw(
    accountId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cleanExpiredLocks(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLock(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expireTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountAvailableCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalAssigned: BigNumber;
        totalLocked: BigNumber;
      }
    >;

    withdraw(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'Deposited(uint128,address,uint256,address)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sender?: PromiseOrValue<string> | null
    ): DepositedEventFilter;
    Deposited(
      accountId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sender?: PromiseOrValue<string> | null
    ): DepositedEventFilter;

    'Withdrawn(uint128,address,uint256,address)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sender?: PromiseOrValue<string> | null
    ): WithdrawnEventFilter;
    Withdrawn(
      accountId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      sender?: PromiseOrValue<string> | null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    cleanExpiredLocks(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLock(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expireTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountAvailableCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cleanExpiredLocks(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      items: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLock(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expireTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountAvailableCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCollateral(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      accountId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
