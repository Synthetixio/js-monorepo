// !!! DO NOT EDIT !!! Automatically generated file

export const address = null;
export const abi = [
  'constructor()',
  'function allRoundDataShouldRevert() view returns (bool)',
  'function decimals() view returns (uint8)',
  'function entries(uint256) view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)',
  'function getAnswer(uint256 _roundId) view returns (int256)',
  'function getRoundData(uint80 _roundId) view returns (uint80, int256, uint256, uint256, uint80)',
  'function getTimestamp(uint256 _roundId) view returns (uint256)',
  'function keyDecimals() view returns (uint8)',
  'function latestRound() view returns (uint256)',
  'function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)',
  'function latestRoundDataShouldRevert() view returns (bool)',
  'function roundId() view returns (uint80)',
  'function setAllRoundDataShouldRevert(bool _shouldRevert)',
  'function setDecimals(uint8 _decimals)',
  'function setLatestAnswer(int256 answer, uint256 timestamp)',
  'function setLatestAnswerWithRound(int256 answer, uint256 timestamp, uint80 _roundId)',
  'function setLatestRoundDataShouldRevert(bool _shouldRevert)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface ChainlinkAggregatorInterface extends utils.Interface {
  functions: {
    'allRoundDataShouldRevert()': FunctionFragment;
    'decimals()': FunctionFragment;
    'entries(uint256)': FunctionFragment;
    'getAnswer(uint256)': FunctionFragment;
    'getRoundData(uint80)': FunctionFragment;
    'getTimestamp(uint256)': FunctionFragment;
    'keyDecimals()': FunctionFragment;
    'latestRound()': FunctionFragment;
    'latestRoundData()': FunctionFragment;
    'latestRoundDataShouldRevert()': FunctionFragment;
    'roundId()': FunctionFragment;
    'setAllRoundDataShouldRevert(bool)': FunctionFragment;
    'setDecimals(uint8)': FunctionFragment;
    'setLatestAnswer(int256,uint256)': FunctionFragment;
    'setLatestAnswerWithRound(int256,uint256,uint80)': FunctionFragment;
    'setLatestRoundDataShouldRevert(bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allRoundDataShouldRevert'
      | 'decimals'
      | 'entries'
      | 'getAnswer'
      | 'getRoundData'
      | 'getTimestamp'
      | 'keyDecimals'
      | 'latestRound'
      | 'latestRoundData'
      | 'latestRoundDataShouldRevert'
      | 'roundId'
      | 'setAllRoundDataShouldRevert'
      | 'setDecimals'
      | 'setLatestAnswer'
      | 'setLatestAnswerWithRound'
      | 'setLatestRoundDataShouldRevert'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allRoundDataShouldRevert', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'entries', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getAnswer', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getRoundData',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTimestamp',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'keyDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestRound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestRoundData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestRoundDataShouldRevert', values?: undefined): string;
  encodeFunctionData(functionFragment: 'roundId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAllRoundDataShouldRevert',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDecimals',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLatestAnswer',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLatestAnswerWithRound',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLatestRoundDataShouldRevert',
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: 'allRoundDataShouldRevert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAnswer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoundData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keyDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestRoundData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestRoundDataShouldRevert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roundId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllRoundDataShouldRevert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLatestAnswer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLatestAnswerWithRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLatestRoundDataShouldRevert', data: BytesLike): Result;

  events: {};
}

export interface ChainlinkAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getAnswer(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestamp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keyDecimals(overrides?: CallOverrides): Promise<[number]>;

    latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<[boolean]>;

    roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestAnswerWithRound(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  entries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getRoundData(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTimestamp(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keyDecimals(overrides?: CallOverrides): Promise<number>;

  latestRound(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

  roundId(overrides?: CallOverrides): Promise<BigNumber>;

  setAllRoundDataShouldRevert(
    _shouldRevert: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDecimals(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestAnswer(
    answer: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestAnswerWithRound(
    answer: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLatestRoundDataShouldRevert(
    _shouldRevert: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getAnswer(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestamp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyDecimals(overrides?: CallOverrides): Promise<number>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setAllRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecimals(_decimals: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestAnswerWithRound(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    entries(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAnswer(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setAllRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestAnswerWithRound(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnswer(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDecimals(
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestAnswer(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestAnswerWithRound(
      answer: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
