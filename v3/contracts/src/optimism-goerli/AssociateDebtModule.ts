// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0xc555AfdCa6FbeF64fbE9feD62E27Bd98F8a686D3';
export const abi = [
  'error EmptyDistribution()',
  'error FeatureUnavailable()',
  'error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)',
  'error MarketNotFound(uint128 marketId)',
  'error NotFundedByPool(uint256 marketId, uint256 poolId)',
  'error OverflowInt256ToInt128()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint128ToInt128()',
  'error OverflowUint256ToInt256()',
  'error OverflowUint256ToUint128()',
  'error Unauthorized(address actual)',
  'event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)',
  'function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)',
];
export const name = 'AssociateDebtModule';
export const source = 'contracts/modules/core/AssociateDebtModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface AssociateDebtModuleInterface extends utils.Interface {
  functions: {
    'associateDebt(uint128,uint128,address,uint128,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'associateDebt'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'associateDebt',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'associateDebt', data: BytesLike): Result;

  events: {
    'DebtAssociated(uint128,uint128,address,uint128,uint256,int256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DebtAssociated'): EventFragment;
}

export interface DebtAssociatedEventObject {
  marketId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  accountId: BigNumber;
  amount: BigNumber;
  updatedDebt: BigNumber;
}
export type DebtAssociatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  DebtAssociatedEventObject
>;

export type DebtAssociatedEventFilter = TypedEventFilter<DebtAssociatedEvent>;

export interface AssociateDebtModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssociateDebtModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    associateDebt(
      marketId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  associateDebt(
    marketId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    accountId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    associateDebt(
      marketId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'DebtAssociated(uint128,uint128,address,uint128,uint256,int256)'(
      marketId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      accountId?: null,
      amount?: null,
      updatedDebt?: null
    ): DebtAssociatedEventFilter;
    DebtAssociated(
      marketId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      accountId?: null,
      amount?: null,
      updatedDebt?: null
    ): DebtAssociatedEventFilter;
  };

  estimateGas: {
    associateDebt(
      marketId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    associateDebt(
      marketId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
