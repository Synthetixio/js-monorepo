// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0x4aFF595044Ac6844151481B031D9A2E291aE37fD';
export const abi = [
  'error InvalidPermission(bytes32 permission)',
  'error InvalidPermission()',
  'error OnlyAccountTokenProxy(address origin)',
  'error PermissionDenied(uint128 accountId, bytes32 permission, address target)',
  'error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)',
  'error PositionOutOfBounds()',
  'error ValueAlreadyInSet()',
  'error ValueNotInSet()',
  'error ZeroAddress()',
  'event AccountCreated(address indexed sender, uint128 indexed accountId)',
  'event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)',
  'event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)',
  'function createAccount(uint128 requestedAccountId)',
  'function getAccountOwner(uint128 accountId) view returns (address)',
  'function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] permissions)',
  'function getAccountTokenAddress() view returns (address)',
  'function grantPermission(uint128 accountId, bytes32 permission, address user)',
  'function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)',
  'function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)',
  'function notifyAccountTransfer(address to, uint128 accountId)',
  'function renouncePermission(uint128 accountId, bytes32 permission)',
  'function revokePermission(uint128 accountId, bytes32 permission, address user)',
];
export const name = 'AccountModule';
export const source = 'contracts/modules/core/AccountModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface AccountModuleInterface extends utils.Interface {
  functions: {
    'createAccount(uint128)': FunctionFragment;
    'getAccountOwner(uint128)': FunctionFragment;
    'getAccountPermissions(uint128)': FunctionFragment;
    'getAccountTokenAddress()': FunctionFragment;
    'grantPermission(uint128,bytes32,address)': FunctionFragment;
    'hasPermission(uint128,bytes32,address)': FunctionFragment;
    'isAuthorized(uint128,bytes32,address)': FunctionFragment;
    'notifyAccountTransfer(address,uint128)': FunctionFragment;
    'renouncePermission(uint128,bytes32)': FunctionFragment;
    'revokePermission(uint128,bytes32,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'createAccount'
      | 'getAccountOwner'
      | 'getAccountPermissions'
      | 'getAccountTokenAddress'
      | 'grantPermission'
      | 'hasPermission'
      | 'isAuthorized'
      | 'notifyAccountTransfer'
      | 'renouncePermission'
      | 'revokePermission'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'createAccount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountOwner',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountPermissions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getAccountTokenAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'grantPermission',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasPermission',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isAuthorized',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'notifyAccountTransfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renouncePermission',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokePermission',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'createAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountPermissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantPermission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPermission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAuthorized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyAccountTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renouncePermission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokePermission', data: BytesLike): Result;

  events: {
    'AccountCreated(address,uint128)': EventFragment;
    'PermissionGranted(uint128,bytes32,address,address)': EventFragment;
    'PermissionRevoked(uint128,bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PermissionGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PermissionRevoked'): EventFragment;
}

export interface AccountCreatedEventObject {
  sender: string;
  accountId: BigNumber;
}
export type AccountCreatedEvent = TypedEvent<[string, BigNumber], AccountCreatedEventObject>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface PermissionGrantedEventObject {
  accountId: BigNumber;
  permission: string;
  user: string;
  sender: string;
}
export type PermissionGrantedEvent = TypedEvent<
  [BigNumber, string, string, string],
  PermissionGrantedEventObject
>;

export type PermissionGrantedEventFilter = TypedEventFilter<PermissionGrantedEvent>;

export interface PermissionRevokedEventObject {
  accountId: BigNumber;
  permission: string;
  user: string;
  sender: string;
}
export type PermissionRevokedEvent = TypedEvent<
  [BigNumber, string, string, string],
  PermissionRevokedEventObject
>;

export type PermissionRevokedEventFilter = TypedEventFilter<PermissionRevokedEvent>;

export interface AccountModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAccount(
      requestedAccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountOwner(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAccountPermissions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[string, string[]] & { user: string; permissions: string[] }[]] & {
        permissions: [string, string[]] & { user: string; permissions: string[] }[];
      }
    >;

    getAccountTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    grantPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAuthorized(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    notifyAccountTransfer(
      to: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renouncePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createAccount(
    requestedAccountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountOwner(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccountPermissions(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string[]] & { user: string; permissions: string[] }[]>;

  getAccountTokenAddress(overrides?: CallOverrides): Promise<string>;

  grantPermission(
    accountId: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasPermission(
    accountId: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAuthorized(
    accountId: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  notifyAccountTransfer(
    to: PromiseOrValue<string>,
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renouncePermission(
    accountId: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePermission(
    accountId: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAccount(
      requestedAccountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountOwner(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountPermissions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { user: string; permissions: string[] }[]>;

    getAccountTokenAddress(overrides?: CallOverrides): Promise<string>;

    grantPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAuthorized(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    notifyAccountTransfer(
      to: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AccountCreated(address,uint128)'(
      sender?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<BigNumberish> | null
    ): AccountCreatedEventFilter;
    AccountCreated(
      sender?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<BigNumberish> | null
    ): AccountCreatedEventFilter;

    'PermissionGranted(uint128,bytes32,address,address)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      permission?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      sender?: null
    ): PermissionGrantedEventFilter;
    PermissionGranted(
      accountId?: PromiseOrValue<BigNumberish> | null,
      permission?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      sender?: null
    ): PermissionGrantedEventFilter;

    'PermissionRevoked(uint128,bytes32,address,address)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      permission?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      sender?: null
    ): PermissionRevokedEventFilter;
    PermissionRevoked(
      accountId?: PromiseOrValue<BigNumberish> | null,
      permission?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      sender?: null
    ): PermissionRevokedEventFilter;
  };

  estimateGas: {
    createAccount(
      requestedAccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountOwner(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPermissions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    grantPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyAccountTransfer(
      to: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renouncePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAccount(
      requestedAccountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountOwner(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPermissions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasPermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyAccountTransfer(
      to: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renouncePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePermission(
      accountId: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
