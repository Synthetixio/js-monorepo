// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0xEA16797F6AAd769f68686075D4c12DB453166D09';
export const abi = [
  'error InvalidParameter(string parameter, string reason)',
  'error OverflowInt256ToInt128()',
  'error OverflowInt256ToUint256()',
  'error OverflowUint256ToInt256()',
  'error OverflowUint256ToUint128()',
  'error PermissionDenied(uint128 accountId, bytes32 permission, address target)',
  'error PositionOutOfBounds()',
  'error Unauthorized(address addr)',
  'error ValueAlreadyInSet()',
  'event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)',
  'event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)',
  'event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)',
  'function claimRewards(uint128 poolId, address collateralType, uint128 accountId, address distributor) returns (uint256)',
  'function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)',
  'function getClaimableRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])',
  'function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)',
  'function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)',
];
export const name = 'RewardsManagerModule';
export const source = 'contracts/modules/core/RewardsManagerModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface RewardsManagerModuleInterface extends utils.Interface {
  functions: {
    'claimRewards(uint128,address,uint128,address)': FunctionFragment;
    'distributeRewards(uint128,address,uint256,uint64,uint32)': FunctionFragment;
    'getClaimableRewards(uint128,address,uint128)': FunctionFragment;
    'getRewardRate(uint128,address,address)': FunctionFragment;
    'registerRewardsDistributor(uint128,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'claimRewards'
      | 'distributeRewards'
      | 'getClaimableRewards'
      | 'getRewardRate'
      | 'registerRewardsDistributor'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'distributeRewards',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getClaimableRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardRate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerRewardsDistributor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerRewardsDistributor', data: BytesLike): Result;

  events: {
    'RewardsClaimed(uint128,uint128,address,address,uint256)': EventFragment;
    'RewardsDistributed(uint128,address,address,uint256,uint256,uint256)': EventFragment;
    'RewardsDistributorRegistered(uint128,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDistributorRegistered'): EventFragment;
}

export interface RewardsClaimedEventObject {
  accountId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsDistributedEventObject {
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
  amount: BigNumber;
  start: BigNumber;
  duration: BigNumber;
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter = TypedEventFilter<RewardsDistributedEvent>;

export interface RewardsDistributorRegisteredEventObject {
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
}
export type RewardsDistributorRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  RewardsDistributorRegisteredEventObject
>;

export type RewardsDistributorRegisteredEventFilter =
  TypedEventFilter<RewardsDistributorRegisteredEvent>;

export interface RewardsManagerModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsManagerModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardRate(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerRewardsDistributor(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    accountId: PromiseOrValue<BigNumberish>,
    distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    start: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableRewards(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardRate(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    distributor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerRewardsDistributor(
    poolId: PromiseOrValue<BigNumberish>,
    collateralType: PromiseOrValue<string>,
    distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[]]>;

    getRewardRate(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRewardsDistributor(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'RewardsClaimed(uint128,uint128,address,address,uint256)'(
      accountId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      accountId?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: null,
      amount?: null
    ): RewardsClaimedEventFilter;

    'RewardsDistributed(uint128,address,address,uint256,uint256,uint256)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: null,
      amount?: null,
      start?: null,
      duration?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: null,
      amount?: null,
      start?: null,
      duration?: null
    ): RewardsDistributedEventFilter;

    'RewardsDistributorRegistered(uint128,address,address)'(
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: PromiseOrValue<string> | null
    ): RewardsDistributorRegisteredEventFilter;
    RewardsDistributorRegistered(
      poolId?: PromiseOrValue<BigNumberish> | null,
      collateralType?: PromiseOrValue<string> | null,
      distributor?: PromiseOrValue<string> | null
    ): RewardsDistributorRegisteredEventFilter;
  };

  estimateGas: {
    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardRate(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRewardsDistributor(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableRewards(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardRate(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRewardsDistributor(
      poolId: PromiseOrValue<BigNumberish>,
      collateralType: PromiseOrValue<string>,
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
