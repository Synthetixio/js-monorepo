// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0x670578Cc861bDEA7A97D8ac75FD8F9Ad9aC2bC48';
export const abi = [
  'error Unauthorized(address addr)',
  'function configureOracleManager(address oracleManagerAddress)',
  'function registerCcip(address ccipSend, address ccipReceive, address ccipTokenPool)',
];
export const name = 'UtilsModule';
export const source = 'contracts/modules/core/UtilsModule.sol';
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface UtilsModuleInterface extends utils.Interface {
  functions: {
    'configureOracleManager(address)': FunctionFragment;
    'registerCcip(address,address,address)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'configureOracleManager' | 'registerCcip'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'configureOracleManager',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerCcip',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'configureOracleManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerCcip', data: BytesLike): Result;

  events: {};
}

export interface UtilsModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UtilsModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureOracleManager(
      oracleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerCcip(
      ccipSend: PromiseOrValue<string>,
      ccipReceive: PromiseOrValue<string>,
      ccipTokenPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  configureOracleManager(
    oracleManagerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerCcip(
    ccipSend: PromiseOrValue<string>,
    ccipReceive: PromiseOrValue<string>,
    ccipTokenPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    configureOracleManager(
      oracleManagerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerCcip(
      ccipSend: PromiseOrValue<string>,
      ccipReceive: PromiseOrValue<string>,
      ccipTokenPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    configureOracleManager(
      oracleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerCcip(
      ccipSend: PromiseOrValue<string>,
      ccipReceive: PromiseOrValue<string>,
      ccipTokenPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureOracleManager(
      oracleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerCcip(
      ccipSend: PromiseOrValue<string>,
      ccipReceive: PromiseOrValue<string>,
      ccipTokenPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
