/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RewardDistributorMock,
  RewardDistributorMockInterface,
} from "../../contracts/RewardDistributorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "distributeRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payout",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80634571e3a6116100505780634571e3a6146100c9578063d221e7f2146100dc578063fc0c546a146100ef57600080fd5b806301ffc9a71461007757806306fdde031461009f57806330d503da146100b4575b600080fd5b61008a610085366004610416565b61010a565b60405190151581526020015b60405180910390f35b6100a7610141565b6040516100969190610447565b6100c76100c23660046104d8565b6101d3565b005b6100c76100d736600461053b565b610266565b61008a6100ea36600461060d565b6102c7565b6001546040516001600160a01b039091168152602001610096565b60006001600160e01b031982166328d06d9b60e01b148061013b57506001600160e01b031982166301ffc9a760e01b145b92915050565b60606002805461015090610669565b80601f016020809104026020016040519081016040528092919081815260200182805461017c90610669565b80156101c95780601f1061019e576101008083540402835291602001916101c9565b820191906000526020600020905b8154815290600101906020018083116101ac57829003601f168201915b5050505050905090565b60005460405163186a81ed60e11b81526fffffffffffffffffffffffffffffffff871660048201526001600160a01b038681166024830152604482018690526064820185905260848201849052909116906330d503da9060a401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b505050505050505050565b600080546001600160a01b038086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180549285169290911691909117905580516102c190600290602084019061037d565b50505050565b600080546001600160a01b031633146102f95760405163472511eb60e11b815233600482015260240160405180910390fd5b60015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037091906106a3565b5060019695505050505050565b82805461038990610669565b90600052602060002090601f0160209004810192826103ab57600085556103f1565b82601f106103c457805160ff19168380011785556103f1565b828001600101855582156103f1579182015b828111156103f15782518255916020019190600101906103d6565b506103fd929150610401565b5090565b5b808211156103fd5760008155600101610402565b60006020828403121561042857600080fd5b81356001600160e01b03198116811461044057600080fd5b9392505050565b600060208083528351808285015260005b8181101561047457858101830151858201604001528201610458565b81811115610486576000604083870101525b50601f01601f1916929092016040019392505050565b80356fffffffffffffffffffffffffffffffff811681146104bc57600080fd5b919050565b80356001600160a01b03811681146104bc57600080fd5b600080600080600060a086880312156104f057600080fd5b6104f98661049c565b9450610507602087016104c1565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561055057600080fd5b610559846104c1565b9250610567602085016104c1565b9150604084013567ffffffffffffffff8082111561058457600080fd5b818601915086601f83011261059857600080fd5b8135818111156105aa576105aa610525565b604051601f8201601f19908116603f011681019083821181831017156105d2576105d2610525565b816040528281528960208487010111156105eb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080600080600060a0868803121561062557600080fd5b61062e8661049c565b945061063c6020870161049c565b935061064a604087016104c1565b9250610658606087016104c1565b949793965091946080013592915050565b600181811c9082168061067d57607f821691505b60208210810361069d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156106b557600080fd5b8151801515811461044057600080fdfea164736f6c634300080d000a";

type RewardDistributorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardDistributorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardDistributorMock__factory extends ContractFactory {
  constructor(...args: RewardDistributorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RewardDistributorMock> {
    return super.deploy(overrides || {}) as Promise<RewardDistributorMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RewardDistributorMock {
    return super.attach(address) as RewardDistributorMock;
  }
  override connect(signer: Signer): RewardDistributorMock__factory {
    return super.connect(signer) as RewardDistributorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardDistributorMockInterface {
    return new utils.Interface(_abi) as RewardDistributorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardDistributorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RewardDistributorMock;
  }
}
