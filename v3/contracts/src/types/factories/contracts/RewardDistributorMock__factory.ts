/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RewardDistributorMock,
  RewardDistributorMockInterface,
} from "../../contracts/RewardDistributorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "distributeRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payout",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610657806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80634571e3a6116100505780634571e3a61461009f578063d221e7f2146100b2578063fc0c546a146100d557600080fd5b806306fdde031461006c57806330d503da1461008a575b600080fd5b6100746100f0565b60405161008191906103c5565b60405180910390f35b61009d610098366004610456565b610182565b005b61009d6100ad3660046104b9565b610215565b6100c56100c036600461058b565b610276565b6040519015158152602001610081565b6001546040516001600160a01b039091168152602001610081565b6060600280546100ff906105e7565b80601f016020809104026020016040519081016040528092919081815260200182805461012b906105e7565b80156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b5050505050905090565b60005460405163186a81ed60e11b81526fffffffffffffffffffffffffffffffff871660048201526001600160a01b038681166024830152604482018690526064820185905260848201849052909116906330d503da9060a401600060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b505050505050505050565b600080546001600160a01b038086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001805492851692909116919091179055805161027090600290602084019061032c565b50505050565b600080546001600160a01b031633146102a85760405163472511eb60e11b815233600482015260240160405180910390fd5b60015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610621565b5060019695505050505050565b828054610338906105e7565b90600052602060002090601f01602090048101928261035a57600085556103a0565b82601f1061037357805160ff19168380011785556103a0565b828001600101855582156103a0579182015b828111156103a0578251825591602001919060010190610385565b506103ac9291506103b0565b5090565b5b808211156103ac57600081556001016103b1565b600060208083528351808285015260005b818110156103f2578581018301518582016040015282016103d6565b81811115610404576000604083870101525b50601f01601f1916929092016040019392505050565b80356fffffffffffffffffffffffffffffffff8116811461043a57600080fd5b919050565b80356001600160a01b038116811461043a57600080fd5b600080600080600060a0868803121561046e57600080fd5b6104778661041a565b94506104856020870161043f565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156104ce57600080fd5b6104d78461043f565b92506104e56020850161043f565b9150604084013567ffffffffffffffff8082111561050257600080fd5b818601915086601f83011261051657600080fd5b813581811115610528576105286104a3565b604051601f8201601f19908116603f01168101908382118183101715610550576105506104a3565b8160405282815289602084870101111561056957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080600080600060a086880312156105a357600080fd5b6105ac8661041a565b94506105ba6020870161041a565b93506105c86040870161043f565b92506105d66060870161043f565b949793965091946080013592915050565b600181811c908216806105fb57607f821691505b60208210810361061b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561063357600080fd5b8151801515811461064357600080fd5b939250505056fea164736f6c634300080d000a";

type RewardDistributorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardDistributorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardDistributorMock__factory extends ContractFactory {
  constructor(...args: RewardDistributorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RewardDistributorMock> {
    return super.deploy(overrides || {}) as Promise<RewardDistributorMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RewardDistributorMock {
    return super.attach(address) as RewardDistributorMock;
  }
  override connect(signer: Signer): RewardDistributorMock__factory {
    return super.connect(signer) as RewardDistributorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardDistributorMockInterface {
    return new utils.Interface(_abi) as RewardDistributorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardDistributorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RewardDistributorMock;
  }
}
