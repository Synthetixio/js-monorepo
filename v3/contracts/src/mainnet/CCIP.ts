// !!! DO NOT EDIT !!! Automatically generated file

export const address = '0x0000000000000000000000000000000000000000';
export const abi = [
  'function ccipSend(uint256 destChainId, tuple(bytes receiver, bytes data, address[] tokens, uint256[] amounts, uint256 gasLimit) message)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace IEVM2AnySubscriptionOnRampRouterInterface {
  export type EVM2AnySubscriptionMessageStruct = {
    receiver: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
    tokens: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    gasLimit: PromiseOrValue<BigNumberish>;
  };

  export type EVM2AnySubscriptionMessageStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    BigNumber
  ] & {
    receiver: string;
    data: string;
    tokens: string[];
    amounts: BigNumber[];
    gasLimit: BigNumber;
  };
}

export interface CCIPInterface extends utils.Interface {
  functions: {
    'ccipSend(uint256,(bytes,bytes,address[],uint256[],uint256))': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'ccipSend'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'ccipSend',
    values: [
      PromiseOrValue<BigNumberish>,
      IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'ccipSend', data: BytesLike): Result;

  events: {};
}

export interface CCIP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CCIPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ccipSend(
      destChainId: PromiseOrValue<BigNumberish>,
      message: IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ccipSend(
    destChainId: PromiseOrValue<BigNumberish>,
    message: IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ccipSend(
      destChainId: PromiseOrValue<BigNumberish>,
      message: IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ccipSend(
      destChainId: PromiseOrValue<BigNumberish>,
      message: IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ccipSend(
      destChainId: PromiseOrValue<BigNumberish>,
      message: IEVM2AnySubscriptionOnRampRouterInterface.EVM2AnySubscriptionMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
