export const address = '0xbcAe82DABb21E6211d952aFcc2742fd7F4737f88';
export const abi = [
  'error AlreadyInitialized()',
  'error NoChange()',
  'error NotNominated(address addr)',
  'error Unauthorized(address addr)',
  'error ZeroAddress()',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function acceptOwnership()',
  'function initializeOwnerModule(address initialOwner)',
  'function isOwnerModuleInitialized() view returns (bool)',
  'function nominateNewOwner(address newNominatedOwner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function renounceNomination()',
  'error ImplementationIsSterile(address implementation)',
  'error NotAContract(address contr)',
  'error UpgradeSimulationFailed()',
  'event Upgraded(address implementation)',
  'function getImplementation() view returns (address)',
  'function simulateUpgradeTo(address newImplementation)',
  'function upgradeTo(address newImplementation)',
  'error InvalidRole()',
  'error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)',
  'error OnlyTokenProxyAllowed(address origin)',
  'error PositionOutOfBounds()',
  'error RoleNotAuthorized(uint256 accountId, bytes32 role, address target)',
  'error ValueAlreadyInSet()',
  'error ValueNotInSet()',
  'event AccountCreated(address accountAddress)',
  'event RoleGranted(uint256 accountId, bytes32 role, address target, address executedBy)',
  'event RoleRevoked(uint256 accountId, bytes32 role, address target, address executedBy)',
  'function createAccount(uint256 accountId)',
  'function getAccountAddress() view returns (address)',
  'function getAccountPermissions(uint256 accountId) view returns (tuple(address target, bytes32[] roles)[])',
  'function grantRole(uint256 accountId, bytes32 role, address target)',
  'function hasRole(uint256 accountId, bytes32 role, address target) view returns (bool)',
  'function renounceRole(uint256 accountId, bytes32 role, address target)',
  'function revokeRole(uint256 accountId, bytes32 role, address target)',
  'function transferAccount(address to, uint256 accountId)',
  'event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)',
  'function getAssociatedSystem(bytes32 id) view returns (address proxy, bytes32 kind)',
  'function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)',
  'function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)',
  'function registerUnmanagedSystem(bytes32 id, address endpoint)',
  'error InsufficientAvailableCollateral(uint256 accountId, address collateralType, uint256 requestedAmount)',
  'error InvalidCollateralType(address collateralType)',
  'error InvalidPointsOrder()',
  'error OutOfBounds()',
  'error ValueOutOfRange()',
  'event CollateralAdjusted(address collateralType, address priceFeed, uint256 targetCRatio, uint256 minimumCRatio, bool enabled)',
  'event CollateralStaked(uint256 accountId, address collateralType, uint256 amount, address executedBy)',
  'event CollateralUnstaked(uint256 accountId, address collateralType, uint256 amount, address executedBy)',
  'function adjustCollateralType(address collateralType, address priceFeed, uint256 targetCRatio, uint256 minimumCRatio, bool enabled)',
  'function cleanExpiredLocks(uint256 accountId, address collateralType, uint256 offset, uint256 items)',
  'function getAccountCollateralTotals(uint256 accountId, address collateralType) view returns (uint256 totalStaked, uint256 totalAssigned, uint256 totalLocked, uint256 totalEscrowed)',
  'function getAccountCollaterals(uint256 accountId) view returns (address[] collateralTypes)',
  'function getAccountUnassignedCollateral(uint256 accountId, address collateralType) view returns (uint256)',
  'function getAccountUnstakebleCollateral(uint256 accountId, address collateralType) view returns (uint256)',
  'function getCollateralType(address collateralType) view returns (tuple(bool enabled, uint256 targetCRatio, uint256 minimumCRatio, address priceFeed, address tokenAddress))',
  'function getCollateralTypes(bool hideDisabled) view returns (tuple(bool enabled, uint256 targetCRatio, uint256 minimumCRatio, address priceFeed, address tokenAddress)[])',
  'function redeemReward(uint256 accountId, uint256 amount, uint256 duration)',
  'function stake(uint256 accountId, address collateralType, uint256 amount)',
  'function unstake(uint256 accountId, address collateralType, uint256 amount)',
  'error FundAlreadyApproved(uint256 fundId)',
  'error FundAlreadyExists(uint256 fundId)',
  'error FundNotFound(uint256 fundId)',
  'error InvalidParameters()',
  'event DelegationUpdated(bytes32 liquidityItemId, uint256 accountId, uint256 fundId, address collateralType, uint256 amount, uint256 leverage)',
  'event FundApprovedAdded(uint256 fundId)',
  'event FundApprovedRemoved(uint256 fundId)',
  'event FundCreated(address owner, uint256 fundId)',
  'event FundPositionSet(uint256 fundId, uint256[] markets, uint256[] weights, address executedBy)',
  'event NominatedNewOwner(address nominatedOwner, uint256 fundId)',
  'event OwnershipAccepted(address newOwner, uint256 fundId)',
  'event OwnershipRenounced(address target, uint256 fundId)',
  'event PositionAdded(bytes32 liquidityItemId, uint256 accountId, uint256 fundId, address collateralType, uint256 amount, uint256 leverage, uint256 shares, uint256 initialDebt)',
  'event PositionDecreased(bytes32 liquidityItemId, uint256 fundId, address collateralType, uint256 amount, uint256 leverage, uint256 shares, uint256 initialDebt)',
  'event PositionIncreased(bytes32 liquidityItemId, uint256 fundId, address collateralType, uint256 amount, uint256 leverage, uint256 shares, uint256 initialDebt)',
  'event PositionRemoved(bytes32 liquidityItemId, uint256 accountId, uint256 fundId, address collateralType)',
  'event PreferredFundSet(uint256 fundId)',
  'event RewardsClaimed(uint256 indexed fundId, address indexed token, uint256 indexed accountId, uint256 index, uint256 amountClaimed)',
  'event RewardsDistributionSet(uint256 indexed fundId, address indexed token, uint256 indexed index, address distributor, uint256 totalRewarded, uint256 start, uint256 duration)',
  'function addApprovedFund(uint256 fundId)',
  'function getApprovedFunds() view returns (uint256[])',
  'function getPreferredFund() view returns (uint256)',
  'function removeApprovedFund(uint256 fundId)',
  'function setPreferredFund(uint256 fundId)',
  'function acceptFundOwnership(uint256 fundId)',
  'function createFund(uint256 requestedFundId, address owner)',
  'function getFundName(uint256 fundId) view returns (string fundName)',
  'function getFundPosition(uint256 fundId) view returns (uint256[], uint256[], uint256[])',
  'function nominateNewFundOwner(address nominatedOwner, uint256 fundId)',
  'function nominatedOwnerOf(uint256 fundId) view returns (address)',
  'function ownerOf(uint256 fundId) view returns (address)',
  'function renounceFundNomination(uint256 fundId)',
  'function setFundName(uint256 fundId, string name)',
  'function setFundPosition(uint256 fundId, uint256[] markets, uint256[] weights, uint256[] maxDebtShareValues)',
  'function isLiquidatable(uint256 accountId, uint256 fundId, address collateralType) returns (bool)',
  'function liquidate(uint256 accountId, uint256 fundId, address collateralType)',
  'error MarketAlreadyRegistered(address market)',
  'error NotEnoughLiquidity(uint256 marketId, uint256 amount)',
  'event MarketRegistered(address market, uint256 marketId)',
  'function deposit(uint256 marketId, address target, uint256 amount)',
  'function fundBalance(uint256 marketId, uint256 fundId) view returns (int256)',
  'function liquidity(uint256 marketId) view returns (uint256)',
  'function registerMarket(address market) returns (uint256 marketId)',
  'function totalBalance(uint256 marketId) view returns (int256)',
  'function withdraw(uint256 marketId, address target, uint256 amount)',
  'function multicall(bytes[] data) payable returns (bytes[] results)',
  'function mintInitialSystemToken(address to, uint256 amount)',
  'error InvalidLeverage(uint256 leverage)',
  'function accountFundCollateralValue(uint256 accountId, uint256 fundId, address collateralType) view returns (uint256)',
  'function accountFundDebt(uint256 accountId, uint256 fundId, address collateralType) view returns (uint256)',
  'function burnUSD(uint256 accountId, uint256 fundId, address collateralType, uint256 amount)',
  'function claimRewards(uint256 fundId, address collateralType, uint256 accountId)',
  'function collateralizationRatio(uint256 accountId, uint256 fundId, address collateralType) view returns (uint256)',
  'function debtPerShare(uint256 fundId, address collateralType) view returns (uint256)',
  'function delegateCollateral(uint256 accountId, uint256 fundId, address collateralType, uint256 amount, uint256 leverage)',
  'function distributeRewards(uint256 fundId, address collateralType, uint256 index, address distributor, uint256 amount, uint256 start, uint256 duration)',
  'function fundDebt(uint256 fundId, address collateralType) view returns (uint256)',
  'function getAccountLiquidityItemIds(uint256 accountId) view returns (bytes32[] liquidityItemIds)',
  'function getAccountLiquidityItems(uint256 accountId) view returns (tuple(uint256 accountId, address collateralType, uint256 fundId, uint256 collateralAmount, uint256 shares, uint256 initialDebt, uint256 leverage)[] liquidityItems)',
  'function getAvailableRewards(uint256 fundId, address token, uint256 accountId) returns (uint256[])',
  'function getLiquidityItem(bytes32 liquidityItemId) view returns (tuple(uint256 accountId, address collateralType, uint256 fundId, uint256 collateralAmount, uint256 shares, uint256 initialDebt, uint256 leverage) liquidityItem)',
  'function mintUSD(uint256 accountId, uint256 fundId, address collateralType, uint256 amount)',
  'function totalDebtShares(uint256 fundId, address collateralType) view returns (uint256)',
];
