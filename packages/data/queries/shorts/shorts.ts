import { gql } from 'graphql-request';
import { ShortQueryParams } from '../../src/types';
import { createGQLWhereString, createGQLBlockNumberString } from '../../src/utils';

export const createShortsQuery = (params?: ShortQueryParams): string => {
	const whereString = createGQLWhereString(
		Object.entries({
			account: (params?.account ?? null) != null ? 'account' : null,
			id: (params?.id ?? null) != null ? 'id' : null,
			isOpen: (params?.isOpen ?? null) != null ? 'isOpen' : null,
			id_lt:
				(params?.autoGeneratedPaginationField ?? null) != null
					? 'autoGeneratedPaginationField'
					: null,
		})
	);

	return gql`
		query shorts($autoGeneratedPaginationField: Int, $max: Int, $id: String, $account: String, $isOpen: Boolean) {
      shorts(
        first: $max${createGQLBlockNumberString(params?.blockNumber ?? null)}
        where: ${whereString}
        orderBy: id
        orderDirection: desc
      ) {
        id
        account
        txHash
        collateralLocked
        collateralLockedAmount
        synthBorrowed
        synthBorrowedAmount
        createdAtBlock
        createdAt
        closedAt
        isOpen
        collateralChanges {
          id
          isDeposit
          amount
          collateralAfter
          timestamp
          blockNumber
        }
        liquidations {
          id
          liquidator
          liquidatedAmount
          liquidatedCollateral
          timestamp
          blockNumber
        }
        loanChanges {
          id
          isRepayment
          amount
          loanAfter
          timestamp
          blockNumber
        }
        accruedInterestLastUpdateTimestamp
			}
		}
	`;
};
