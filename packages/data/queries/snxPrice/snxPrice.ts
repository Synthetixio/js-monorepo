import { gql } from 'graphql-request';
import { SnxPriceParams } from '../../src/types';
import { createGQLWhereString, createGQLBlockNumberString } from '../../src/utils';

const TIMESERIES_QUERIES: Record<string, string> = {
	'1d': 'dailySNXPrices',
	'15m': 'fifteenMinuteSNXPrices',
};

export const createSnxPriceQuery = (params: SnxPriceParams): string => {
	const query = getSNXPricesQueryResponseAttr(params.timeSeries); // throw if undefined?
	const whereString = createGQLWhereString(
		Object.entries({
			id_lt:
				(params?.autoGeneratedPaginationField ?? null) != null
					? 'autoGeneratedPaginationField'
					: null,
		})
	);
	return gql`
	query ${query}($autoGeneratedPaginationField: Int, $max: Int, $timeSeries: String) {
		${query}(
			first: $max${createGQLBlockNumberString(params?.blockNumber ?? null)}
			where: ${whereString}
			orderBy: id
			orderDirection: desc
		) {
			id
			averagePrice
		}
	}`;
};

export function getSNXPricesQueryResponseAttr(timeSeries: string): string {
	return TIMESERIES_QUERIES[timeSeries];
}
