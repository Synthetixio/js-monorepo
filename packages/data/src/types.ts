import {
	Issued,
	RateUpdate,
	Synthetix,
	SynthExchange,
	Burned,
	FeesClaimed,
	DailySnxPrice,
	FifteenMinuteSnxPrice,
	DebtSnapshot,
	SnxHolder,
} from '../generated/graphql';

export type BaseQueryParams = {
	max?: number;
	autoGeneratedPaginationField?: number;
	blockNumber?: number;
};

export type SynthExchangeQueryParams = {
	maxBlock?: number;
	fromAddress?: string;
	minTimestamp?: number;
} & BaseQueryParams;

export type FeesClaimedParams = {
	account?: string;
} & BaseQueryParams;

export type IssuedQueryParams = {
	account?: string;
	minBlock?: number;
} & BaseQueryParams;

export type SnxPriceParams = {
	timeSeries: '1d' | '15m';
} & BaseQueryParams;

export type BurnedQueryParams = IssuedQueryParams;

export type DebtSnapshotParams = {
	minBlock?: number;
	maxBlock?: number;
	account?: string;
} & BaseQueryParams;

export type SnxHolderParams = {
	maxCollateral?: number;
	minCollateral?: number;
	address?: string;
	minMints?: number;
	minClaims?: number;
} & BaseQueryParams;

export type RateUpdateQueryParams = {
	synth?: string;
	minTimestamp?: number;
} & BaseQueryParams;

export type SynthetixData = {
	synthExchanges: (params?: SynthExchangeQueryParams) => Promise<SynthExchange[] | null>;
	synthetix: (params?: BaseQueryParams) => Promise<Synthetix | null>;
	issued: (params?: IssuedQueryParams) => Promise<Issued[] | null>;
	rateUpdates: (params?: RateUpdateQueryParams) => Promise<RateUpdate[] | null>;
	burned: (params?: BurnedQueryParams) => Promise<Burned[] | null>;
	feesClaimed: (params?: FeesClaimedParams) => Promise<FeesClaimed[] | null>;
	snxPrices: (params: SnxPriceParams) => Promise<DailySnxPrice[] | FifteenMinuteSnxPrice[] | null>;
	debtSnapshots: (params?: DebtSnapshotParams) => Promise<DebtSnapshot[] | null>;
	snxHolders: (params?: SnxHolderParams) => Promise<SnxHolder[] | null>;
};

export type SynthExchangeExpanded = SynthExchange & {
	hash: string;
};
