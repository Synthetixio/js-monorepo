// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'FeePoolState';
export const address = '0x0FA904962C4f5427590dD4517697C32363639303';
export const source = 'FeePoolState';
export const abi = [
  'constructor(address _owner, address _feePool)',
  'event IssuanceDebtRatioEntry(address indexed account, uint256 debtRatio, uint256 feePeriodCloseIndex)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function FEE_PERIOD_LENGTH() view returns (uint8)',
  'function acceptOwnership()',
  'function accountIssuanceLedger(address, uint256) view returns (uint256 debtPercentage, uint256 debtEntryIndex)',
  'function appendAccountIssuanceRecord(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 currentPeriodStartDebtIndex)',
  'function applicableIssuanceData(address account, uint256 closingDebtIndex) view returns (uint256, uint256)',
  'function feePool() view returns (address)',
  'function getAccountsDebtEntry(address account, uint256 index) view returns (uint256 debtPercentage, uint256 debtEntryIndex)',
  'function importIssuerData(address[] accounts, uint256[] ratios, uint256 periodToInsert, uint256 feePeriodCloseIndex)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function setFeePool(address _feePool)',
  'function setupExpiryTime() view returns (uint256)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface FeePoolStateInterface extends utils.Interface {
  functions: {
    'FEE_PERIOD_LENGTH()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'accountIssuanceLedger(address,uint256)': FunctionFragment;
    'appendAccountIssuanceRecord(address,uint256,uint256,uint256)': FunctionFragment;
    'applicableIssuanceData(address,uint256)': FunctionFragment;
    'feePool()': FunctionFragment;
    'getAccountsDebtEntry(address,uint256)': FunctionFragment;
    'importIssuerData(address[],uint256[],uint256,uint256)': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'setFeePool(address)': FunctionFragment;
    'setupExpiryTime()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE_PERIOD_LENGTH'
      | 'acceptOwnership'
      | 'accountIssuanceLedger'
      | 'appendAccountIssuanceRecord'
      | 'applicableIssuanceData'
      | 'feePool'
      | 'getAccountsDebtEntry'
      | 'importIssuerData'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'setFeePool'
      | 'setupExpiryTime'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE_PERIOD_LENGTH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accountIssuanceLedger',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'appendAccountIssuanceRecord',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'applicableIssuanceData',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'feePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAccountsDebtEntry',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'importIssuerData',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFeePool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setupExpiryTime', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'FEE_PERIOD_LENGTH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountIssuanceLedger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appendAccountIssuanceRecord', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'applicableIssuanceData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountsDebtEntry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'importIssuerData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupExpiryTime', data: BytesLike): Result;

  events: {
    'IssuanceDebtRatioEntry(address,uint256,uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'IssuanceDebtRatioEntry'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface IssuanceDebtRatioEntryEventObject {
  account: string;
  debtRatio: BigNumber;
  feePeriodCloseIndex: BigNumber;
}
export type IssuanceDebtRatioEntryEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IssuanceDebtRatioEntryEventObject
>;

export type IssuanceDebtRatioEntryEventFilter = TypedEventFilter<IssuanceDebtRatioEntryEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface FeePoolState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeePoolStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_PERIOD_LENGTH(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountIssuanceLedger(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

    appendAccountIssuanceRecord(
      account: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      debtEntryIndex: PromiseOrValue<BigNumberish>,
      currentPeriodStartDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applicableIssuanceData(
      account: PromiseOrValue<string>,
      closingDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    getAccountsDebtEntry(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

    importIssuerData(
      accounts: PromiseOrValue<string>[],
      ratios: PromiseOrValue<BigNumberish>[],
      periodToInsert: PromiseOrValue<BigNumberish>,
      feePeriodCloseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupExpiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  FEE_PERIOD_LENGTH(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountIssuanceLedger(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

  appendAccountIssuanceRecord(
    account: PromiseOrValue<string>,
    debtRatio: PromiseOrValue<BigNumberish>,
    debtEntryIndex: PromiseOrValue<BigNumberish>,
    currentPeriodStartDebtIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applicableIssuanceData(
    account: PromiseOrValue<string>,
    closingDebtIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  feePool(overrides?: CallOverrides): Promise<string>;

  getAccountsDebtEntry(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

  importIssuerData(
    accounts: PromiseOrValue<string>[],
    ratios: PromiseOrValue<BigNumberish>[],
    periodToInsert: PromiseOrValue<BigNumberish>,
    feePeriodCloseIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFeePool(
    _feePool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE_PERIOD_LENGTH(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accountIssuanceLedger(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

    appendAccountIssuanceRecord(
      account: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      debtEntryIndex: PromiseOrValue<BigNumberish>,
      currentPeriodStartDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    applicableIssuanceData(
      account: PromiseOrValue<string>,
      closingDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    feePool(overrides?: CallOverrides): Promise<string>;

    getAccountsDebtEntry(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { debtPercentage: BigNumber; debtEntryIndex: BigNumber }>;

    importIssuerData(
      accounts: PromiseOrValue<string>[],
      ratios: PromiseOrValue<BigNumberish>[],
      periodToInsert: PromiseOrValue<BigNumberish>,
      feePeriodCloseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFeePool(_feePool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'IssuanceDebtRatioEntry(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      debtRatio?: null,
      feePeriodCloseIndex?: null
    ): IssuanceDebtRatioEntryEventFilter;
    IssuanceDebtRatioEntry(
      account?: PromiseOrValue<string> | null,
      debtRatio?: null,
      feePeriodCloseIndex?: null
    ): IssuanceDebtRatioEntryEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    FEE_PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    accountIssuanceLedger(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appendAccountIssuanceRecord(
      account: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      debtEntryIndex: PromiseOrValue<BigNumberish>,
      currentPeriodStartDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applicableIssuanceData(
      account: PromiseOrValue<string>,
      closingDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountsDebtEntry(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    importIssuerData(
      accounts: PromiseOrValue<string>[],
      ratios: PromiseOrValue<BigNumberish>[],
      periodToInsert: PromiseOrValue<BigNumberish>,
      feePeriodCloseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_PERIOD_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountIssuanceLedger(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendAccountIssuanceRecord(
      account: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      debtEntryIndex: PromiseOrValue<BigNumberish>,
      currentPeriodStartDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applicableIssuanceData(
      account: PromiseOrValue<string>,
      closingDebtIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountsDebtEntry(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importIssuerData(
      accounts: PromiseOrValue<string>[],
      ratios: PromiseOrValue<BigNumberish>[],
      periodToInsert: PromiseOrValue<BigNumberish>,
      feePeriodCloseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupExpiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
