// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'PerpsV2ExchangeRate';
export const address = '0x2C15259D4886e2C0946f9aB7a5E389c86b3c3b04';
export const source = 'PerpsV2ExchangeRate';
export const abi = [
  'constructor(address _owner, address _resolver)',
  'event AssociatedContractAdded(address associatedContract)',
  'event AssociatedContractRemoved(address associatedContract)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event OffchainOracleUpdated(address offchainOracle)',
  'event OffchainPriceFeedIdUpdated(bytes32 assetId, bytes32 priceFeedId)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function CONTRACT_NAME() view returns (bytes32)',
  'function acceptOwnership()',
  'function addAssociatedContracts(address[] associatedContracts)',
  'function associatedContracts() view returns (address[])',
  'function isResolverCached() view returns (bool)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function offchainOracle() view returns (address)',
  'function offchainPriceFeedId(bytes32 assetId) view returns (bytes32)',
  'function owner() view returns (address)',
  'function rebuildCache()',
  'function removeAssociatedContracts(address[] associatedContracts)',
  'function resolveAndGetLatestPrice(bytes32 assetId) view returns (uint256 price, uint256 publishTime)',
  'function resolveAndGetPrice(bytes32 assetId, uint256 maxAge) view returns (uint256 price, uint256 publishTime)',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function setOffchainOracle(address offchainOracle)',
  'function setOffchainPriceFeedId(bytes32 assetId, bytes32 priceFeedId)',
  'function updatePythPrice(address sender, bytes[] priceUpdateData) payable',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface PerpsV2ExchangeRateInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'addAssociatedContracts(address[])': FunctionFragment;
    'associatedContracts()': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'offchainOracle()': FunctionFragment;
    'offchainPriceFeedId(bytes32)': FunctionFragment;
    'owner()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'removeAssociatedContracts(address[])': FunctionFragment;
    'resolveAndGetLatestPrice(bytes32)': FunctionFragment;
    'resolveAndGetPrice(bytes32,uint256)': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'setOffchainOracle(address)': FunctionFragment;
    'setOffchainPriceFeedId(bytes32,bytes32)': FunctionFragment;
    'updatePythPrice(address,bytes[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'acceptOwnership'
      | 'addAssociatedContracts'
      | 'associatedContracts'
      | 'isResolverCached'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'offchainOracle'
      | 'offchainPriceFeedId'
      | 'owner'
      | 'rebuildCache'
      | 'removeAssociatedContracts'
      | 'resolveAndGetLatestPrice'
      | 'resolveAndGetPrice'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'setOffchainOracle'
      | 'setOffchainPriceFeedId'
      | 'updatePythPrice'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addAssociatedContracts',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'associatedContracts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'offchainOracle', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'offchainPriceFeedId',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeAssociatedContracts',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'resolveAndGetLatestPrice',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'resolveAndGetPrice',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setOffchainOracle',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setOffchainPriceFeedId',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePythPrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAssociatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'associatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'offchainOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'offchainPriceFeedId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAssociatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAndGetLatestPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveAndGetPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOffchainOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOffchainPriceFeedId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePythPrice', data: BytesLike): Result;

  events: {
    'AssociatedContractAdded(address)': EventFragment;
    'AssociatedContractRemoved(address)': EventFragment;
    'CacheUpdated(bytes32,address)': EventFragment;
    'OffchainOracleUpdated(address)': EventFragment;
    'OffchainPriceFeedIdUpdated(bytes32,bytes32)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssociatedContractAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssociatedContractRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OffchainOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OffchainPriceFeedIdUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface AssociatedContractAddedEventObject {
  associatedContract: string;
}
export type AssociatedContractAddedEvent = TypedEvent<[string], AssociatedContractAddedEventObject>;

export type AssociatedContractAddedEventFilter = TypedEventFilter<AssociatedContractAddedEvent>;

export interface AssociatedContractRemovedEventObject {
  associatedContract: string;
}
export type AssociatedContractRemovedEvent = TypedEvent<
  [string],
  AssociatedContractRemovedEventObject
>;

export type AssociatedContractRemovedEventFilter = TypedEventFilter<AssociatedContractRemovedEvent>;

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface OffchainOracleUpdatedEventObject {
  offchainOracle: string;
}
export type OffchainOracleUpdatedEvent = TypedEvent<[string], OffchainOracleUpdatedEventObject>;

export type OffchainOracleUpdatedEventFilter = TypedEventFilter<OffchainOracleUpdatedEvent>;

export interface OffchainPriceFeedIdUpdatedEventObject {
  assetId: string;
  priceFeedId: string;
}
export type OffchainPriceFeedIdUpdatedEvent = TypedEvent<
  [string, string],
  OffchainPriceFeedIdUpdatedEventObject
>;

export type OffchainPriceFeedIdUpdatedEventFilter =
  TypedEventFilter<OffchainPriceFeedIdUpdatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PerpsV2ExchangeRate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpsV2ExchangeRateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    associatedContracts(overrides?: CallOverrides): Promise<[string[]]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    offchainOracle(overrides?: CallOverrides): Promise<[string]>;

    offchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveAndGetLatestPrice(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

    resolveAndGetPrice(
      assetId: PromiseOrValue<BytesLike>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    setOffchainOracle(
      offchainOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOffchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      priceFeedId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePythPrice(
      sender: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAssociatedContracts(
    associatedContracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  associatedContracts(overrides?: CallOverrides): Promise<string[]>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  offchainOracle(overrides?: CallOverrides): Promise<string>;

  offchainPriceFeedId(
    assetId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAssociatedContracts(
    associatedContracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveAndGetLatestPrice(
    assetId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

  resolveAndGetPrice(
    assetId: PromiseOrValue<BytesLike>,
    maxAge: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  setOffchainOracle(
    offchainOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOffchainPriceFeedId(
    assetId: PromiseOrValue<BytesLike>,
    priceFeedId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePythPrice(
    sender: PromiseOrValue<string>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    associatedContracts(overrides?: CallOverrides): Promise<string[]>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    offchainOracle(overrides?: CallOverrides): Promise<string>;

    offchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resolveAndGetLatestPrice(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

    resolveAndGetPrice(
      assetId: PromiseOrValue<BytesLike>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; publishTime: BigNumber }>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    setOffchainOracle(
      offchainOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOffchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      priceFeedId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePythPrice(
      sender: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AssociatedContractAdded(address)'(
      associatedContract?: null
    ): AssociatedContractAddedEventFilter;
    AssociatedContractAdded(associatedContract?: null): AssociatedContractAddedEventFilter;

    'AssociatedContractRemoved(address)'(
      associatedContract?: null
    ): AssociatedContractRemovedEventFilter;
    AssociatedContractRemoved(associatedContract?: null): AssociatedContractRemovedEventFilter;

    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'OffchainOracleUpdated(address)'(offchainOracle?: null): OffchainOracleUpdatedEventFilter;
    OffchainOracleUpdated(offchainOracle?: null): OffchainOracleUpdatedEventFilter;

    'OffchainPriceFeedIdUpdated(bytes32,bytes32)'(
      assetId?: null,
      priceFeedId?: null
    ): OffchainPriceFeedIdUpdatedEventFilter;
    OffchainPriceFeedIdUpdated(
      assetId?: null,
      priceFeedId?: null
    ): OffchainPriceFeedIdUpdatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    associatedContracts(overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    offchainOracle(overrides?: CallOverrides): Promise<BigNumber>;

    offchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveAndGetLatestPrice(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveAndGetPrice(
      assetId: PromiseOrValue<BytesLike>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    setOffchainOracle(
      offchainOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOffchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      priceFeedId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePythPrice(
      sender: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    associatedContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offchainOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveAndGetLatestPrice(
      assetId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAndGetPrice(
      assetId: PromiseOrValue<BytesLike>,
      maxAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOffchainOracle(
      offchainOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOffchainPriceFeedId(
      assetId: PromiseOrValue<BytesLike>,
      priceFeedId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePythPrice(
      sender: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
