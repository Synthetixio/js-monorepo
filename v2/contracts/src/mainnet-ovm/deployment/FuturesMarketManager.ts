// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'FuturesMarketManager';
export const address = '0xd30bdFd7e7a65fE109D5dE1D4e95F3B800FB7463';
export const source = 'FuturesMarketManager';
export const abi = [
  'constructor(address _owner, address _resolver)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event EndorsedAddressAdded(address endorsedAddress)',
  'event EndorsedAddressRemoved(address endorsedAddress)',
  'event MarketAdded(address market, bytes32 indexed asset, bytes32 indexed marketKey)',
  'event MarketRemoved(address market, bytes32 indexed asset, bytes32 indexed marketKey)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function CONTRACT_NAME() view returns (bytes32)',
  'function acceptOwnership()',
  'function addEndorsedAddresses(address[] addresses)',
  'function addMarkets(address[] marketsToAdd)',
  'function addProxiedMarkets(address[] marketsToAdd)',
  'function allEndorsedAddresses() view returns (address[])',
  'function allMarketSummaries() view returns (tuple(address market, bytes32 asset, bytes32 marketKey, uint256 price, uint256 marketSize, int256 marketSkew, uint256 marketDebt, int256 currentFundingRate, int256 currentFundingVelocity, bool priceInvalid, bool proxied)[])',
  'function allMarkets() view returns (address[])',
  'function allMarkets(bool proxiedMarkets) view returns (address[])',
  'function burnSUSD(address account, uint256 amount) returns (uint256 postReclamationAmount)',
  'function isEndorsed(address account) view returns (bool)',
  'function isResolverCached() view returns (bool)',
  'function issueSUSD(address account, uint256 amount)',
  'function marketForKey(bytes32) view returns (address)',
  'function marketSummaries(address[] addresses) view returns (tuple(address market, bytes32 asset, bytes32 marketKey, uint256 price, uint256 marketSize, int256 marketSkew, uint256 marketDebt, int256 currentFundingRate, int256 currentFundingVelocity, bool priceInvalid, bool proxied)[])',
  'function marketSummariesForKeys(bytes32[] marketKeys) view returns (tuple(address market, bytes32 asset, bytes32 marketKey, uint256 price, uint256 marketSize, int256 marketSkew, uint256 marketDebt, int256 currentFundingRate, int256 currentFundingVelocity, bool priceInvalid, bool proxied)[])',
  'function markets(uint256 index, uint256 pageSize, bool proxiedMarkets) view returns (address[])',
  'function markets(uint256 index, uint256 pageSize) view returns (address[])',
  'function marketsForKeys(bytes32[] marketKeys) view returns (address[])',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function numMarkets() view returns (uint256)',
  'function numMarkets(bool proxiedMarkets) view returns (uint256)',
  'function owner() view returns (address)',
  'function payFee(uint256 amount, bytes32 trackingCode)',
  'function payFee(uint256 amount)',
  'function rebuildCache()',
  'function removeEndorsedAddresses(address[] addresses)',
  'function removeMarkets(address[] marketsToRemove)',
  'function removeMarketsByKey(bytes32[] marketKeysToRemove)',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function totalDebt() view returns (uint256 debt, bool isInvalid)',
  'function updateMarketsImplementations(address[] marketsToUpdate)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace FuturesMarketManager {
  export type MarketSummaryStruct = {
    market: PromiseOrValue<string>;
    asset: PromiseOrValue<BytesLike>;
    marketKey: PromiseOrValue<BytesLike>;
    price: PromiseOrValue<BigNumberish>;
    marketSize: PromiseOrValue<BigNumberish>;
    marketSkew: PromiseOrValue<BigNumberish>;
    marketDebt: PromiseOrValue<BigNumberish>;
    currentFundingRate: PromiseOrValue<BigNumberish>;
    currentFundingVelocity: PromiseOrValue<BigNumberish>;
    priceInvalid: PromiseOrValue<boolean>;
    proxied: PromiseOrValue<boolean>;
  };

  export type MarketSummaryStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    market: string;
    asset: string;
    marketKey: string;
    price: BigNumber;
    marketSize: BigNumber;
    marketSkew: BigNumber;
    marketDebt: BigNumber;
    currentFundingRate: BigNumber;
    currentFundingVelocity: BigNumber;
    priceInvalid: boolean;
    proxied: boolean;
  };
}

export interface FuturesMarketManagerInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'addEndorsedAddresses(address[])': FunctionFragment;
    'addMarkets(address[])': FunctionFragment;
    'addProxiedMarkets(address[])': FunctionFragment;
    'allEndorsedAddresses()': FunctionFragment;
    'allMarketSummaries()': FunctionFragment;
    'allMarkets()': FunctionFragment;
    'allMarkets(bool)': FunctionFragment;
    'burnSUSD(address,uint256)': FunctionFragment;
    'isEndorsed(address)': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'issueSUSD(address,uint256)': FunctionFragment;
    'marketForKey(bytes32)': FunctionFragment;
    'marketSummaries(address[])': FunctionFragment;
    'marketSummariesForKeys(bytes32[])': FunctionFragment;
    'markets(uint256,uint256,bool)': FunctionFragment;
    'markets(uint256,uint256)': FunctionFragment;
    'marketsForKeys(bytes32[])': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'numMarkets()': FunctionFragment;
    'numMarkets(bool)': FunctionFragment;
    'owner()': FunctionFragment;
    'payFee(uint256,bytes32)': FunctionFragment;
    'payFee(uint256)': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'removeEndorsedAddresses(address[])': FunctionFragment;
    'removeMarkets(address[])': FunctionFragment;
    'removeMarketsByKey(bytes32[])': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'updateMarketsImplementations(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'acceptOwnership'
      | 'addEndorsedAddresses'
      | 'addMarkets'
      | 'addProxiedMarkets'
      | 'allEndorsedAddresses'
      | 'allMarketSummaries'
      | 'allMarkets()'
      | 'allMarkets(bool)'
      | 'burnSUSD'
      | 'isEndorsed'
      | 'isResolverCached'
      | 'issueSUSD'
      | 'marketForKey'
      | 'marketSummaries'
      | 'marketSummariesForKeys'
      | 'markets(uint256,uint256,bool)'
      | 'markets(uint256,uint256)'
      | 'marketsForKeys'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'numMarkets()'
      | 'numMarkets(bool)'
      | 'owner'
      | 'payFee(uint256,bytes32)'
      | 'payFee(uint256)'
      | 'rebuildCache'
      | 'removeEndorsedAddresses'
      | 'removeMarkets'
      | 'removeMarketsByKey'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'totalDebt'
      | 'updateMarketsImplementations'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addEndorsedAddresses',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'addMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'addProxiedMarkets',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'allEndorsedAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarketSummaries', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarkets()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'allMarkets(bool)',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'burnSUSD',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'isEndorsed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'issueSUSD',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'marketForKey', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'marketSummaries',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketSummariesForKeys',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'markets(uint256,uint256,bool)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'markets(uint256,uint256)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketsForKeys',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numMarkets()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'numMarkets(bool)',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payFee(uint256,bytes32)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'payFee(uint256)',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeEndorsedAddresses',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'removeMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'removeMarketsByKey',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateMarketsImplementations',
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addEndorsedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addProxiedMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allEndorsedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarketSummaries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets(bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnSUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEndorsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issueSUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketForKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSummaries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSummariesForKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets(uint256,uint256,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets(uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketsForKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMarkets()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMarkets(bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payFee(uint256,bytes32)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payFee(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeEndorsedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMarketsByKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMarketsImplementations', data: BytesLike): Result;

  events: {
    'CacheUpdated(bytes32,address)': EventFragment;
    'EndorsedAddressAdded(address)': EventFragment;
    'EndorsedAddressRemoved(address)': EventFragment;
    'MarketAdded(address,bytes32,bytes32)': EventFragment;
    'MarketRemoved(address,bytes32,bytes32)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndorsedAddressAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndorsedAddressRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface EndorsedAddressAddedEventObject {
  endorsedAddress: string;
}
export type EndorsedAddressAddedEvent = TypedEvent<[string], EndorsedAddressAddedEventObject>;

export type EndorsedAddressAddedEventFilter = TypedEventFilter<EndorsedAddressAddedEvent>;

export interface EndorsedAddressRemovedEventObject {
  endorsedAddress: string;
}
export type EndorsedAddressRemovedEvent = TypedEvent<[string], EndorsedAddressRemovedEventObject>;

export type EndorsedAddressRemovedEventFilter = TypedEventFilter<EndorsedAddressRemovedEvent>;

export interface MarketAddedEventObject {
  market: string;
  asset: string;
  marketKey: string;
}
export type MarketAddedEvent = TypedEvent<[string, string, string], MarketAddedEventObject>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export interface MarketRemovedEventObject {
  market: string;
  asset: string;
  marketKey: string;
}
export type MarketRemovedEvent = TypedEvent<[string, string, string], MarketRemovedEventObject>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface FuturesMarketManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FuturesMarketManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProxiedMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allEndorsedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    allMarketSummaries(
      overrides?: CallOverrides
    ): Promise<[FuturesMarketManager.MarketSummaryStructOutput[]]>;

    'allMarkets()'(overrides?: CallOverrides): Promise<[string[]]>;

    'allMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    burnSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEndorsed(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    issueSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketForKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    marketSummaries(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[FuturesMarketManager.MarketSummaryStructOutput[]]>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[FuturesMarketManager.MarketSummaryStructOutput[]]>;

    'markets(uint256,uint256,bool)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    'markets(uint256,uint256)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    'numMarkets()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'numMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'payFee(uint256,bytes32)'(
      amount: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'payFee(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMarkets(
      marketsToRemove: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMarketsByKey(
      marketKeysToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

    updateMarketsImplementations(
      marketsToUpdate: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addEndorsedAddresses(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMarkets(
    marketsToAdd: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProxiedMarkets(
    marketsToAdd: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allEndorsedAddresses(overrides?: CallOverrides): Promise<string[]>;

  allMarketSummaries(
    overrides?: CallOverrides
  ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

  'allMarkets()'(overrides?: CallOverrides): Promise<string[]>;

  'allMarkets(bool)'(
    proxiedMarkets: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  burnSUSD(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEndorsed(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  issueSUSD(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketForKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  marketSummaries(
    addresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

  marketSummariesForKeys(
    marketKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

  'markets(uint256,uint256,bool)'(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    proxiedMarkets: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  'markets(uint256,uint256)'(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  marketsForKeys(
    marketKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  'numMarkets()'(overrides?: CallOverrides): Promise<BigNumber>;

  'numMarkets(bool)'(
    proxiedMarkets: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'payFee(uint256,bytes32)'(
    amount: PromiseOrValue<BigNumberish>,
    trackingCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'payFee(uint256)'(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeEndorsedAddresses(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMarkets(
    marketsToRemove: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMarketsByKey(
    marketKeysToRemove: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  totalDebt(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

  updateMarketsImplementations(
    marketsToUpdate: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMarkets(marketsToAdd: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    addProxiedMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allEndorsedAddresses(overrides?: CallOverrides): Promise<string[]>;

    allMarketSummaries(
      overrides?: CallOverrides
    ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

    'allMarkets()'(overrides?: CallOverrides): Promise<string[]>;

    'allMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    burnSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEndorsed(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    issueSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketForKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    marketSummaries(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<FuturesMarketManager.MarketSummaryStructOutput[]>;

    'markets(uint256,uint256,bool)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    'markets(uint256,uint256)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    'numMarkets()'(overrides?: CallOverrides): Promise<BigNumber>;

    'numMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'payFee(uint256,bytes32)'(
      amount: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    'payFee(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    removeEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarkets(
      marketsToRemove: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarketsByKey(
      marketKeysToRemove: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

    updateMarketsImplementations(
      marketsToUpdate: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'EndorsedAddressAdded(address)'(endorsedAddress?: null): EndorsedAddressAddedEventFilter;
    EndorsedAddressAdded(endorsedAddress?: null): EndorsedAddressAddedEventFilter;

    'EndorsedAddressRemoved(address)'(endorsedAddress?: null): EndorsedAddressRemovedEventFilter;
    EndorsedAddressRemoved(endorsedAddress?: null): EndorsedAddressRemovedEventFilter;

    'MarketAdded(address,bytes32,bytes32)'(
      market?: null,
      asset?: PromiseOrValue<BytesLike> | null,
      marketKey?: PromiseOrValue<BytesLike> | null
    ): MarketAddedEventFilter;
    MarketAdded(
      market?: null,
      asset?: PromiseOrValue<BytesLike> | null,
      marketKey?: PromiseOrValue<BytesLike> | null
    ): MarketAddedEventFilter;

    'MarketRemoved(address,bytes32,bytes32)'(
      market?: null,
      asset?: PromiseOrValue<BytesLike> | null,
      marketKey?: PromiseOrValue<BytesLike> | null
    ): MarketRemovedEventFilter;
    MarketRemoved(
      market?: null,
      asset?: PromiseOrValue<BytesLike> | null,
      marketKey?: PromiseOrValue<BytesLike> | null
    ): MarketRemovedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProxiedMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allEndorsedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    allMarketSummaries(overrides?: CallOverrides): Promise<BigNumber>;

    'allMarkets()'(overrides?: CallOverrides): Promise<BigNumber>;

    'allMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEndorsed(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    issueSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketForKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    marketSummaries(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'markets(uint256,uint256,bool)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'markets(uint256,uint256)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    'numMarkets()'(overrides?: CallOverrides): Promise<BigNumber>;

    'numMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'payFee(uint256,bytes32)'(
      amount: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'payFee(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    removeEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMarkets(
      marketsToRemove: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMarketsByKey(
      marketKeysToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    updateMarketsImplementations(
      marketsToUpdate: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProxiedMarkets(
      marketsToAdd: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allEndorsedAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarketSummaries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'allMarkets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'allMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEndorsed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueSUSD(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketForKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketSummaries(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'markets(uint256,uint256,bool)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'markets(uint256,uint256)'(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'numMarkets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'numMarkets(bool)'(
      proxiedMarkets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'payFee(uint256,bytes32)'(
      amount: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'payFee(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeEndorsedAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMarkets(
      marketsToRemove: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketsByKey(
      marketKeysToRemove: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMarketsImplementations(
      marketsToUpdate: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
