// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'PerpsV2MarketStateFLOWPERP';
export const address = '0xECc8A6Af92d825ACC5B871993FC83d86CCEd5a19';
export const source = 'PerpsV2MarketState';
export const abi = [
  'constructor(address _owner, address[] _associatedContracts, bytes32 _baseAsset, bytes32 _marketKey, address _legacyState)',
  'event AssociatedContractAdded(address associatedContract)',
  'event AssociatedContractRemoved(address associatedContract)',
  'event MarketStateInitialized(bytes32 indexed marketKey, bool legacyContractExists, address legacyState, uint256 legacyFundinSequenceOffset)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function acceptOwnership()',
  'function addAssociatedContracts(address[] associatedContracts)',
  'function associatedContracts() view returns (address[])',
  'function baseAsset() view returns (bytes32)',
  'function delayedOrders(address account) view returns (tuple(bool isOffchain, int128 sizeDelta, uint128 desiredFillPrice, uint128 targetRoundId, uint128 commitDeposit, uint128 keeperDeposit, uint256 executableAtTime, uint256 intentionTime, bytes32 trackingCode))',
  'function deleteDelayedOrder(address account)',
  'function deletePosition(address account)',
  'function entryDebtCorrection() view returns (int128)',
  'function flag(address account, address flagger)',
  'function fundingLastRecomputed() view returns (uint32)',
  'function fundingRateLastRecomputed() view returns (int128)',
  'function fundingSequence(uint256 index) view returns (int128)',
  'function fundingSequenceLength() view returns (uint256)',
  'function getDelayedOrderAddressesLength() view returns (uint256)',
  'function getDelayedOrderAddressesPage(uint256 index, uint256 pageSize) view returns (address[])',
  'function getFlaggedAddressesLength() view returns (uint256)',
  'function getFlaggedAddressesPage(uint256 index, uint256 pageSize) view returns (address[])',
  'function getPositionAddressesLength() view returns (uint256)',
  'function getPositionAddressesPage(uint256 index, uint256 pageSize) view returns (address[])',
  'function initialized() view returns (bool)',
  'function isFlagged(address account) view returns (bool)',
  'function legacyFundinSequenceOffset() view returns (uint256)',
  'function legacyState() view returns (address)',
  'function linkOrInitializeState()',
  'function marketKey() view returns (bytes32)',
  'function marketSize() view returns (uint128)',
  'function marketSkew() view returns (int128)',
  'function nextPositionId() view returns (uint64)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function positionFlagger(address) view returns (address)',
  'function positions(address account) view returns (tuple(uint64 id, uint64 lastFundingIndex, uint128 margin, uint128 lastPrice, int128 size))',
  'function pushFundingSequence(int128 fundingSequence)',
  'function removeAssociatedContracts(address[] associatedContracts)',
  'function setBaseAsset(bytes32 _baseAsset)',
  'function setEntryDebtCorrection(int128 entryDebtCorrection)',
  'function setFundingLastRecomputed(uint32 lastRecomputed)',
  'function setFundingRateLastRecomputed(int128 _fundingRateLastRecomputed)',
  'function setMarketKey(bytes32 _marketKey)',
  'function setMarketSize(uint128 _marketSize)',
  'function setMarketSkew(int128 _marketSkew)',
  'function setNextPositionId(uint64 nextPositionId)',
  'function unflag(address account)',
  'function updateDelayedOrder(address account, bool isOffchain, int128 sizeDelta, uint128 desiredFillPrice, uint128 targetRoundId, uint128 commitDeposit, uint128 keeperDeposit, uint256 executableAtTime, uint256 intentionTime, bytes32 trackingCode)',
  'function updatePosition(address account, uint64 id, uint64 lastFundingIndex, uint128 margin, uint128 lastPrice, int128 size)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace IPerpsV2MarketBaseTypes {
  export type DelayedOrderStruct = {
    isOffchain: PromiseOrValue<boolean>;
    sizeDelta: PromiseOrValue<BigNumberish>;
    desiredFillPrice: PromiseOrValue<BigNumberish>;
    targetRoundId: PromiseOrValue<BigNumberish>;
    commitDeposit: PromiseOrValue<BigNumberish>;
    keeperDeposit: PromiseOrValue<BigNumberish>;
    executableAtTime: PromiseOrValue<BigNumberish>;
    intentionTime: PromiseOrValue<BigNumberish>;
    trackingCode: PromiseOrValue<BytesLike>;
  };

  export type DelayedOrderStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    isOffchain: boolean;
    sizeDelta: BigNumber;
    desiredFillPrice: BigNumber;
    targetRoundId: BigNumber;
    commitDeposit: BigNumber;
    keeperDeposit: BigNumber;
    executableAtTime: BigNumber;
    intentionTime: BigNumber;
    trackingCode: string;
  };

  export type PositionStruct = {
    id: PromiseOrValue<BigNumberish>;
    lastFundingIndex: PromiseOrValue<BigNumberish>;
    margin: PromiseOrValue<BigNumberish>;
    lastPrice: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    lastFundingIndex: BigNumber;
    margin: BigNumber;
    lastPrice: BigNumber;
    size: BigNumber;
  };
}

export interface PerpsV2MarketStateFLOWPERPInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'addAssociatedContracts(address[])': FunctionFragment;
    'associatedContracts()': FunctionFragment;
    'baseAsset()': FunctionFragment;
    'delayedOrders(address)': FunctionFragment;
    'deleteDelayedOrder(address)': FunctionFragment;
    'deletePosition(address)': FunctionFragment;
    'entryDebtCorrection()': FunctionFragment;
    'flag(address,address)': FunctionFragment;
    'fundingLastRecomputed()': FunctionFragment;
    'fundingRateLastRecomputed()': FunctionFragment;
    'fundingSequence(uint256)': FunctionFragment;
    'fundingSequenceLength()': FunctionFragment;
    'getDelayedOrderAddressesLength()': FunctionFragment;
    'getDelayedOrderAddressesPage(uint256,uint256)': FunctionFragment;
    'getFlaggedAddressesLength()': FunctionFragment;
    'getFlaggedAddressesPage(uint256,uint256)': FunctionFragment;
    'getPositionAddressesLength()': FunctionFragment;
    'getPositionAddressesPage(uint256,uint256)': FunctionFragment;
    'initialized()': FunctionFragment;
    'isFlagged(address)': FunctionFragment;
    'legacyFundinSequenceOffset()': FunctionFragment;
    'legacyState()': FunctionFragment;
    'linkOrInitializeState()': FunctionFragment;
    'marketKey()': FunctionFragment;
    'marketSize()': FunctionFragment;
    'marketSkew()': FunctionFragment;
    'nextPositionId()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'positionFlagger(address)': FunctionFragment;
    'positions(address)': FunctionFragment;
    'pushFundingSequence(int128)': FunctionFragment;
    'removeAssociatedContracts(address[])': FunctionFragment;
    'setBaseAsset(bytes32)': FunctionFragment;
    'setEntryDebtCorrection(int128)': FunctionFragment;
    'setFundingLastRecomputed(uint32)': FunctionFragment;
    'setFundingRateLastRecomputed(int128)': FunctionFragment;
    'setMarketKey(bytes32)': FunctionFragment;
    'setMarketSize(uint128)': FunctionFragment;
    'setMarketSkew(int128)': FunctionFragment;
    'setNextPositionId(uint64)': FunctionFragment;
    'unflag(address)': FunctionFragment;
    'updateDelayedOrder(address,bool,int128,uint128,uint128,uint128,uint128,uint256,uint256,bytes32)': FunctionFragment;
    'updatePosition(address,uint64,uint64,uint128,uint128,int128)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'addAssociatedContracts'
      | 'associatedContracts'
      | 'baseAsset'
      | 'delayedOrders'
      | 'deleteDelayedOrder'
      | 'deletePosition'
      | 'entryDebtCorrection'
      | 'flag'
      | 'fundingLastRecomputed'
      | 'fundingRateLastRecomputed'
      | 'fundingSequence'
      | 'fundingSequenceLength'
      | 'getDelayedOrderAddressesLength'
      | 'getDelayedOrderAddressesPage'
      | 'getFlaggedAddressesLength'
      | 'getFlaggedAddressesPage'
      | 'getPositionAddressesLength'
      | 'getPositionAddressesPage'
      | 'initialized'
      | 'isFlagged'
      | 'legacyFundinSequenceOffset'
      | 'legacyState'
      | 'linkOrInitializeState'
      | 'marketKey'
      | 'marketSize'
      | 'marketSkew'
      | 'nextPositionId'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'positionFlagger'
      | 'positions'
      | 'pushFundingSequence'
      | 'removeAssociatedContracts'
      | 'setBaseAsset'
      | 'setEntryDebtCorrection'
      | 'setFundingLastRecomputed'
      | 'setFundingRateLastRecomputed'
      | 'setMarketKey'
      | 'setMarketSize'
      | 'setMarketSkew'
      | 'setNextPositionId'
      | 'unflag'
      | 'updateDelayedOrder'
      | 'updatePosition'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addAssociatedContracts',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'associatedContracts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delayedOrders', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'deleteDelayedOrder',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'deletePosition', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'entryDebtCorrection', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flag',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'fundingLastRecomputed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundingRateLastRecomputed', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fundingSequence',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'fundingSequenceLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getDelayedOrderAddressesLength',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getDelayedOrderAddressesPage',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getFlaggedAddressesLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getFlaggedAddressesPage',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getPositionAddressesLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPositionAddressesPage',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'initialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isFlagged', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'legacyFundinSequenceOffset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'legacyState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'linkOrInitializeState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketKey', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketSize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketSkew', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextPositionId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'positionFlagger', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'positions', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'pushFundingSequence',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAssociatedContracts',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'setBaseAsset', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'setEntryDebtCorrection',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFundingLastRecomputed',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFundingRateLastRecomputed',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setMarketKey', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'setMarketSize',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMarketSkew',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setNextPositionId',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'unflag', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateDelayedOrder',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAssociatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'associatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delayedOrders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteDelayedOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deletePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entryDebtCorrection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingLastRecomputed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingRateLastRecomputed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingSequence', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingSequenceLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelayedOrderAddressesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelayedOrderAddressesPage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFlaggedAddressesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFlaggedAddressesPage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionAddressesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionAddressesPage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isFlagged', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'legacyFundinSequenceOffset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'legacyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'linkOrInitializeState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSkew', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextPositionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionFlagger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pushFundingSequence', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAssociatedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEntryDebtCorrection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFundingLastRecomputed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFundingRateLastRecomputed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketSkew', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNextPositionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unflag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDelayedOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePosition', data: BytesLike): Result;

  events: {
    'AssociatedContractAdded(address)': EventFragment;
    'AssociatedContractRemoved(address)': EventFragment;
    'MarketStateInitialized(bytes32,bool,address,uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssociatedContractAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssociatedContractRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketStateInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface AssociatedContractAddedEventObject {
  associatedContract: string;
}
export type AssociatedContractAddedEvent = TypedEvent<[string], AssociatedContractAddedEventObject>;

export type AssociatedContractAddedEventFilter = TypedEventFilter<AssociatedContractAddedEvent>;

export interface AssociatedContractRemovedEventObject {
  associatedContract: string;
}
export type AssociatedContractRemovedEvent = TypedEvent<
  [string],
  AssociatedContractRemovedEventObject
>;

export type AssociatedContractRemovedEventFilter = TypedEventFilter<AssociatedContractRemovedEvent>;

export interface MarketStateInitializedEventObject {
  marketKey: string;
  legacyContractExists: boolean;
  legacyState: string;
  legacyFundinSequenceOffset: BigNumber;
}
export type MarketStateInitializedEvent = TypedEvent<
  [string, boolean, string, BigNumber],
  MarketStateInitializedEventObject
>;

export type MarketStateInitializedEventFilter = TypedEventFilter<MarketStateInitializedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PerpsV2MarketStateFLOWPERP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpsV2MarketStateFLOWPERPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    associatedContracts(overrides?: CallOverrides): Promise<[string[]]>;

    baseAsset(overrides?: CallOverrides): Promise<[string]>;

    delayedOrders(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IPerpsV2MarketBaseTypes.DelayedOrderStructOutput]>;

    deleteDelayedOrder(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePosition(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryDebtCorrection(overrides?: CallOverrides): Promise<[BigNumber]>;

    flag(
      account: PromiseOrValue<string>,
      flagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<[number]>;

    fundingRateLastRecomputed(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingSequence(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelayedOrderAddressesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelayedOrderAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFlaggedAddressesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFlaggedAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPositionAddressesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isFlagged(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    legacyFundinSequenceOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    legacyState(overrides?: CallOverrides): Promise<[string]>;

    linkOrInitializeState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketKey(overrides?: CallOverrides): Promise<[string]>;

    marketSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketSkew(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPositionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionFlagger(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IPerpsV2MarketBaseTypes.PositionStructOutput]>;

    pushFundingSequence(
      fundingSequence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseAsset(
      _baseAsset: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEntryDebtCorrection(
      entryDebtCorrection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFundingLastRecomputed(
      lastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFundingRateLastRecomputed(
      _fundingRateLastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketSize(
      _marketSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketSkew(
      _marketSkew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextPositionId(
      nextPositionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unflag(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDelayedOrder(
      account: PromiseOrValue<string>,
      isOffchain: PromiseOrValue<boolean>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      desiredFillPrice: PromiseOrValue<BigNumberish>,
      targetRoundId: PromiseOrValue<BigNumberish>,
      commitDeposit: PromiseOrValue<BigNumberish>,
      keeperDeposit: PromiseOrValue<BigNumberish>,
      executableAtTime: PromiseOrValue<BigNumberish>,
      intentionTime: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePosition(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      lastFundingIndex: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      lastPrice: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAssociatedContracts(
    associatedContracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  associatedContracts(overrides?: CallOverrides): Promise<string[]>;

  baseAsset(overrides?: CallOverrides): Promise<string>;

  delayedOrders(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IPerpsV2MarketBaseTypes.DelayedOrderStructOutput>;

  deleteDelayedOrder(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePosition(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryDebtCorrection(overrides?: CallOverrides): Promise<BigNumber>;

  flag(
    account: PromiseOrValue<string>,
    flagger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundingLastRecomputed(overrides?: CallOverrides): Promise<number>;

  fundingRateLastRecomputed(overrides?: CallOverrides): Promise<BigNumber>;

  fundingSequence(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

  getDelayedOrderAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getDelayedOrderAddressesPage(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFlaggedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getFlaggedAddressesPage(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPositionAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionAddressesPage(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isFlagged(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  legacyFundinSequenceOffset(overrides?: CallOverrides): Promise<BigNumber>;

  legacyState(overrides?: CallOverrides): Promise<string>;

  linkOrInitializeState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketKey(overrides?: CallOverrides): Promise<string>;

  marketSize(overrides?: CallOverrides): Promise<BigNumber>;

  marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

  nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionFlagger(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  positions(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IPerpsV2MarketBaseTypes.PositionStructOutput>;

  pushFundingSequence(
    fundingSequence: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAssociatedContracts(
    associatedContracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseAsset(
    _baseAsset: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEntryDebtCorrection(
    entryDebtCorrection: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFundingLastRecomputed(
    lastRecomputed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFundingRateLastRecomputed(
    _fundingRateLastRecomputed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketKey(
    _marketKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketSize(
    _marketSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketSkew(
    _marketSkew: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextPositionId(
    nextPositionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unflag(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDelayedOrder(
    account: PromiseOrValue<string>,
    isOffchain: PromiseOrValue<boolean>,
    sizeDelta: PromiseOrValue<BigNumberish>,
    desiredFillPrice: PromiseOrValue<BigNumberish>,
    targetRoundId: PromiseOrValue<BigNumberish>,
    commitDeposit: PromiseOrValue<BigNumberish>,
    keeperDeposit: PromiseOrValue<BigNumberish>,
    executableAtTime: PromiseOrValue<BigNumberish>,
    intentionTime: PromiseOrValue<BigNumberish>,
    trackingCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePosition(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    lastFundingIndex: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    lastPrice: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    associatedContracts(overrides?: CallOverrides): Promise<string[]>;

    baseAsset(overrides?: CallOverrides): Promise<string>;

    delayedOrders(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IPerpsV2MarketBaseTypes.DelayedOrderStructOutput>;

    deleteDelayedOrder(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    deletePosition(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    entryDebtCorrection(overrides?: CallOverrides): Promise<BigNumber>;

    flag(
      account: PromiseOrValue<string>,
      flagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<number>;

    fundingRateLastRecomputed(overrides?: CallOverrides): Promise<BigNumber>;

    fundingSequence(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDelayedOrderAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDelayedOrderAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFlaggedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getFlaggedAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPositionAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isFlagged(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    legacyFundinSequenceOffset(overrides?: CallOverrides): Promise<BigNumber>;

    legacyState(overrides?: CallOverrides): Promise<string>;

    linkOrInitializeState(overrides?: CallOverrides): Promise<void>;

    marketKey(overrides?: CallOverrides): Promise<string>;

    marketSize(overrides?: CallOverrides): Promise<BigNumber>;

    marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    positionFlagger(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IPerpsV2MarketBaseTypes.PositionStructOutput>;

    pushFundingSequence(
      fundingSequence: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseAsset(_baseAsset: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setEntryDebtCorrection(
      entryDebtCorrection: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingLastRecomputed(
      lastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRateLastRecomputed(
      _fundingRateLastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketKey(_marketKey: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setMarketSize(
      _marketSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketSkew(
      _marketSkew: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextPositionId(
      nextPositionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unflag(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateDelayedOrder(
      account: PromiseOrValue<string>,
      isOffchain: PromiseOrValue<boolean>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      desiredFillPrice: PromiseOrValue<BigNumberish>,
      targetRoundId: PromiseOrValue<BigNumberish>,
      commitDeposit: PromiseOrValue<BigNumberish>,
      keeperDeposit: PromiseOrValue<BigNumberish>,
      executableAtTime: PromiseOrValue<BigNumberish>,
      intentionTime: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePosition(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      lastFundingIndex: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      lastPrice: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AssociatedContractAdded(address)'(
      associatedContract?: null
    ): AssociatedContractAddedEventFilter;
    AssociatedContractAdded(associatedContract?: null): AssociatedContractAddedEventFilter;

    'AssociatedContractRemoved(address)'(
      associatedContract?: null
    ): AssociatedContractRemovedEventFilter;
    AssociatedContractRemoved(associatedContract?: null): AssociatedContractRemovedEventFilter;

    'MarketStateInitialized(bytes32,bool,address,uint256)'(
      marketKey?: PromiseOrValue<BytesLike> | null,
      legacyContractExists?: null,
      legacyState?: null,
      legacyFundinSequenceOffset?: null
    ): MarketStateInitializedEventFilter;
    MarketStateInitialized(
      marketKey?: PromiseOrValue<BytesLike> | null,
      legacyContractExists?: null,
      legacyState?: null,
      legacyFundinSequenceOffset?: null
    ): MarketStateInitializedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    associatedContracts(overrides?: CallOverrides): Promise<BigNumber>;

    baseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    delayedOrders(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deleteDelayedOrder(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePosition(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryDebtCorrection(overrides?: CallOverrides): Promise<BigNumber>;

    flag(
      account: PromiseOrValue<string>,
      flagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateLastRecomputed(overrides?: CallOverrides): Promise<BigNumber>;

    fundingSequence(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDelayedOrderAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDelayedOrderAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlaggedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getFlaggedAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isFlagged(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    legacyFundinSequenceOffset(overrides?: CallOverrides): Promise<BigNumber>;

    legacyState(overrides?: CallOverrides): Promise<BigNumber>;

    linkOrInitializeState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketKey(overrides?: CallOverrides): Promise<BigNumber>;

    marketSize(overrides?: CallOverrides): Promise<BigNumber>;

    marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionFlagger(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    positions(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pushFundingSequence(
      fundingSequence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseAsset(
      _baseAsset: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEntryDebtCorrection(
      entryDebtCorrection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFundingLastRecomputed(
      lastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFundingRateLastRecomputed(
      _fundingRateLastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketSize(
      _marketSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketSkew(
      _marketSkew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextPositionId(
      nextPositionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unflag(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDelayedOrder(
      account: PromiseOrValue<string>,
      isOffchain: PromiseOrValue<boolean>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      desiredFillPrice: PromiseOrValue<BigNumberish>,
      targetRoundId: PromiseOrValue<BigNumberish>,
      commitDeposit: PromiseOrValue<BigNumberish>,
      keeperDeposit: PromiseOrValue<BigNumberish>,
      executableAtTime: PromiseOrValue<BigNumberish>,
      intentionTime: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePosition(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      lastFundingIndex: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      lastPrice: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    associatedContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedOrders(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteDelayedOrder(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePosition(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryDebtCorrection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flag(
      account: PromiseOrValue<string>,
      flagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateLastRecomputed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingSequence(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelayedOrderAddressesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelayedOrderAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlaggedAddressesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFlaggedAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionAddressesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionAddressesPage(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFlagged(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacyFundinSequenceOffset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    legacyState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkOrInitializeState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketSkew(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPositionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionFlagger(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushFundingSequence(
      fundingSequence: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAssociatedContracts(
      associatedContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseAsset(
      _baseAsset: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEntryDebtCorrection(
      entryDebtCorrection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFundingLastRecomputed(
      lastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRateLastRecomputed(
      _fundingRateLastRecomputed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketKey(
      _marketKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketSize(
      _marketSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketSkew(
      _marketSkew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextPositionId(
      nextPositionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unflag(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDelayedOrder(
      account: PromiseOrValue<string>,
      isOffchain: PromiseOrValue<boolean>,
      sizeDelta: PromiseOrValue<BigNumberish>,
      desiredFillPrice: PromiseOrValue<BigNumberish>,
      targetRoundId: PromiseOrValue<BigNumberish>,
      commitDeposit: PromiseOrValue<BigNumberish>,
      keeperDeposit: PromiseOrValue<BigNumberish>,
      executableAtTime: PromiseOrValue<BigNumberish>,
      intentionTime: PromiseOrValue<BigNumberish>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePosition(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      lastFundingIndex: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      lastPrice: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
