// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'CollateralManager';
export const address = '0x15E7D4972a3E477878A5867A47617122BE2d1fF0';
export const source = 'CollateralManager';
export const abi = [
  'constructor(address _state, address _owner, address _resolver, uint256 _maxDebt, uint256 _maxSkewRate, uint256 _baseBorrowRate, uint256 _baseShortRate)',
  'event BaseBorrowRateUpdated(uint256 baseBorrowRate)',
  'event BaseShortRateUpdated(uint256 baseShortRate)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event CollateralAdded(address collateral)',
  'event CollateralRemoved(address collateral)',
  'event LiquidationPenaltyUpdated(uint256 liquidationPenalty)',
  'event MaxDebtUpdated(uint256 maxDebt)',
  'event MaxSkewRateUpdated(uint256 maxSkewRate)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'event PauseChanged(bool isPaused)',
  'event ShortableSynthAdded(bytes32 synth)',
  'event ShortableSynthRemoved(bytes32 synth)',
  'event SynthAdded(bytes32 synth)',
  'event SynthRemoved(bytes32 synth)',
  'event UtilisationMultiplierUpdated(uint256 utilisationMultiplier)',
  'function CONTRACT_NAME() view returns (bytes32)',
  'function acceptOwnership()',
  'function accrueInterest(uint256 interestIndex, bytes32 currency, bool isShort) returns (uint256 difference, uint256 index)',
  'function addCollaterals(address[] collaterals)',
  'function addShortableSynths(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys)',
  'function addSynths(bytes32[] synthNamesInResolver, bytes32[] synthKeys)',
  'function areShortableSynthsSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)',
  'function areSynthsAndCurrenciesSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)',
  'function baseBorrowRate() view returns (uint256)',
  'function baseShortRate() view returns (uint256)',
  'function decrementLongs(bytes32 synth, uint256 amount)',
  'function decrementShorts(bytes32 synth, uint256 amount)',
  'function exceedsDebtLimit(uint256 amount, bytes32 currency) view returns (bool canIssue, bool anyRateIsInvalid)',
  'function getBorrowRate() view returns (uint256 borrowRate, bool anyRateIsInvalid)',
  'function getNewLoanId() returns (uint256 id)',
  'function getRatesAndTime(uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)',
  'function getShortRate(bytes32 synthKey) view returns (uint256 shortRate, bool rateIsInvalid)',
  'function getShortRatesAndTime(bytes32 currency, uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)',
  'function hasAllCollaterals(address[] collaterals) view returns (bool)',
  'function hasCollateral(address collateral) view returns (bool)',
  'function incrementLongs(bytes32 synth, uint256 amount)',
  'function incrementShorts(bytes32 synth, uint256 amount)',
  'function isResolverCached() view returns (bool)',
  'function isSynthManaged(bytes32 currencyKey) view returns (bool)',
  'function lastPauseTime() view returns (uint256)',
  'function long(bytes32 synth) view returns (uint256 amount)',
  'function maxDebt() view returns (uint256)',
  'function maxSkewRate() view returns (uint256)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function paused() view returns (bool)',
  'function rebuildCache()',
  'function removeCollaterals(address[] collaterals)',
  'function removeShortableSynths(bytes32[] synths)',
  'function removeSynths(bytes32[] synthNamesInResolver, bytes32[] synthKeys)',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function setBaseBorrowRate(uint256 _baseBorrowRate)',
  'function setBaseShortRate(uint256 _baseShortRate)',
  'function setMaxDebt(uint256 _maxDebt)',
  'function setMaxSkewRate(uint256 _maxSkewRate)',
  'function setPaused(bool _paused)',
  'function setUtilisationMultiplier(uint256 _utilisationMultiplier)',
  'function short(bytes32 synth) view returns (uint256 amount)',
  'function shortableSynthsByKey(bytes32) view returns (bytes32)',
  'function state() view returns (address)',
  'function synthsByKey(bytes32) view returns (bytes32)',
  'function totalLong() view returns (uint256 susdValue, bool anyRateIsInvalid)',
  'function totalLongAndShort() view returns (uint256 susdValue, bool anyRateIsInvalid)',
  'function totalShort() view returns (uint256 susdValue, bool anyRateIsInvalid)',
  'function updateBorrowRatesCollateral(uint256 rate)',
  'function updateShortRatesCollateral(bytes32 currency, uint256 rate)',
  'function utilisationMultiplier() view returns (uint256)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface CollateralManagerInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'accrueInterest(uint256,bytes32,bool)': FunctionFragment;
    'addCollaterals(address[])': FunctionFragment;
    'addShortableSynths(bytes32[],bytes32[])': FunctionFragment;
    'addSynths(bytes32[],bytes32[])': FunctionFragment;
    'areShortableSynthsSet(bytes32[],bytes32[])': FunctionFragment;
    'areSynthsAndCurrenciesSet(bytes32[],bytes32[])': FunctionFragment;
    'baseBorrowRate()': FunctionFragment;
    'baseShortRate()': FunctionFragment;
    'decrementLongs(bytes32,uint256)': FunctionFragment;
    'decrementShorts(bytes32,uint256)': FunctionFragment;
    'exceedsDebtLimit(uint256,bytes32)': FunctionFragment;
    'getBorrowRate()': FunctionFragment;
    'getNewLoanId()': FunctionFragment;
    'getRatesAndTime(uint256)': FunctionFragment;
    'getShortRate(bytes32)': FunctionFragment;
    'getShortRatesAndTime(bytes32,uint256)': FunctionFragment;
    'hasAllCollaterals(address[])': FunctionFragment;
    'hasCollateral(address)': FunctionFragment;
    'incrementLongs(bytes32,uint256)': FunctionFragment;
    'incrementShorts(bytes32,uint256)': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'isSynthManaged(bytes32)': FunctionFragment;
    'lastPauseTime()': FunctionFragment;
    'long(bytes32)': FunctionFragment;
    'maxDebt()': FunctionFragment;
    'maxSkewRate()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'removeCollaterals(address[])': FunctionFragment;
    'removeShortableSynths(bytes32[])': FunctionFragment;
    'removeSynths(bytes32[],bytes32[])': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'setBaseBorrowRate(uint256)': FunctionFragment;
    'setBaseShortRate(uint256)': FunctionFragment;
    'setMaxDebt(uint256)': FunctionFragment;
    'setMaxSkewRate(uint256)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setUtilisationMultiplier(uint256)': FunctionFragment;
    'short(bytes32)': FunctionFragment;
    'shortableSynthsByKey(bytes32)': FunctionFragment;
    'state()': FunctionFragment;
    'synthsByKey(bytes32)': FunctionFragment;
    'totalLong()': FunctionFragment;
    'totalLongAndShort()': FunctionFragment;
    'totalShort()': FunctionFragment;
    'updateBorrowRatesCollateral(uint256)': FunctionFragment;
    'updateShortRatesCollateral(bytes32,uint256)': FunctionFragment;
    'utilisationMultiplier()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'acceptOwnership'
      | 'accrueInterest'
      | 'addCollaterals'
      | 'addShortableSynths'
      | 'addSynths'
      | 'areShortableSynthsSet'
      | 'areSynthsAndCurrenciesSet'
      | 'baseBorrowRate'
      | 'baseShortRate'
      | 'decrementLongs'
      | 'decrementShorts'
      | 'exceedsDebtLimit'
      | 'getBorrowRate'
      | 'getNewLoanId'
      | 'getRatesAndTime'
      | 'getShortRate'
      | 'getShortRatesAndTime'
      | 'hasAllCollaterals'
      | 'hasCollateral'
      | 'incrementLongs'
      | 'incrementShorts'
      | 'isResolverCached'
      | 'isSynthManaged'
      | 'lastPauseTime'
      | 'long'
      | 'maxDebt'
      | 'maxSkewRate'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'paused'
      | 'rebuildCache'
      | 'removeCollaterals'
      | 'removeShortableSynths'
      | 'removeSynths'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'setBaseBorrowRate'
      | 'setBaseShortRate'
      | 'setMaxDebt'
      | 'setMaxSkewRate'
      | 'setPaused'
      | 'setUtilisationMultiplier'
      | 'short'
      | 'shortableSynthsByKey'
      | 'state'
      | 'synthsByKey'
      | 'totalLong'
      | 'totalLongAndShort'
      | 'totalShort'
      | 'updateBorrowRatesCollateral'
      | 'updateShortRatesCollateral'
      | 'utilisationMultiplier'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accrueInterest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'addCollaterals',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'addShortableSynths',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'addSynths',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'areShortableSynthsSet',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'areSynthsAndCurrenciesSet',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'baseBorrowRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseShortRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decrementLongs',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'decrementShorts',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'exceedsDebtLimit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'getBorrowRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNewLoanId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRatesAndTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getShortRate', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getShortRatesAndTime',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasAllCollaterals',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'hasCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'incrementLongs',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'incrementShorts',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isSynthManaged',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'lastPauseTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'long', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'maxDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSkewRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeCollaterals',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeShortableSynths',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeSynths',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBaseBorrowRate',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseShortRate',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxDebt',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxSkewRate',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setUtilisationMultiplier',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'short', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'shortableSynthsByKey',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'state', values?: undefined): string;
  encodeFunctionData(functionFragment: 'synthsByKey', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'totalLong', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLongAndShort', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShort', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateBorrowRatesCollateral',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateShortRatesCollateral',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'utilisationMultiplier', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollaterals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addShortableSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'areShortableSynthsSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'areSynthsAndCurrenciesSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseShortRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decrementLongs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decrementShorts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exceedsDebtLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNewLoanId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRatesAndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getShortRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getShortRatesAndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasAllCollaterals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incrementLongs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incrementShorts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSynthManaged', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPauseTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'long', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSkewRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCollaterals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeShortableSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseShortRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxSkewRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUtilisationMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'short', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shortableSynthsByKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthsByKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLong', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLongAndShort', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShort', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowRatesCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateShortRatesCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'utilisationMultiplier', data: BytesLike): Result;

  events: {
    'BaseBorrowRateUpdated(uint256)': EventFragment;
    'BaseShortRateUpdated(uint256)': EventFragment;
    'CacheUpdated(bytes32,address)': EventFragment;
    'CollateralAdded(address)': EventFragment;
    'CollateralRemoved(address)': EventFragment;
    'LiquidationPenaltyUpdated(uint256)': EventFragment;
    'MaxDebtUpdated(uint256)': EventFragment;
    'MaxSkewRateUpdated(uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'PauseChanged(bool)': EventFragment;
    'ShortableSynthAdded(bytes32)': EventFragment;
    'ShortableSynthRemoved(bytes32)': EventFragment;
    'SynthAdded(bytes32)': EventFragment;
    'SynthRemoved(bytes32)': EventFragment;
    'UtilisationMultiplierUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BaseBorrowRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseShortRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationPenaltyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxDebtUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxSkewRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ShortableSynthAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ShortableSynthRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UtilisationMultiplierUpdated'): EventFragment;
}

export interface BaseBorrowRateUpdatedEventObject {
  baseBorrowRate: BigNumber;
}
export type BaseBorrowRateUpdatedEvent = TypedEvent<[BigNumber], BaseBorrowRateUpdatedEventObject>;

export type BaseBorrowRateUpdatedEventFilter = TypedEventFilter<BaseBorrowRateUpdatedEvent>;

export interface BaseShortRateUpdatedEventObject {
  baseShortRate: BigNumber;
}
export type BaseShortRateUpdatedEvent = TypedEvent<[BigNumber], BaseShortRateUpdatedEventObject>;

export type BaseShortRateUpdatedEventFilter = TypedEventFilter<BaseShortRateUpdatedEvent>;

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface CollateralAddedEventObject {
  collateral: string;
}
export type CollateralAddedEvent = TypedEvent<[string], CollateralAddedEventObject>;

export type CollateralAddedEventFilter = TypedEventFilter<CollateralAddedEvent>;

export interface CollateralRemovedEventObject {
  collateral: string;
}
export type CollateralRemovedEvent = TypedEvent<[string], CollateralRemovedEventObject>;

export type CollateralRemovedEventFilter = TypedEventFilter<CollateralRemovedEvent>;

export interface LiquidationPenaltyUpdatedEventObject {
  liquidationPenalty: BigNumber;
}
export type LiquidationPenaltyUpdatedEvent = TypedEvent<
  [BigNumber],
  LiquidationPenaltyUpdatedEventObject
>;

export type LiquidationPenaltyUpdatedEventFilter = TypedEventFilter<LiquidationPenaltyUpdatedEvent>;

export interface MaxDebtUpdatedEventObject {
  maxDebt: BigNumber;
}
export type MaxDebtUpdatedEvent = TypedEvent<[BigNumber], MaxDebtUpdatedEventObject>;

export type MaxDebtUpdatedEventFilter = TypedEventFilter<MaxDebtUpdatedEvent>;

export interface MaxSkewRateUpdatedEventObject {
  maxSkewRate: BigNumber;
}
export type MaxSkewRateUpdatedEvent = TypedEvent<[BigNumber], MaxSkewRateUpdatedEventObject>;

export type MaxSkewRateUpdatedEventFilter = TypedEventFilter<MaxSkewRateUpdatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PauseChangedEventObject {
  isPaused: boolean;
}
export type PauseChangedEvent = TypedEvent<[boolean], PauseChangedEventObject>;

export type PauseChangedEventFilter = TypedEventFilter<PauseChangedEvent>;

export interface ShortableSynthAddedEventObject {
  synth: string;
}
export type ShortableSynthAddedEvent = TypedEvent<[string], ShortableSynthAddedEventObject>;

export type ShortableSynthAddedEventFilter = TypedEventFilter<ShortableSynthAddedEvent>;

export interface ShortableSynthRemovedEventObject {
  synth: string;
}
export type ShortableSynthRemovedEvent = TypedEvent<[string], ShortableSynthRemovedEventObject>;

export type ShortableSynthRemovedEventFilter = TypedEventFilter<ShortableSynthRemovedEvent>;

export interface SynthAddedEventObject {
  synth: string;
}
export type SynthAddedEvent = TypedEvent<[string], SynthAddedEventObject>;

export type SynthAddedEventFilter = TypedEventFilter<SynthAddedEvent>;

export interface SynthRemovedEventObject {
  synth: string;
}
export type SynthRemovedEvent = TypedEvent<[string], SynthRemovedEventObject>;

export type SynthRemovedEventFilter = TypedEventFilter<SynthRemovedEvent>;

export interface UtilisationMultiplierUpdatedEventObject {
  utilisationMultiplier: BigNumber;
}
export type UtilisationMultiplierUpdatedEvent = TypedEvent<
  [BigNumber],
  UtilisationMultiplierUpdatedEventObject
>;

export type UtilisationMultiplierUpdatedEventFilter =
  TypedEventFilter<UtilisationMultiplierUpdatedEvent>;

export interface CollateralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accrueInterest(
      interestIndex: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      isShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addShortableSynths(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    areShortableSynthsSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    areSynthsAndCurrenciesSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseShortRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    decrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exceedsDebtLimit(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { canIssue: boolean; anyRateIsInvalid: boolean }>;

    getBorrowRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { borrowRate: BigNumber; anyRateIsInvalid: boolean }>;

    getNewLoanId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRatesAndTime(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        lastRate: BigNumber;
        lastUpdated: BigNumber;
        newIndex: BigNumber;
      }
    >;

    getShortRate(
      synthKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { shortRate: BigNumber; rateIsInvalid: boolean }>;

    getShortRatesAndTime(
      currency: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        lastRate: BigNumber;
        lastUpdated: BigNumber;
        newIndex: BigNumber;
      }
    >;

    hasAllCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    isSynthManaged(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    long(
      synth: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    maxDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSkewRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeShortableSynths(
      synths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    setBaseBorrowRate(
      _baseBorrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseShortRate(
      _baseShortRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDebt(
      _maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSkewRate(
      _maxSkewRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilisationMultiplier(
      _utilisationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    short(
      synth: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    shortableSynthsByKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[string]>;

    synthsByKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    totalLong(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    totalLongAndShort(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    totalShort(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    updateBorrowRatesCollateral(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShortRatesCollateral(
      currency: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    utilisationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accrueInterest(
    interestIndex: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<BytesLike>,
    isShort: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCollaterals(
    collaterals: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addShortableSynths(
    requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
    synthKeys: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSynths(
    synthNamesInResolver: PromiseOrValue<BytesLike>[],
    synthKeys: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  areShortableSynthsSet(
    requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
    synthKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  areSynthsAndCurrenciesSet(
    requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
    synthKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  baseShortRate(overrides?: CallOverrides): Promise<BigNumber>;

  decrementLongs(
    synth: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrementShorts(
    synth: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exceedsDebtLimit(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { canIssue: boolean; anyRateIsInvalid: boolean }>;

  getBorrowRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { borrowRate: BigNumber; anyRateIsInvalid: boolean }>;

  getNewLoanId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRatesAndTime(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      entryRate: BigNumber;
      lastRate: BigNumber;
      lastUpdated: BigNumber;
      newIndex: BigNumber;
    }
  >;

  getShortRate(
    synthKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { shortRate: BigNumber; rateIsInvalid: boolean }>;

  getShortRatesAndTime(
    currency: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      entryRate: BigNumber;
      lastRate: BigNumber;
      lastUpdated: BigNumber;
      newIndex: BigNumber;
    }
  >;

  hasAllCollaterals(
    collaterals: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasCollateral(collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  incrementLongs(
    synth: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrementShorts(
    synth: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  isSynthManaged(
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  long(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

  maxSkewRate(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollaterals(
    collaterals: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeShortableSynths(
    synths: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSynths(
    synthNamesInResolver: PromiseOrValue<BytesLike>[],
    synthKeys: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  setBaseBorrowRate(
    _baseBorrowRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseShortRate(
    _baseShortRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDebt(
    _maxDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSkewRate(
    _maxSkewRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilisationMultiplier(
    _utilisationMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  short(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  shortableSynthsByKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<string>;

  synthsByKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  totalLong(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

  totalLongAndShort(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

  totalShort(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

  updateBorrowRatesCollateral(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShortRatesCollateral(
    currency: PromiseOrValue<BytesLike>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  utilisationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accrueInterest(
      interestIndex: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { difference: BigNumber; index: BigNumber }>;

    addCollaterals(collaterals: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    addShortableSynths(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    areShortableSynthsSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    areSynthsAndCurrenciesSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseShortRate(overrides?: CallOverrides): Promise<BigNumber>;

    decrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exceedsDebtLimit(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { canIssue: boolean; anyRateIsInvalid: boolean }>;

    getBorrowRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { borrowRate: BigNumber; anyRateIsInvalid: boolean }>;

    getNewLoanId(overrides?: CallOverrides): Promise<BigNumber>;

    getRatesAndTime(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        lastRate: BigNumber;
        lastUpdated: BigNumber;
        newIndex: BigNumber;
      }
    >;

    getShortRate(
      synthKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { shortRate: BigNumber; rateIsInvalid: boolean }>;

    getShortRatesAndTime(
      currency: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        lastRate: BigNumber;
        lastUpdated: BigNumber;
        newIndex: BigNumber;
      }
    >;

    hasAllCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasCollateral(collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    incrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    isSynthManaged(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    long(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

    maxSkewRate(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    removeCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeShortableSynths(
      synths: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    setBaseBorrowRate(
      _baseBorrowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseShortRate(
      _baseShortRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebt(_maxDebt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxSkewRate(
      _maxSkewRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setUtilisationMultiplier(
      _utilisationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    short(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    shortableSynthsByKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    state(overrides?: CallOverrides): Promise<string>;

    synthsByKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    totalLong(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    totalLongAndShort(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    totalShort(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { susdValue: BigNumber; anyRateIsInvalid: boolean }>;

    updateBorrowRatesCollateral(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateShortRatesCollateral(
      currency: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    utilisationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'BaseBorrowRateUpdated(uint256)'(baseBorrowRate?: null): BaseBorrowRateUpdatedEventFilter;
    BaseBorrowRateUpdated(baseBorrowRate?: null): BaseBorrowRateUpdatedEventFilter;

    'BaseShortRateUpdated(uint256)'(baseShortRate?: null): BaseShortRateUpdatedEventFilter;
    BaseShortRateUpdated(baseShortRate?: null): BaseShortRateUpdatedEventFilter;

    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'CollateralAdded(address)'(collateral?: null): CollateralAddedEventFilter;
    CollateralAdded(collateral?: null): CollateralAddedEventFilter;

    'CollateralRemoved(address)'(collateral?: null): CollateralRemovedEventFilter;
    CollateralRemoved(collateral?: null): CollateralRemovedEventFilter;

    'LiquidationPenaltyUpdated(uint256)'(
      liquidationPenalty?: null
    ): LiquidationPenaltyUpdatedEventFilter;
    LiquidationPenaltyUpdated(liquidationPenalty?: null): LiquidationPenaltyUpdatedEventFilter;

    'MaxDebtUpdated(uint256)'(maxDebt?: null): MaxDebtUpdatedEventFilter;
    MaxDebtUpdated(maxDebt?: null): MaxDebtUpdatedEventFilter;

    'MaxSkewRateUpdated(uint256)'(maxSkewRate?: null): MaxSkewRateUpdatedEventFilter;
    MaxSkewRateUpdated(maxSkewRate?: null): MaxSkewRateUpdatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'PauseChanged(bool)'(isPaused?: null): PauseChangedEventFilter;
    PauseChanged(isPaused?: null): PauseChangedEventFilter;

    'ShortableSynthAdded(bytes32)'(synth?: null): ShortableSynthAddedEventFilter;
    ShortableSynthAdded(synth?: null): ShortableSynthAddedEventFilter;

    'ShortableSynthRemoved(bytes32)'(synth?: null): ShortableSynthRemovedEventFilter;
    ShortableSynthRemoved(synth?: null): ShortableSynthRemovedEventFilter;

    'SynthAdded(bytes32)'(synth?: null): SynthAddedEventFilter;
    SynthAdded(synth?: null): SynthAddedEventFilter;

    'SynthRemoved(bytes32)'(synth?: null): SynthRemovedEventFilter;
    SynthRemoved(synth?: null): SynthRemovedEventFilter;

    'UtilisationMultiplierUpdated(uint256)'(
      utilisationMultiplier?: null
    ): UtilisationMultiplierUpdatedEventFilter;
    UtilisationMultiplierUpdated(
      utilisationMultiplier?: null
    ): UtilisationMultiplierUpdatedEventFilter;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    accrueInterest(
      interestIndex: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      isShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addShortableSynths(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    areShortableSynthsSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    areSynthsAndCurrenciesSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseShortRate(overrides?: CallOverrides): Promise<BigNumber>;

    decrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exceedsDebtLimit(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getNewLoanId(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getRatesAndTime(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortRate(
      synthKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortRatesAndTime(
      currency: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAllCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    isSynthManaged(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    long(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

    maxSkewRate(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    removeCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeShortableSynths(
      synths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseBorrowRate(
      _baseBorrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseShortRate(
      _baseShortRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDebt(
      _maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSkewRate(
      _maxSkewRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilisationMultiplier(
      _utilisationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    short(synth: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    shortableSynthsByKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    synthsByKey(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    totalLong(overrides?: CallOverrides): Promise<BigNumber>;

    totalLongAndShort(overrides?: CallOverrides): Promise<BigNumber>;

    totalShort(overrides?: CallOverrides): Promise<BigNumber>;

    updateBorrowRatesCollateral(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShortRatesCollateral(
      currency: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    utilisationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accrueInterest(
      interestIndex: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      isShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addShortableSynths(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    areShortableSynthsSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    areSynthsAndCurrenciesSet(
      requiredSynthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseShortRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exceedsDebtLimit(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNewLoanId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRatesAndTime(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortRate(
      synthKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortRatesAndTime(
      currency: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAllCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasCollateral(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementLongs(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrementShorts(
      synth: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSynthManaged(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    long(
      synth: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSkewRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollaterals(
      collaterals: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeShortableSynths(
      synths: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSynths(
      synthNamesInResolver: PromiseOrValue<BytesLike>[],
      synthKeys: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseBorrowRate(
      _baseBorrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseShortRate(
      _baseShortRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebt(
      _maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSkewRate(
      _maxSkewRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilisationMultiplier(
      _utilisationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    short(
      synth: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shortableSynthsByKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synthsByKey(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLong(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLongAndShort(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShort(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBorrowRatesCollateral(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShortRatesCollateral(
      currency: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    utilisationMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
