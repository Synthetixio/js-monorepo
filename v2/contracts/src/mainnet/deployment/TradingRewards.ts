// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'TradingRewards';
export const address = '0x62922670313bf6b41C580143d1f6C173C5C20019';
export const source = 'TradingRewards';
export const abi = [
  'constructor(address owner, address periodController, address resolver)',
  'event AssignedRewardTokensRecovered(address recoverAddress, uint256 amount, uint256 periodID)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event ExchangeFeeRecorded(address indexed account, uint256 amount, uint256 periodID)',
  'event NewPeriodStarted(uint256 periodID)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'event PauseChanged(bool isPaused)',
  'event PeriodControllerChanged(address newPeriodController)',
  'event PeriodFinalizedWithRewards(uint256 periodID, uint256 rewards)',
  'event RewardsClaimed(address indexed account, uint256 amount, uint256 periodID)',
  'event TokensRecovered(address tokenAddress, address recoverAddress, uint256 amount)',
  'event UnassignedRewardTokensRecovered(address recoverAddress, uint256 amount)',
  'function acceptOwnership()',
  'function claimRewardsForPeriod(uint256 periodID)',
  'function claimRewardsForPeriods(uint256[] periodIDs)',
  'function closeCurrentPeriodWithRewards(uint256 rewards)',
  'function getAvailableRewards() view returns (uint256)',
  'function getAvailableRewardsForAccountForPeriod(address account, uint256 periodID) view returns (uint256)',
  'function getAvailableRewardsForAccountForPeriods(address account, uint256[] periodIDs) view returns (uint256 totalRewards)',
  'function getCurrentPeriod() view returns (uint256)',
  'function getPeriodAvailableRewards(uint256 periodID) view returns (uint256)',
  'function getPeriodController() view returns (address)',
  'function getPeriodIsClaimable(uint256 periodID) view returns (bool)',
  'function getPeriodIsFinalized(uint256 periodID) view returns (bool)',
  'function getPeriodRecordedFees(uint256 periodID) view returns (uint256)',
  'function getPeriodTotalRewards(uint256 periodID) view returns (uint256)',
  'function getRewardsToken() view returns (address)',
  'function getUnaccountedFeesForAccountForPeriod(address account, uint256 periodID) view returns (uint256)',
  'function getUnassignedRewards() view returns (uint256)',
  'function isResolverCached() view returns (bool)',
  'function lastPauseTime() view returns (uint256)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function paused() view returns (bool)',
  'function rebuildCache()',
  'function recordExchangeFeeForAccount(uint256 usdFeeAmount, address account)',
  'function recoverAssignedRewardTokensAndDestroyPeriod(address recoverAddress, uint256 periodID)',
  'function recoverTokens(address tokenAddress, address recoverAddress)',
  'function recoverUnassignedRewardTokens(address recoverAddress)',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function setPaused(bool _paused)',
  'function setPeriodController(address newPeriodController)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface TradingRewardsInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'claimRewardsForPeriod(uint256)': FunctionFragment;
    'claimRewardsForPeriods(uint256[])': FunctionFragment;
    'closeCurrentPeriodWithRewards(uint256)': FunctionFragment;
    'getAvailableRewards()': FunctionFragment;
    'getAvailableRewardsForAccountForPeriod(address,uint256)': FunctionFragment;
    'getAvailableRewardsForAccountForPeriods(address,uint256[])': FunctionFragment;
    'getCurrentPeriod()': FunctionFragment;
    'getPeriodAvailableRewards(uint256)': FunctionFragment;
    'getPeriodController()': FunctionFragment;
    'getPeriodIsClaimable(uint256)': FunctionFragment;
    'getPeriodIsFinalized(uint256)': FunctionFragment;
    'getPeriodRecordedFees(uint256)': FunctionFragment;
    'getPeriodTotalRewards(uint256)': FunctionFragment;
    'getRewardsToken()': FunctionFragment;
    'getUnaccountedFeesForAccountForPeriod(address,uint256)': FunctionFragment;
    'getUnassignedRewards()': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'lastPauseTime()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'recordExchangeFeeForAccount(uint256,address)': FunctionFragment;
    'recoverAssignedRewardTokensAndDestroyPeriod(address,uint256)': FunctionFragment;
    'recoverTokens(address,address)': FunctionFragment;
    'recoverUnassignedRewardTokens(address)': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPeriodController(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'claimRewardsForPeriod'
      | 'claimRewardsForPeriods'
      | 'closeCurrentPeriodWithRewards'
      | 'getAvailableRewards'
      | 'getAvailableRewardsForAccountForPeriod'
      | 'getAvailableRewardsForAccountForPeriods'
      | 'getCurrentPeriod'
      | 'getPeriodAvailableRewards'
      | 'getPeriodController'
      | 'getPeriodIsClaimable'
      | 'getPeriodIsFinalized'
      | 'getPeriodRecordedFees'
      | 'getPeriodTotalRewards'
      | 'getRewardsToken'
      | 'getUnaccountedFeesForAccountForPeriod'
      | 'getUnassignedRewards'
      | 'isResolverCached'
      | 'lastPauseTime'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'paused'
      | 'rebuildCache'
      | 'recordExchangeFeeForAccount'
      | 'recoverAssignedRewardTokensAndDestroyPeriod'
      | 'recoverTokens'
      | 'recoverUnassignedRewardTokens'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'setPaused'
      | 'setPeriodController'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsForPeriod',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsForPeriods',
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'closeCurrentPeriodWithRewards',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getAvailableRewards', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAvailableRewardsForAccountForPeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAvailableRewardsForAccountForPeriods',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'getCurrentPeriod', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPeriodAvailableRewards',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getPeriodController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPeriodIsClaimable',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPeriodIsFinalized',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPeriodRecordedFees',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPeriodTotalRewards',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getRewardsToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getUnaccountedFeesForAccountForPeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getUnassignedRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPauseTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recordExchangeFeeForAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'recoverAssignedRewardTokensAndDestroyPeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'recoverTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'recoverUnassignedRewardTokens',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setPeriodController',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsForPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsForPeriods', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeCurrentPeriodWithRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAvailableRewards', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAvailableRewardsForAccountForPeriod',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAvailableRewardsForAccountForPeriods',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getCurrentPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodAvailableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodIsClaimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodIsFinalized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodRecordedFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPeriodTotalRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getUnaccountedFeesForAccountForPeriod',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getUnassignedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPauseTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recordExchangeFeeForAccount', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'recoverAssignedRewardTokensAndDestroyPeriod',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverUnassignedRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPeriodController', data: BytesLike): Result;

  events: {
    'AssignedRewardTokensRecovered(address,uint256,uint256)': EventFragment;
    'CacheUpdated(bytes32,address)': EventFragment;
    'ExchangeFeeRecorded(address,uint256,uint256)': EventFragment;
    'NewPeriodStarted(uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'PauseChanged(bool)': EventFragment;
    'PeriodControllerChanged(address)': EventFragment;
    'PeriodFinalizedWithRewards(uint256,uint256)': EventFragment;
    'RewardsClaimed(address,uint256,uint256)': EventFragment;
    'TokensRecovered(address,address,uint256)': EventFragment;
    'UnassignedRewardTokensRecovered(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssignedRewardTokensRecovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExchangeFeeRecorded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPeriodStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PeriodControllerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PeriodFinalizedWithRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensRecovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnassignedRewardTokensRecovered'): EventFragment;
}

export interface AssignedRewardTokensRecoveredEventObject {
  recoverAddress: string;
  amount: BigNumber;
  periodID: BigNumber;
}
export type AssignedRewardTokensRecoveredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AssignedRewardTokensRecoveredEventObject
>;

export type AssignedRewardTokensRecoveredEventFilter =
  TypedEventFilter<AssignedRewardTokensRecoveredEvent>;

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface ExchangeFeeRecordedEventObject {
  account: string;
  amount: BigNumber;
  periodID: BigNumber;
}
export type ExchangeFeeRecordedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ExchangeFeeRecordedEventObject
>;

export type ExchangeFeeRecordedEventFilter = TypedEventFilter<ExchangeFeeRecordedEvent>;

export interface NewPeriodStartedEventObject {
  periodID: BigNumber;
}
export type NewPeriodStartedEvent = TypedEvent<[BigNumber], NewPeriodStartedEventObject>;

export type NewPeriodStartedEventFilter = TypedEventFilter<NewPeriodStartedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PauseChangedEventObject {
  isPaused: boolean;
}
export type PauseChangedEvent = TypedEvent<[boolean], PauseChangedEventObject>;

export type PauseChangedEventFilter = TypedEventFilter<PauseChangedEvent>;

export interface PeriodControllerChangedEventObject {
  newPeriodController: string;
}
export type PeriodControllerChangedEvent = TypedEvent<[string], PeriodControllerChangedEventObject>;

export type PeriodControllerChangedEventFilter = TypedEventFilter<PeriodControllerChangedEvent>;

export interface PeriodFinalizedWithRewardsEventObject {
  periodID: BigNumber;
  rewards: BigNumber;
}
export type PeriodFinalizedWithRewardsEvent = TypedEvent<
  [BigNumber, BigNumber],
  PeriodFinalizedWithRewardsEventObject
>;

export type PeriodFinalizedWithRewardsEventFilter =
  TypedEventFilter<PeriodFinalizedWithRewardsEvent>;

export interface RewardsClaimedEventObject {
  account: string;
  amount: BigNumber;
  periodID: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokensRecoveredEventObject {
  tokenAddress: string;
  recoverAddress: string;
  amount: BigNumber;
}
export type TokensRecoveredEvent = TypedEvent<
  [string, string, BigNumber],
  TokensRecoveredEventObject
>;

export type TokensRecoveredEventFilter = TypedEventFilter<TokensRecoveredEvent>;

export interface UnassignedRewardTokensRecoveredEventObject {
  recoverAddress: string;
  amount: BigNumber;
}
export type UnassignedRewardTokensRecoveredEvent = TypedEvent<
  [string, BigNumber],
  UnassignedRewardTokensRecoveredEventObject
>;

export type UnassignedRewardTokensRecoveredEventFilter =
  TypedEventFilter<UnassignedRewardTokensRecoveredEvent>;

export interface TradingRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardsForPeriod(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardsForPeriods(
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeCurrentPeriodWithRewards(
      rewards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableRewardsForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableRewardsForAccountForPeriods(
      account: PromiseOrValue<string>,
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalRewards: BigNumber }>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPeriodAvailableRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodController(overrides?: CallOverrides): Promise<[string]>;

    getPeriodIsClaimable(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPeriodIsFinalized(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPeriodRecordedFees(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodTotalRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsToken(overrides?: CallOverrides): Promise<[string]>;

    getUnaccountedFeesForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnassignedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordExchangeFeeForAccount(
      usdFeeAmount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverAssignedRewardTokensAndDestroyPeriod(
      recoverAddress: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverUnassignedRewardTokens(
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeriodController(
      newPeriodController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardsForPeriod(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardsForPeriods(
    periodIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeCurrentPeriodWithRewards(
    rewards: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableRewardsForAccountForPeriod(
    account: PromiseOrValue<string>,
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableRewardsForAccountForPeriods(
    account: PromiseOrValue<string>,
    periodIDs: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getPeriodAvailableRewards(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodController(overrides?: CallOverrides): Promise<string>;

  getPeriodIsClaimable(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPeriodIsFinalized(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPeriodRecordedFees(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodTotalRewards(
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsToken(overrides?: CallOverrides): Promise<string>;

  getUnaccountedFeesForAccountForPeriod(
    account: PromiseOrValue<string>,
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnassignedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordExchangeFeeForAccount(
    usdFeeAmount: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverAssignedRewardTokensAndDestroyPeriod(
    recoverAddress: PromiseOrValue<string>,
    periodID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverTokens(
    tokenAddress: PromiseOrValue<string>,
    recoverAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverUnassignedRewardTokens(
    recoverAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeriodController(
    newPeriodController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    claimRewardsForPeriod(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardsForPeriods(
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeCurrentPeriodWithRewards(
      rewards: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableRewardsForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableRewardsForAccountForPeriods(
      account: PromiseOrValue<string>,
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodAvailableRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodController(overrides?: CallOverrides): Promise<string>;

    getPeriodIsClaimable(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPeriodIsFinalized(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPeriodRecordedFees(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTotalRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsToken(overrides?: CallOverrides): Promise<string>;

    getUnaccountedFeesForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnassignedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    recordExchangeFeeForAccount(
      usdFeeAmount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverAssignedRewardTokensAndDestroyPeriod(
      recoverAddress: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      recoverAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverUnassignedRewardTokens(
      recoverAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setPeriodController(
      newPeriodController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AssignedRewardTokensRecovered(address,uint256,uint256)'(
      recoverAddress?: null,
      amount?: null,
      periodID?: null
    ): AssignedRewardTokensRecoveredEventFilter;
    AssignedRewardTokensRecovered(
      recoverAddress?: null,
      amount?: null,
      periodID?: null
    ): AssignedRewardTokensRecoveredEventFilter;

    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'ExchangeFeeRecorded(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      periodID?: null
    ): ExchangeFeeRecordedEventFilter;
    ExchangeFeeRecorded(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      periodID?: null
    ): ExchangeFeeRecordedEventFilter;

    'NewPeriodStarted(uint256)'(periodID?: null): NewPeriodStartedEventFilter;
    NewPeriodStarted(periodID?: null): NewPeriodStartedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'PauseChanged(bool)'(isPaused?: null): PauseChangedEventFilter;
    PauseChanged(isPaused?: null): PauseChangedEventFilter;

    'PeriodControllerChanged(address)'(
      newPeriodController?: null
    ): PeriodControllerChangedEventFilter;
    PeriodControllerChanged(newPeriodController?: null): PeriodControllerChangedEventFilter;

    'PeriodFinalizedWithRewards(uint256,uint256)'(
      periodID?: null,
      rewards?: null
    ): PeriodFinalizedWithRewardsEventFilter;
    PeriodFinalizedWithRewards(
      periodID?: null,
      rewards?: null
    ): PeriodFinalizedWithRewardsEventFilter;

    'RewardsClaimed(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      periodID?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      periodID?: null
    ): RewardsClaimedEventFilter;

    'TokensRecovered(address,address,uint256)'(
      tokenAddress?: null,
      recoverAddress?: null,
      amount?: null
    ): TokensRecoveredEventFilter;
    TokensRecovered(
      tokenAddress?: null,
      recoverAddress?: null,
      amount?: null
    ): TokensRecoveredEventFilter;

    'UnassignedRewardTokensRecovered(address,uint256)'(
      recoverAddress?: null,
      amount?: null
    ): UnassignedRewardTokensRecoveredEventFilter;
    UnassignedRewardTokensRecovered(
      recoverAddress?: null,
      amount?: null
    ): UnassignedRewardTokensRecoveredEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimRewardsForPeriod(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardsForPeriods(
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeCurrentPeriodWithRewards(
      rewards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableRewardsForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableRewardsForAccountForPeriods(
      account: PromiseOrValue<string>,
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodAvailableRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodController(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodIsClaimable(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodIsFinalized(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodRecordedFees(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTotalRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUnaccountedFeesForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnassignedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    recordExchangeFeeForAccount(
      usdFeeAmount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverAssignedRewardTokensAndDestroyPeriod(
      recoverAddress: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverUnassignedRewardTokens(
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeriodController(
      newPeriodController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardsForPeriod(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardsForPeriods(
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeCurrentPeriodWithRewards(
      rewards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableRewardsForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableRewardsForAccountForPeriods(
      account: PromiseOrValue<string>,
      periodIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriodAvailableRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriodIsClaimable(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodIsFinalized(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodRecordedFees(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodTotalRewards(
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnaccountedFeesForAccountForPeriod(
      account: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnassignedRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordExchangeFeeForAccount(
      usdFeeAmount: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverAssignedRewardTokensAndDestroyPeriod(
      recoverAddress: PromiseOrValue<string>,
      periodID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverUnassignedRewardTokens(
      recoverAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeriodController(
      newPeriodController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
