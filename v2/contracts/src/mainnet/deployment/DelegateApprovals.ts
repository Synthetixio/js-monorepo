// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'DelegateApprovals';
export const address = '0x15fd6e554874B9e70F832Ed37f231Ac5E142362f';
export const source = 'DelegateApprovals';
export const abi = [
  'function canIssueFor(address authoriser, address delegate) view returns (bool)',
  'function nominateNewOwner(address _owner)',
  'function canClaimFor(address authoriser, address delegate) view returns (bool)',
  'function ISSUE_FOR_ADDRESS() view returns (bytes32)',
  'function approveClaimOnBehalf(address delegate)',
  'function removeIssueOnBehalf(address delegate)',
  'function approveExchangeOnBehalf(address delegate)',
  'function nominatedOwner() view returns (address)',
  'function removeBurnOnBehalf(address delegate)',
  'function removeClaimOnBehalf(address delegate)',
  'function removeAllDelegatePowers(address delegate)',
  'function acceptOwnership()',
  'function canBurnFor(address authoriser, address delegate) view returns (bool)',
  'function owner() view returns (address)',
  'function eternalStorage() view returns (address)',
  'function approveBurnOnBehalf(address delegate)',
  'function APPROVE_ALL() view returns (bytes32)',
  'function approveIssueOnBehalf(address delegate)',
  'function approvedAll(address authoriser, address delegate) view returns (bool)',
  'function setEternalStorage(address _eternalStorage)',
  'function removeExchangeOnBehalf(address delegate)',
  'function approveAllDelegatePowers(address delegate)',
  'function CLAIM_FOR_ADDRESS() view returns (bytes32)',
  'function EXCHANGE_FOR_ADDRESS() view returns (bytes32)',
  'function BURN_FOR_ADDRESS() view returns (bytes32)',
  'function canExchangeFor(address authoriser, address delegate) view returns (bool)',
  'constructor(address _owner, address _eternalStorage)',
  'event Approval(address indexed authoriser, address delegate, bytes32 action)',
  'event WithdrawApproval(address indexed authoriser, address delegate, bytes32 action)',
  'event EternalStorageUpdated(address newEternalStorage)',
  'event OwnerNominated(address newOwner)',
  'event OwnerChanged(address oldOwner, address newOwner)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface DelegateApprovalsInterface extends utils.Interface {
  functions: {
    'canIssueFor(address,address)': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'canClaimFor(address,address)': FunctionFragment;
    'ISSUE_FOR_ADDRESS()': FunctionFragment;
    'approveClaimOnBehalf(address)': FunctionFragment;
    'removeIssueOnBehalf(address)': FunctionFragment;
    'approveExchangeOnBehalf(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'removeBurnOnBehalf(address)': FunctionFragment;
    'removeClaimOnBehalf(address)': FunctionFragment;
    'removeAllDelegatePowers(address)': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'canBurnFor(address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'eternalStorage()': FunctionFragment;
    'approveBurnOnBehalf(address)': FunctionFragment;
    'APPROVE_ALL()': FunctionFragment;
    'approveIssueOnBehalf(address)': FunctionFragment;
    'approvedAll(address,address)': FunctionFragment;
    'setEternalStorage(address)': FunctionFragment;
    'removeExchangeOnBehalf(address)': FunctionFragment;
    'approveAllDelegatePowers(address)': FunctionFragment;
    'CLAIM_FOR_ADDRESS()': FunctionFragment;
    'EXCHANGE_FOR_ADDRESS()': FunctionFragment;
    'BURN_FOR_ADDRESS()': FunctionFragment;
    'canExchangeFor(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'canIssueFor'
      | 'nominateNewOwner'
      | 'canClaimFor'
      | 'ISSUE_FOR_ADDRESS'
      | 'approveClaimOnBehalf'
      | 'removeIssueOnBehalf'
      | 'approveExchangeOnBehalf'
      | 'nominatedOwner'
      | 'removeBurnOnBehalf'
      | 'removeClaimOnBehalf'
      | 'removeAllDelegatePowers'
      | 'acceptOwnership'
      | 'canBurnFor'
      | 'owner'
      | 'eternalStorage'
      | 'approveBurnOnBehalf'
      | 'APPROVE_ALL'
      | 'approveIssueOnBehalf'
      | 'approvedAll'
      | 'setEternalStorage'
      | 'removeExchangeOnBehalf'
      | 'approveAllDelegatePowers'
      | 'CLAIM_FOR_ADDRESS'
      | 'EXCHANGE_FOR_ADDRESS'
      | 'BURN_FOR_ADDRESS'
      | 'canExchangeFor'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'canIssueFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'canClaimFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'ISSUE_FOR_ADDRESS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approveClaimOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeIssueOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approveExchangeOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeBurnOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeClaimOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAllDelegatePowers',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'canBurnFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'eternalStorage', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approveBurnOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'APPROVE_ALL', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approveIssueOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setEternalStorage',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeExchangeOnBehalf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approveAllDelegatePowers',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'CLAIM_FOR_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'EXCHANGE_FOR_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BURN_FOR_ADDRESS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'canExchangeFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'canIssueFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canClaimFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ISSUE_FOR_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveClaimOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeIssueOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveExchangeOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeBurnOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeClaimOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAllDelegatePowers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canBurnFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eternalStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveBurnOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'APPROVE_ALL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveIssueOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEternalStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeExchangeOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveAllDelegatePowers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CLAIM_FOR_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'EXCHANGE_FOR_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BURN_FOR_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canExchangeFor', data: BytesLike): Result;

  events: {
    'Approval(address,address,bytes32)': EventFragment;
    'WithdrawApproval(address,address,bytes32)': EventFragment;
    'EternalStorageUpdated(address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawApproval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EternalStorageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
}

export interface ApprovalEventObject {
  authoriser: string;
  delegate: string;
  action: string;
}
export type ApprovalEvent = TypedEvent<[string, string, string], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface WithdrawApprovalEventObject {
  authoriser: string;
  delegate: string;
  action: string;
}
export type WithdrawApprovalEvent = TypedEvent<
  [string, string, string],
  WithdrawApprovalEventObject
>;

export type WithdrawApprovalEventFilter = TypedEventFilter<WithdrawApprovalEvent>;

export interface EternalStorageUpdatedEventObject {
  newEternalStorage: string;
}
export type EternalStorageUpdatedEvent = TypedEvent<[string], EternalStorageUpdatedEventObject>;

export type EternalStorageUpdatedEventFilter = TypedEventFilter<EternalStorageUpdatedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface DelegateApprovals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelegateApprovalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canIssueFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canClaimFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ISSUE_FOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    approveClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    removeBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canBurnFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    eternalStorage(overrides?: CallOverrides): Promise<[string]>;

    approveBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    APPROVE_ALL(overrides?: CallOverrides): Promise<[string]>;

    approveIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedAll(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setEternalStorage(
      _eternalStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CLAIM_FOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    EXCHANGE_FOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    BURN_FOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    canExchangeFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  canIssueFor(
    authoriser: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canClaimFor(
    authoriser: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ISSUE_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  approveClaimOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeIssueOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveExchangeOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  removeBurnOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeClaimOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAllDelegatePowers(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canBurnFor(
    authoriser: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  eternalStorage(overrides?: CallOverrides): Promise<string>;

  approveBurnOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  APPROVE_ALL(overrides?: CallOverrides): Promise<string>;

  approveIssueOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedAll(
    authoriser: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setEternalStorage(
    _eternalStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeExchangeOnBehalf(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveAllDelegatePowers(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CLAIM_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  BURN_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  canExchangeFor(
    authoriser: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    canIssueFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    canClaimFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ISSUE_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    approveClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeIssueOnBehalf(delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    approveExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    removeBurnOnBehalf(delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeClaimOnBehalf(delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    canBurnFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    eternalStorage(overrides?: CallOverrides): Promise<string>;

    approveBurnOnBehalf(delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    APPROVE_ALL(overrides?: CallOverrides): Promise<string>;

    approveIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedAll(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEternalStorage(
      _eternalStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    CLAIM_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    BURN_FOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    canExchangeFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,bytes32)'(
      authoriser?: PromiseOrValue<string> | null,
      delegate?: null,
      action?: null
    ): ApprovalEventFilter;
    Approval(
      authoriser?: PromiseOrValue<string> | null,
      delegate?: null,
      action?: null
    ): ApprovalEventFilter;

    'WithdrawApproval(address,address,bytes32)'(
      authoriser?: PromiseOrValue<string> | null,
      delegate?: null,
      action?: null
    ): WithdrawApprovalEventFilter;
    WithdrawApproval(
      authoriser?: PromiseOrValue<string> | null,
      delegate?: null,
      action?: null
    ): WithdrawApprovalEventFilter;

    'EternalStorageUpdated(address)'(newEternalStorage?: null): EternalStorageUpdatedEventFilter;
    EternalStorageUpdated(newEternalStorage?: null): EternalStorageUpdatedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
  };

  estimateGas: {
    canIssueFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canClaimFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ISSUE_FOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    approveClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    removeBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    canBurnFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    eternalStorage(overrides?: CallOverrides): Promise<BigNumber>;

    approveBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    APPROVE_ALL(overrides?: CallOverrides): Promise<BigNumber>;

    approveIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedAll(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEternalStorage(
      _eternalStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CLAIM_FOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_FOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_FOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    canExchangeFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canIssueFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canClaimFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ISSUE_FOR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeClaimOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canBurnFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eternalStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveBurnOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    APPROVE_ALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveIssueOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedAll(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEternalStorage(
      _eternalStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeExchangeOnBehalf(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveAllDelegatePowers(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CLAIM_FOR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXCHANGE_FOR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BURN_FOR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canExchangeFor(
      authoriser: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
