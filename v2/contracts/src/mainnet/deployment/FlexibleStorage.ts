// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'FlexibleStorage';
export const address = '0xc757aCBa3c0506218b3022266a9DC7F3612d85f5';
export const source = 'FlexibleStorage';
export const abi = [
  'constructor(address _resolver)',
  'event KeyMigrated(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)',
  'event ValueDeletedAddress(bytes32 contractName, bytes32 record, address value)',
  'event ValueDeletedBool(bytes32 contractName, bytes32 record, bool value)',
  'event ValueDeletedBytes32(bytes32 contractName, bytes32 record, bytes32 value)',
  'event ValueDeletedInt(bytes32 contractName, bytes32 record, int256 value)',
  'event ValueDeletedUInt(bytes32 contractName, bytes32 record, uint256 value)',
  'event ValueSetAddress(bytes32 contractName, bytes32 record, address value)',
  'event ValueSetBool(bytes32 contractName, bytes32 record, bool value)',
  'event ValueSetBytes32(bytes32 contractName, bytes32 record, bytes32 value)',
  'event ValueSetInt(bytes32 contractName, bytes32 record, int256 value)',
  'event ValueSetUInt(bytes32 contractName, bytes32 record, uint256 value)',
  'function deleteAddressValue(bytes32 contractName, bytes32 record)',
  'function deleteBoolValue(bytes32 contractName, bytes32 record)',
  'function deleteBytes32Value(bytes32 contractName, bytes32 record)',
  'function deleteIntValue(bytes32 contractName, bytes32 record)',
  'function deleteUIntValue(bytes32 contractName, bytes32 record)',
  'function getAddressValue(bytes32 contractName, bytes32 record) view returns (address)',
  'function getAddressValues(bytes32 contractName, bytes32[] records) view returns (address[])',
  'function getBoolValue(bytes32 contractName, bytes32 record) view returns (bool)',
  'function getBoolValues(bytes32 contractName, bytes32[] records) view returns (bool[])',
  'function getBytes32Value(bytes32 contractName, bytes32 record) view returns (bytes32)',
  'function getBytes32Values(bytes32 contractName, bytes32[] records) view returns (bytes32[])',
  'function getIntValue(bytes32 contractName, bytes32 record) view returns (int256)',
  'function getIntValues(bytes32 contractName, bytes32[] records) view returns (int256[])',
  'function getUIntValue(bytes32 contractName, bytes32 record) view returns (uint256)',
  'function getUIntValues(bytes32 contractName, bytes32[] records) view returns (uint256[])',
  'function hashes(bytes32) view returns (bytes32)',
  'function migrateContractKey(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)',
  'function resolverProxy() view returns (address)',
  'function setAddressValue(bytes32 contractName, bytes32 record, address value)',
  'function setAddressValues(bytes32 contractName, bytes32[] records, address[] values)',
  'function setBoolValue(bytes32 contractName, bytes32 record, bool value)',
  'function setBoolValues(bytes32 contractName, bytes32[] records, bool[] values)',
  'function setBytes32Value(bytes32 contractName, bytes32 record, bytes32 value)',
  'function setBytes32Values(bytes32 contractName, bytes32[] records, bytes32[] values)',
  'function setIntValue(bytes32 contractName, bytes32 record, int256 value)',
  'function setIntValues(bytes32 contractName, bytes32[] records, int256[] values)',
  'function setUIntValue(bytes32 contractName, bytes32 record, uint256 value)',
  'function setUIntValues(bytes32 contractName, bytes32[] records, uint256[] values)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface FlexibleStorageInterface extends utils.Interface {
  functions: {
    'deleteAddressValue(bytes32,bytes32)': FunctionFragment;
    'deleteBoolValue(bytes32,bytes32)': FunctionFragment;
    'deleteBytes32Value(bytes32,bytes32)': FunctionFragment;
    'deleteIntValue(bytes32,bytes32)': FunctionFragment;
    'deleteUIntValue(bytes32,bytes32)': FunctionFragment;
    'getAddressValue(bytes32,bytes32)': FunctionFragment;
    'getAddressValues(bytes32,bytes32[])': FunctionFragment;
    'getBoolValue(bytes32,bytes32)': FunctionFragment;
    'getBoolValues(bytes32,bytes32[])': FunctionFragment;
    'getBytes32Value(bytes32,bytes32)': FunctionFragment;
    'getBytes32Values(bytes32,bytes32[])': FunctionFragment;
    'getIntValue(bytes32,bytes32)': FunctionFragment;
    'getIntValues(bytes32,bytes32[])': FunctionFragment;
    'getUIntValue(bytes32,bytes32)': FunctionFragment;
    'getUIntValues(bytes32,bytes32[])': FunctionFragment;
    'hashes(bytes32)': FunctionFragment;
    'migrateContractKey(bytes32,bytes32,bool)': FunctionFragment;
    'resolverProxy()': FunctionFragment;
    'setAddressValue(bytes32,bytes32,address)': FunctionFragment;
    'setAddressValues(bytes32,bytes32[],address[])': FunctionFragment;
    'setBoolValue(bytes32,bytes32,bool)': FunctionFragment;
    'setBoolValues(bytes32,bytes32[],bool[])': FunctionFragment;
    'setBytes32Value(bytes32,bytes32,bytes32)': FunctionFragment;
    'setBytes32Values(bytes32,bytes32[],bytes32[])': FunctionFragment;
    'setIntValue(bytes32,bytes32,int256)': FunctionFragment;
    'setIntValues(bytes32,bytes32[],int256[])': FunctionFragment;
    'setUIntValue(bytes32,bytes32,uint256)': FunctionFragment;
    'setUIntValues(bytes32,bytes32[],uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deleteAddressValue'
      | 'deleteBoolValue'
      | 'deleteBytes32Value'
      | 'deleteIntValue'
      | 'deleteUIntValue'
      | 'getAddressValue'
      | 'getAddressValues'
      | 'getBoolValue'
      | 'getBoolValues'
      | 'getBytes32Value'
      | 'getBytes32Values'
      | 'getIntValue'
      | 'getIntValues'
      | 'getUIntValue'
      | 'getUIntValues'
      | 'hashes'
      | 'migrateContractKey'
      | 'resolverProxy'
      | 'setAddressValue'
      | 'setAddressValues'
      | 'setBoolValue'
      | 'setBoolValues'
      | 'setBytes32Value'
      | 'setBytes32Values'
      | 'setIntValue'
      | 'setIntValues'
      | 'setUIntValue'
      | 'setUIntValues'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deleteAddressValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deleteBoolValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deleteBytes32Value',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deleteIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deleteUIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddressValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddressValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBoolValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBoolValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBytes32Value',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBytes32Values',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getIntValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUIntValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'hashes', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'migrateContractKey',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'resolverProxy', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAddressValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddressValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBoolValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBoolValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBytes32Value',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBytes32Values',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIntValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUIntValue',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUIntValues',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: 'deleteAddressValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteBoolValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteBytes32Value', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deleteUIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAddressValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAddressValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBoolValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBoolValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBytes32Value', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBytes32Values', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIntValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUIntValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hashes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateContractKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddressValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddressValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoolValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoolValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBytes32Value', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBytes32Values', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIntValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUIntValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUIntValues', data: BytesLike): Result;

  events: {
    'KeyMigrated(bytes32,bytes32,bool)': EventFragment;
    'ValueDeletedAddress(bytes32,bytes32,address)': EventFragment;
    'ValueDeletedBool(bytes32,bytes32,bool)': EventFragment;
    'ValueDeletedBytes32(bytes32,bytes32,bytes32)': EventFragment;
    'ValueDeletedInt(bytes32,bytes32,int256)': EventFragment;
    'ValueDeletedUInt(bytes32,bytes32,uint256)': EventFragment;
    'ValueSetAddress(bytes32,bytes32,address)': EventFragment;
    'ValueSetBool(bytes32,bytes32,bool)': EventFragment;
    'ValueSetBytes32(bytes32,bytes32,bytes32)': EventFragment;
    'ValueSetInt(bytes32,bytes32,int256)': EventFragment;
    'ValueSetUInt(bytes32,bytes32,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'KeyMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueDeletedAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueDeletedBool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueDeletedBytes32'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueDeletedInt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueDeletedUInt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueSetAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueSetBool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueSetBytes32'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueSetInt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValueSetUInt'): EventFragment;
}

export interface KeyMigratedEventObject {
  fromContractName: string;
  toContractName: string;
  removeAccessFromPreviousContract: boolean;
}
export type KeyMigratedEvent = TypedEvent<[string, string, boolean], KeyMigratedEventObject>;

export type KeyMigratedEventFilter = TypedEventFilter<KeyMigratedEvent>;

export interface ValueDeletedAddressEventObject {
  contractName: string;
  record: string;
  value: string;
}
export type ValueDeletedAddressEvent = TypedEvent<
  [string, string, string],
  ValueDeletedAddressEventObject
>;

export type ValueDeletedAddressEventFilter = TypedEventFilter<ValueDeletedAddressEvent>;

export interface ValueDeletedBoolEventObject {
  contractName: string;
  record: string;
  value: boolean;
}
export type ValueDeletedBoolEvent = TypedEvent<
  [string, string, boolean],
  ValueDeletedBoolEventObject
>;

export type ValueDeletedBoolEventFilter = TypedEventFilter<ValueDeletedBoolEvent>;

export interface ValueDeletedBytes32EventObject {
  contractName: string;
  record: string;
  value: string;
}
export type ValueDeletedBytes32Event = TypedEvent<
  [string, string, string],
  ValueDeletedBytes32EventObject
>;

export type ValueDeletedBytes32EventFilter = TypedEventFilter<ValueDeletedBytes32Event>;

export interface ValueDeletedIntEventObject {
  contractName: string;
  record: string;
  value: BigNumber;
}
export type ValueDeletedIntEvent = TypedEvent<
  [string, string, BigNumber],
  ValueDeletedIntEventObject
>;

export type ValueDeletedIntEventFilter = TypedEventFilter<ValueDeletedIntEvent>;

export interface ValueDeletedUIntEventObject {
  contractName: string;
  record: string;
  value: BigNumber;
}
export type ValueDeletedUIntEvent = TypedEvent<
  [string, string, BigNumber],
  ValueDeletedUIntEventObject
>;

export type ValueDeletedUIntEventFilter = TypedEventFilter<ValueDeletedUIntEvent>;

export interface ValueSetAddressEventObject {
  contractName: string;
  record: string;
  value: string;
}
export type ValueSetAddressEvent = TypedEvent<[string, string, string], ValueSetAddressEventObject>;

export type ValueSetAddressEventFilter = TypedEventFilter<ValueSetAddressEvent>;

export interface ValueSetBoolEventObject {
  contractName: string;
  record: string;
  value: boolean;
}
export type ValueSetBoolEvent = TypedEvent<[string, string, boolean], ValueSetBoolEventObject>;

export type ValueSetBoolEventFilter = TypedEventFilter<ValueSetBoolEvent>;

export interface ValueSetBytes32EventObject {
  contractName: string;
  record: string;
  value: string;
}
export type ValueSetBytes32Event = TypedEvent<[string, string, string], ValueSetBytes32EventObject>;

export type ValueSetBytes32EventFilter = TypedEventFilter<ValueSetBytes32Event>;

export interface ValueSetIntEventObject {
  contractName: string;
  record: string;
  value: BigNumber;
}
export type ValueSetIntEvent = TypedEvent<[string, string, BigNumber], ValueSetIntEventObject>;

export type ValueSetIntEventFilter = TypedEventFilter<ValueSetIntEvent>;

export interface ValueSetUIntEventObject {
  contractName: string;
  record: string;
  value: BigNumber;
}
export type ValueSetUIntEvent = TypedEvent<[string, string, BigNumber], ValueSetUIntEventObject>;

export type ValueSetUIntEventFilter = TypedEventFilter<ValueSetUIntEvent>;

export interface FlexibleStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlexibleStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deleteAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    getBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    hashes(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    migrateContractKey(
      fromContractName: PromiseOrValue<BytesLike>,
      toContractName: PromiseOrValue<BytesLike>,
      removeAccessFromPreviousContract: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolverProxy(overrides?: CallOverrides): Promise<[string]>;

    setAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deleteAddressValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteBoolValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteBytes32Value(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteUIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddressValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBoolValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBoolValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  getBytes32Value(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBytes32Values(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIntValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUIntValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hashes(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  migrateContractKey(
    fromContractName: PromiseOrValue<BytesLike>,
    toContractName: PromiseOrValue<BytesLike>,
    removeAccessFromPreviousContract: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolverProxy(overrides?: CallOverrides): Promise<string>;

  setAddressValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddressValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBoolValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBoolValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBytes32Value(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBytes32Values(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIntValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUIntValue(
    contractName: PromiseOrValue<BytesLike>,
    record: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUIntValues(
    contractName: PromiseOrValue<BytesLike>,
    records: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deleteAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hashes(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    migrateContractKey(
      fromContractName: PromiseOrValue<BytesLike>,
      toContractName: PromiseOrValue<BytesLike>,
      removeAccessFromPreviousContract: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolverProxy(overrides?: CallOverrides): Promise<string>;

    setAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'KeyMigrated(bytes32,bytes32,bool)'(
      fromContractName?: null,
      toContractName?: null,
      removeAccessFromPreviousContract?: null
    ): KeyMigratedEventFilter;
    KeyMigrated(
      fromContractName?: null,
      toContractName?: null,
      removeAccessFromPreviousContract?: null
    ): KeyMigratedEventFilter;

    'ValueDeletedAddress(bytes32,bytes32,address)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedAddressEventFilter;
    ValueDeletedAddress(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedAddressEventFilter;

    'ValueDeletedBool(bytes32,bytes32,bool)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedBoolEventFilter;
    ValueDeletedBool(contractName?: null, record?: null, value?: null): ValueDeletedBoolEventFilter;

    'ValueDeletedBytes32(bytes32,bytes32,bytes32)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedBytes32EventFilter;
    ValueDeletedBytes32(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedBytes32EventFilter;

    'ValueDeletedInt(bytes32,bytes32,int256)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedIntEventFilter;
    ValueDeletedInt(contractName?: null, record?: null, value?: null): ValueDeletedIntEventFilter;

    'ValueDeletedUInt(bytes32,bytes32,uint256)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueDeletedUIntEventFilter;
    ValueDeletedUInt(contractName?: null, record?: null, value?: null): ValueDeletedUIntEventFilter;

    'ValueSetAddress(bytes32,bytes32,address)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueSetAddressEventFilter;
    ValueSetAddress(contractName?: null, record?: null, value?: null): ValueSetAddressEventFilter;

    'ValueSetBool(bytes32,bytes32,bool)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueSetBoolEventFilter;
    ValueSetBool(contractName?: null, record?: null, value?: null): ValueSetBoolEventFilter;

    'ValueSetBytes32(bytes32,bytes32,bytes32)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueSetBytes32EventFilter;
    ValueSetBytes32(contractName?: null, record?: null, value?: null): ValueSetBytes32EventFilter;

    'ValueSetInt(bytes32,bytes32,int256)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueSetIntEventFilter;
    ValueSetInt(contractName?: null, record?: null, value?: null): ValueSetIntEventFilter;

    'ValueSetUInt(bytes32,bytes32,uint256)'(
      contractName?: null,
      record?: null,
      value?: null
    ): ValueSetUIntEventFilter;
    ValueSetUInt(contractName?: null, record?: null, value?: null): ValueSetUIntEventFilter;
  };

  estimateGas: {
    deleteAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashes(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    migrateContractKey(
      fromContractName: PromiseOrValue<BytesLike>,
      toContractName: PromiseOrValue<BytesLike>,
      removeAccessFromPreviousContract: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolverProxy(overrides?: CallOverrides): Promise<BigNumber>;

    setAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deleteAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateContractKey(
      fromContractName: PromiseOrValue<BytesLike>,
      toContractName: PromiseOrValue<BytesLike>,
      removeAccessFromPreviousContract: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolverProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddressValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddressValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBoolValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBoolValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBytes32Value(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBytes32Values(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUIntValue(
      contractName: PromiseOrValue<BytesLike>,
      record: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUIntValues(
      contractName: PromiseOrValue<BytesLike>,
      records: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
