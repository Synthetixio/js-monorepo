// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class AggregatorAdded extends ethereum.Event {
  get params(): AggregatorAdded__Params {
    return new AggregatorAdded__Params(this);
  }
}

export class AggregatorAdded__Params {
  _event: AggregatorAdded;

  constructor(event: AggregatorAdded) {
    this._event = event;
  }

  get currencyKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get aggregator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AggregatorRemoved extends ethereum.Event {
  get params(): AggregatorRemoved__Params {
    return new AggregatorRemoved__Params(this);
  }
}

export class AggregatorRemoved__Params {
  _event: AggregatorRemoved;

  constructor(event: AggregatorRemoved) {
    this._event = event;
  }

  get currencyKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get aggregator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CacheUpdated extends ethereum.Event {
  get params(): CacheUpdated__Params {
    return new CacheUpdated__Params(this);
  }
}

export class CacheUpdated__Params {
  _event: CacheUpdated;

  constructor(event: CacheUpdated) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExchangeRates__effectiveAtomicValueAndRatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getSystemValue(): BigInt {
    return this.value1;
  }

  getSystemSourceRate(): BigInt {
    return this.value2;
  }

  getSystemDestinationRate(): BigInt {
    return this.value3;
  }
}

export class ExchangeRates__effectiveAtomicValueAndRates1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getSystemValue(): BigInt {
    return this.value1;
  }

  getSystemSourceRate(): BigInt {
    return this.value2;
  }

  getSystemDestinationRate(): BigInt {
    return this.value3;
  }
}

export class ExchangeRates__effectiveAtomicValueAndRates1InputParam0Struct extends ethereum.Tuple {
  get currencyKey(): Bytes {
    return this[0].toBytes();
  }

  get dexPriceAggregator(): Address {
    return this[1].toAddress();
  }

  get atomicEquivalentForDexPricing(): Address {
    return this[2].toAddress();
  }

  get atomicExchangeFeeRate(): BigInt {
    return this[3].toBigInt();
  }

  get atomicTwapWindow(): BigInt {
    return this[4].toBigInt();
  }

  get atomicMaxVolumePerBlock(): BigInt {
    return this[5].toBigInt();
  }

  get atomicVolatilityConsiderationWindow(): BigInt {
    return this[6].toBigInt();
  }

  get atomicVolatilityUpdateThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get exchangeFeeRate(): BigInt {
    return this[8].toBigInt();
  }

  get exchangeMaxDynamicFee(): BigInt {
    return this[9].toBigInt();
  }

  get exchangeDynamicFeeRounds(): BigInt {
    return this[10].toBigInt();
  }

  get exchangeDynamicFeeThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get exchangeDynamicFeeWeightDecay(): BigInt {
    return this[12].toBigInt();
  }
}

export class ExchangeRates__effectiveAtomicValueAndRates1InputParam2Struct extends ethereum.Tuple {
  get currencyKey(): Bytes {
    return this[0].toBytes();
  }

  get dexPriceAggregator(): Address {
    return this[1].toAddress();
  }

  get atomicEquivalentForDexPricing(): Address {
    return this[2].toAddress();
  }

  get atomicExchangeFeeRate(): BigInt {
    return this[3].toBigInt();
  }

  get atomicTwapWindow(): BigInt {
    return this[4].toBigInt();
  }

  get atomicMaxVolumePerBlock(): BigInt {
    return this[5].toBigInt();
  }

  get atomicVolatilityConsiderationWindow(): BigInt {
    return this[6].toBigInt();
  }

  get atomicVolatilityUpdateThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get exchangeFeeRate(): BigInt {
    return this[8].toBigInt();
  }

  get exchangeMaxDynamicFee(): BigInt {
    return this[9].toBigInt();
  }

  get exchangeDynamicFeeRounds(): BigInt {
    return this[10].toBigInt();
  }

  get exchangeDynamicFeeThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get exchangeDynamicFeeWeightDecay(): BigInt {
    return this[12].toBigInt();
  }
}

export class ExchangeRates__effectiveAtomicValueAndRates1InputParam3Struct extends ethereum.Tuple {
  get currencyKey(): Bytes {
    return this[0].toBytes();
  }

  get dexPriceAggregator(): Address {
    return this[1].toAddress();
  }

  get atomicEquivalentForDexPricing(): Address {
    return this[2].toAddress();
  }

  get atomicExchangeFeeRate(): BigInt {
    return this[3].toBigInt();
  }

  get atomicTwapWindow(): BigInt {
    return this[4].toBigInt();
  }

  get atomicMaxVolumePerBlock(): BigInt {
    return this[5].toBigInt();
  }

  get atomicVolatilityConsiderationWindow(): BigInt {
    return this[6].toBigInt();
  }

  get atomicVolatilityUpdateThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get exchangeFeeRate(): BigInt {
    return this[8].toBigInt();
  }

  get exchangeMaxDynamicFee(): BigInt {
    return this[9].toBigInt();
  }

  get exchangeDynamicFeeRounds(): BigInt {
    return this[10].toBigInt();
  }

  get exchangeDynamicFeeThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get exchangeDynamicFeeWeightDecay(): BigInt {
    return this[12].toBigInt();
  }
}

export class ExchangeRates__effectiveValueAndRatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getSourceRate(): BigInt {
    return this.value1;
  }

  getDestinationRate(): BigInt {
    return this.value2;
  }
}

export class ExchangeRates__effectiveValueAndRatesAtRoundResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getSourceRate(): BigInt {
    return this.value1;
  }

  getDestinationRate(): BigInt {
    return this.value2;
  }
}

export class ExchangeRates__rateAndInvalidResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getRate(): BigInt {
    return this.value0;
  }

  getIsInvalid(): boolean {
    return this.value1;
  }
}

export class ExchangeRates__rateAndTimestampAtRoundResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRate(): BigInt {
    return this.value0;
  }

  getTime(): BigInt {
    return this.value1;
  }
}

export class ExchangeRates__rateAndUpdatedTimeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRate(): BigInt {
    return this.value0;
  }

  getTime(): BigInt {
    return this.value1;
  }
}

export class ExchangeRates__rateWithSafetyChecksResult {
  value0: BigInt;
  value1: boolean;
  value2: boolean;

  constructor(value0: BigInt, value1: boolean, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromBoolean(this.value1));
    map.set('value2', ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getRate(): BigInt {
    return this.value0;
  }

  getBroken(): boolean {
    return this.value1;
  }

  getStaleOrInvalid(): boolean {
    return this.value2;
  }
}

export class ExchangeRates__ratesAndInvalidForCurrenciesResult {
  value0: Array<BigInt>;
  value1: boolean;

  constructor(value0: Array<BigInt>, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set('value1', ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getRates(): Array<BigInt> {
    return this.value0;
  }

  getAnyRateInvalid(): boolean {
    return this.value1;
  }
}

export class ExchangeRates__ratesAndUpdatedTimeForCurrencyLastNRoundsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRates(): Array<BigInt> {
    return this.value0;
  }

  getTimes(): Array<BigInt> {
    return this.value1;
  }
}

export class ExchangeRates__synthTooVolatileForAtomicExchange1InputParam0Struct extends ethereum.Tuple {
  get currencyKey(): Bytes {
    return this[0].toBytes();
  }

  get dexPriceAggregator(): Address {
    return this[1].toAddress();
  }

  get atomicEquivalentForDexPricing(): Address {
    return this[2].toAddress();
  }

  get atomicExchangeFeeRate(): BigInt {
    return this[3].toBigInt();
  }

  get atomicTwapWindow(): BigInt {
    return this[4].toBigInt();
  }

  get atomicMaxVolumePerBlock(): BigInt {
    return this[5].toBigInt();
  }

  get atomicVolatilityConsiderationWindow(): BigInt {
    return this[6].toBigInt();
  }

  get atomicVolatilityUpdateThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get exchangeFeeRate(): BigInt {
    return this[8].toBigInt();
  }

  get exchangeMaxDynamicFee(): BigInt {
    return this[9].toBigInt();
  }

  get exchangeDynamicFeeRounds(): BigInt {
    return this[10].toBigInt();
  }

  get exchangeDynamicFeeThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get exchangeDynamicFeeWeightDecay(): BigInt {
    return this[12].toBigInt();
  }
}

export class ExchangeRates extends ethereum.SmartContract {
  static bind(address: Address): ExchangeRates {
    return new ExchangeRates('ExchangeRates', address);
  }

  CONTRACT_NAME(): Bytes {
    let result = super.call('CONTRACT_NAME', 'CONTRACT_NAME():(bytes32)', []);

    return result[0].toBytes();
  }

  try_CONTRACT_NAME(): ethereum.CallResult<Bytes> {
    let result = super.tryCall('CONTRACT_NAME', 'CONTRACT_NAME():(bytes32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  aggregatorKeys(param0: BigInt): Bytes {
    let result = super.call('aggregatorKeys', 'aggregatorKeys(uint256):(bytes32)', [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_aggregatorKeys(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall('aggregatorKeys', 'aggregatorKeys(uint256):(bytes32)', [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  aggregatorWarningFlags(): Address {
    let result = super.call('aggregatorWarningFlags', 'aggregatorWarningFlags():(address)', []);

    return result[0].toAddress();
  }

  try_aggregatorWarningFlags(): ethereum.CallResult<Address> {
    let result = super.tryCall('aggregatorWarningFlags', 'aggregatorWarningFlags():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aggregators(param0: Bytes): Address {
    let result = super.call('aggregators', 'aggregators(bytes32):(address)', [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toAddress();
  }

  try_aggregators(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall('aggregators', 'aggregators(bytes32):(address)', [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  anyRateIsInvalid(currencyKeys: Array<Bytes>): boolean {
    let result = super.call('anyRateIsInvalid', 'anyRateIsInvalid(bytes32[]):(bool)', [
      ethereum.Value.fromFixedBytesArray(currencyKeys),
    ]);

    return result[0].toBoolean();
  }

  try_anyRateIsInvalid(currencyKeys: Array<Bytes>): ethereum.CallResult<boolean> {
    let result = super.tryCall('anyRateIsInvalid', 'anyRateIsInvalid(bytes32[]):(bool)', [
      ethereum.Value.fromFixedBytesArray(currencyKeys),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  anyRateIsInvalidAtRound(currencyKeys: Array<Bytes>, roundIds: Array<BigInt>): boolean {
    let result = super.call(
      'anyRateIsInvalidAtRound',
      'anyRateIsInvalidAtRound(bytes32[],uint256[]):(bool)',
      [
        ethereum.Value.fromFixedBytesArray(currencyKeys),
        ethereum.Value.fromUnsignedBigIntArray(roundIds),
      ]
    );

    return result[0].toBoolean();
  }

  try_anyRateIsInvalidAtRound(
    currencyKeys: Array<Bytes>,
    roundIds: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'anyRateIsInvalidAtRound',
      'anyRateIsInvalidAtRound(bytes32[],uint256[]):(bool)',
      [
        ethereum.Value.fromFixedBytesArray(currencyKeys),
        ethereum.Value.fromUnsignedBigIntArray(roundIds),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currenciesUsingAggregator(aggregator: Address): Array<Bytes> {
    let result = super.call(
      'currenciesUsingAggregator',
      'currenciesUsingAggregator(address):(bytes32[])',
      [ethereum.Value.fromAddress(aggregator)]
    );

    return result[0].toBytesArray();
  }

  try_currenciesUsingAggregator(aggregator: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      'currenciesUsingAggregator',
      'currenciesUsingAggregator(address):(bytes32[])',
      [ethereum.Value.fromAddress(aggregator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  currencyKeyDecimals(param0: Bytes): i32 {
    let result = super.call('currencyKeyDecimals', 'currencyKeyDecimals(bytes32):(uint8)', [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toI32();
  }

  try_currencyKeyDecimals(param0: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall('currencyKeyDecimals', 'currencyKeyDecimals(bytes32):(uint8)', [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  effectiveAtomicValueAndRates(
    param0: Bytes,
    param1: BigInt,
    param2: Bytes
  ): ExchangeRates__effectiveAtomicValueAndRatesResult {
    let result = super.call(
      'effectiveAtomicValueAndRates',
      'effectiveAtomicValueAndRates(bytes32,uint256,bytes32):(uint256,uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromFixedBytes(param2),
      ]
    );

    return new ExchangeRates__effectiveAtomicValueAndRatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_effectiveAtomicValueAndRates(
    param0: Bytes,
    param1: BigInt,
    param2: Bytes
  ): ethereum.CallResult<ExchangeRates__effectiveAtomicValueAndRatesResult> {
    let result = super.tryCall(
      'effectiveAtomicValueAndRates',
      'effectiveAtomicValueAndRates(bytes32,uint256,bytes32):(uint256,uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromFixedBytes(param2),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__effectiveAtomicValueAndRatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  effectiveAtomicValueAndRates1(
    param0: ExchangeRates__effectiveAtomicValueAndRates1InputParam0Struct,
    param1: BigInt,
    param2: ExchangeRates__effectiveAtomicValueAndRates1InputParam2Struct,
    param3: ExchangeRates__effectiveAtomicValueAndRates1InputParam3Struct
  ): ExchangeRates__effectiveAtomicValueAndRates1Result {
    let result = super.call(
      'effectiveAtomicValueAndRates',
      'effectiveAtomicValueAndRates((bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256,uint256,uint256)',
      [
        ethereum.Value.fromTuple(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromTuple(param3),
      ]
    );

    return new ExchangeRates__effectiveAtomicValueAndRates1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_effectiveAtomicValueAndRates1(
    param0: ExchangeRates__effectiveAtomicValueAndRates1InputParam0Struct,
    param1: BigInt,
    param2: ExchangeRates__effectiveAtomicValueAndRates1InputParam2Struct,
    param3: ExchangeRates__effectiveAtomicValueAndRates1InputParam3Struct
  ): ethereum.CallResult<ExchangeRates__effectiveAtomicValueAndRates1Result> {
    let result = super.tryCall(
      'effectiveAtomicValueAndRates',
      'effectiveAtomicValueAndRates((bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256,uint256,uint256)',
      [
        ethereum.Value.fromTuple(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromTuple(param2),
        ethereum.Value.fromTuple(param3),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__effectiveAtomicValueAndRates1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  effectiveValue(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes
  ): BigInt {
    let result = super.call('effectiveValue', 'effectiveValue(bytes32,uint256,bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(sourceCurrencyKey),
      ethereum.Value.fromUnsignedBigInt(sourceAmount),
      ethereum.Value.fromFixedBytes(destinationCurrencyKey),
    ]);

    return result[0].toBigInt();
  }

  try_effectiveValue(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'effectiveValue',
      'effectiveValue(bytes32,uint256,bytes32):(uint256)',
      [
        ethereum.Value.fromFixedBytes(sourceCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(sourceAmount),
        ethereum.Value.fromFixedBytes(destinationCurrencyKey),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  effectiveValueAndRates(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes
  ): ExchangeRates__effectiveValueAndRatesResult {
    let result = super.call(
      'effectiveValueAndRates',
      'effectiveValueAndRates(bytes32,uint256,bytes32):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(sourceCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(sourceAmount),
        ethereum.Value.fromFixedBytes(destinationCurrencyKey),
      ]
    );

    return new ExchangeRates__effectiveValueAndRatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_effectiveValueAndRates(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes
  ): ethereum.CallResult<ExchangeRates__effectiveValueAndRatesResult> {
    let result = super.tryCall(
      'effectiveValueAndRates',
      'effectiveValueAndRates(bytes32,uint256,bytes32):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(sourceCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(sourceAmount),
        ethereum.Value.fromFixedBytes(destinationCurrencyKey),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__effectiveValueAndRatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  effectiveValueAndRatesAtRound(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes,
    roundIdForSrc: BigInt,
    roundIdForDest: BigInt
  ): ExchangeRates__effectiveValueAndRatesAtRoundResult {
    let result = super.call(
      'effectiveValueAndRatesAtRound',
      'effectiveValueAndRatesAtRound(bytes32,uint256,bytes32,uint256,uint256):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(sourceCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(sourceAmount),
        ethereum.Value.fromFixedBytes(destinationCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(roundIdForSrc),
        ethereum.Value.fromUnsignedBigInt(roundIdForDest),
      ]
    );

    return new ExchangeRates__effectiveValueAndRatesAtRoundResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_effectiveValueAndRatesAtRound(
    sourceCurrencyKey: Bytes,
    sourceAmount: BigInt,
    destinationCurrencyKey: Bytes,
    roundIdForSrc: BigInt,
    roundIdForDest: BigInt
  ): ethereum.CallResult<ExchangeRates__effectiveValueAndRatesAtRoundResult> {
    let result = super.tryCall(
      'effectiveValueAndRatesAtRound',
      'effectiveValueAndRatesAtRound(bytes32,uint256,bytes32,uint256,uint256):(uint256,uint256,uint256)',
      [
        ethereum.Value.fromFixedBytes(sourceCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(sourceAmount),
        ethereum.Value.fromFixedBytes(destinationCurrencyKey),
        ethereum.Value.fromUnsignedBigInt(roundIdForSrc),
        ethereum.Value.fromUnsignedBigInt(roundIdForDest),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__effectiveValueAndRatesAtRoundResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCurrentRoundId(currencyKey: Bytes): BigInt {
    let result = super.call('getCurrentRoundId', 'getCurrentRoundId(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBigInt();
  }

  try_getCurrentRoundId(currencyKey: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getCurrentRoundId', 'getCurrentRoundId(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastRoundIdBeforeElapsedSecs(
    currencyKey: Bytes,
    startingRoundId: BigInt,
    startingTimestamp: BigInt,
    timediff: BigInt
  ): BigInt {
    let result = super.call(
      'getLastRoundIdBeforeElapsedSecs',
      'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromFixedBytes(currencyKey),
        ethereum.Value.fromUnsignedBigInt(startingRoundId),
        ethereum.Value.fromUnsignedBigInt(startingTimestamp),
        ethereum.Value.fromUnsignedBigInt(timediff),
      ]
    );

    return result[0].toBigInt();
  }

  try_getLastRoundIdBeforeElapsedSecs(
    currencyKey: Bytes,
    startingRoundId: BigInt,
    startingTimestamp: BigInt,
    timediff: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getLastRoundIdBeforeElapsedSecs',
      'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromFixedBytes(currencyKey),
        ethereum.Value.fromUnsignedBigInt(startingRoundId),
        ethereum.Value.fromUnsignedBigInt(startingTimestamp),
        ethereum.Value.fromUnsignedBigInt(timediff),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isResolverCached(): boolean {
    let result = super.call('isResolverCached', 'isResolverCached():(bool)', []);

    return result[0].toBoolean();
  }

  try_isResolverCached(): ethereum.CallResult<boolean> {
    let result = super.tryCall('isResolverCached', 'isResolverCached():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRateUpdateTimes(currencyKey: Bytes): BigInt {
    let result = super.call('lastRateUpdateTimes', 'lastRateUpdateTimes(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBigInt();
  }

  try_lastRateUpdateTimes(currencyKey: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall('lastRateUpdateTimes', 'lastRateUpdateTimes(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRateUpdateTimesForCurrencies(currencyKeys: Array<Bytes>): Array<BigInt> {
    let result = super.call(
      'lastRateUpdateTimesForCurrencies',
      'lastRateUpdateTimesForCurrencies(bytes32[]):(uint256[])',
      [ethereum.Value.fromFixedBytesArray(currencyKeys)]
    );

    return result[0].toBigIntArray();
  }

  try_lastRateUpdateTimesForCurrencies(
    currencyKeys: Array<Bytes>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'lastRateUpdateTimesForCurrencies',
      'lastRateUpdateTimesForCurrencies(bytes32[]):(uint256[])',
      [ethereum.Value.fromFixedBytesArray(currencyKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  nominatedOwner(): Address {
    let result = super.call('nominatedOwner', 'nominatedOwner():(address)', []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall('nominatedOwner', 'nominatedOwner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rateAndInvalid(currencyKey: Bytes): ExchangeRates__rateAndInvalidResult {
    let result = super.call('rateAndInvalid', 'rateAndInvalid(bytes32):(uint256,bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return new ExchangeRates__rateAndInvalidResult(result[0].toBigInt(), result[1].toBoolean());
  }

  try_rateAndInvalid(currencyKey: Bytes): ethereum.CallResult<ExchangeRates__rateAndInvalidResult> {
    let result = super.tryCall('rateAndInvalid', 'rateAndInvalid(bytes32):(uint256,bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__rateAndInvalidResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  rateAndTimestampAtRound(
    currencyKey: Bytes,
    roundId: BigInt
  ): ExchangeRates__rateAndTimestampAtRoundResult {
    let result = super.call(
      'rateAndTimestampAtRound',
      'rateAndTimestampAtRound(bytes32,uint256):(uint256,uint256)',
      [ethereum.Value.fromFixedBytes(currencyKey), ethereum.Value.fromUnsignedBigInt(roundId)]
    );

    return new ExchangeRates__rateAndTimestampAtRoundResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rateAndTimestampAtRound(
    currencyKey: Bytes,
    roundId: BigInt
  ): ethereum.CallResult<ExchangeRates__rateAndTimestampAtRoundResult> {
    let result = super.tryCall(
      'rateAndTimestampAtRound',
      'rateAndTimestampAtRound(bytes32,uint256):(uint256,uint256)',
      [ethereum.Value.fromFixedBytes(currencyKey), ethereum.Value.fromUnsignedBigInt(roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__rateAndTimestampAtRoundResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  rateAndUpdatedTime(currencyKey: Bytes): ExchangeRates__rateAndUpdatedTimeResult {
    let result = super.call('rateAndUpdatedTime', 'rateAndUpdatedTime(bytes32):(uint256,uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return new ExchangeRates__rateAndUpdatedTimeResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_rateAndUpdatedTime(
    currencyKey: Bytes
  ): ethereum.CallResult<ExchangeRates__rateAndUpdatedTimeResult> {
    let result = super.tryCall(
      'rateAndUpdatedTime',
      'rateAndUpdatedTime(bytes32):(uint256,uint256)',
      [ethereum.Value.fromFixedBytes(currencyKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__rateAndUpdatedTimeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  rateForCurrency(currencyKey: Bytes): BigInt {
    let result = super.call('rateForCurrency', 'rateForCurrency(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBigInt();
  }

  try_rateForCurrency(currencyKey: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall('rateForCurrency', 'rateForCurrency(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateIsFlagged(currencyKey: Bytes): boolean {
    let result = super.call('rateIsFlagged', 'rateIsFlagged(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBoolean();
  }

  try_rateIsFlagged(currencyKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('rateIsFlagged', 'rateIsFlagged(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rateIsInvalid(currencyKey: Bytes): boolean {
    let result = super.call('rateIsInvalid', 'rateIsInvalid(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBoolean();
  }

  try_rateIsInvalid(currencyKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('rateIsInvalid', 'rateIsInvalid(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rateIsStale(currencyKey: Bytes): boolean {
    let result = super.call('rateIsStale', 'rateIsStale(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);

    return result[0].toBoolean();
  }

  try_rateIsStale(currencyKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('rateIsStale', 'rateIsStale(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(currencyKey),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rateStalePeriod(): BigInt {
    let result = super.call('rateStalePeriod', 'rateStalePeriod():(uint256)', []);

    return result[0].toBigInt();
  }

  try_rateStalePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('rateStalePeriod', 'rateStalePeriod():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateWithSafetyChecks(currencyKey: Bytes): ExchangeRates__rateWithSafetyChecksResult {
    let result = super.call(
      'rateWithSafetyChecks',
      'rateWithSafetyChecks(bytes32):(uint256,bool,bool)',
      [ethereum.Value.fromFixedBytes(currencyKey)]
    );

    return new ExchangeRates__rateWithSafetyChecksResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBoolean()
    );
  }

  try_rateWithSafetyChecks(
    currencyKey: Bytes
  ): ethereum.CallResult<ExchangeRates__rateWithSafetyChecksResult> {
    let result = super.tryCall(
      'rateWithSafetyChecks',
      'rateWithSafetyChecks(bytes32):(uint256,bool,bool)',
      [ethereum.Value.fromFixedBytes(currencyKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__rateWithSafetyChecksResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBoolean()
      )
    );
  }

  ratesAndInvalidForCurrencies(
    currencyKeys: Array<Bytes>
  ): ExchangeRates__ratesAndInvalidForCurrenciesResult {
    let result = super.call(
      'ratesAndInvalidForCurrencies',
      'ratesAndInvalidForCurrencies(bytes32[]):(uint256[],bool)',
      [ethereum.Value.fromFixedBytesArray(currencyKeys)]
    );

    return new ExchangeRates__ratesAndInvalidForCurrenciesResult(
      result[0].toBigIntArray(),
      result[1].toBoolean()
    );
  }

  try_ratesAndInvalidForCurrencies(
    currencyKeys: Array<Bytes>
  ): ethereum.CallResult<ExchangeRates__ratesAndInvalidForCurrenciesResult> {
    let result = super.tryCall(
      'ratesAndInvalidForCurrencies',
      'ratesAndInvalidForCurrencies(bytes32[]):(uint256[],bool)',
      [ethereum.Value.fromFixedBytesArray(currencyKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__ratesAndInvalidForCurrenciesResult(
        value[0].toBigIntArray(),
        value[1].toBoolean()
      )
    );
  }

  ratesAndUpdatedTimeForCurrencyLastNRounds(
    currencyKey: Bytes,
    numRounds: BigInt,
    roundId: BigInt
  ): ExchangeRates__ratesAndUpdatedTimeForCurrencyLastNRoundsResult {
    let result = super.call(
      'ratesAndUpdatedTimeForCurrencyLastNRounds',
      'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256,uint256):(uint256[],uint256[])',
      [
        ethereum.Value.fromFixedBytes(currencyKey),
        ethereum.Value.fromUnsignedBigInt(numRounds),
        ethereum.Value.fromUnsignedBigInt(roundId),
      ]
    );

    return new ExchangeRates__ratesAndUpdatedTimeForCurrencyLastNRoundsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_ratesAndUpdatedTimeForCurrencyLastNRounds(
    currencyKey: Bytes,
    numRounds: BigInt,
    roundId: BigInt
  ): ethereum.CallResult<ExchangeRates__ratesAndUpdatedTimeForCurrencyLastNRoundsResult> {
    let result = super.tryCall(
      'ratesAndUpdatedTimeForCurrencyLastNRounds',
      'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256,uint256):(uint256[],uint256[])',
      [
        ethereum.Value.fromFixedBytes(currencyKey),
        ethereum.Value.fromUnsignedBigInt(numRounds),
        ethereum.Value.fromUnsignedBigInt(roundId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeRates__ratesAndUpdatedTimeForCurrencyLastNRoundsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  ratesForCurrencies(currencyKeys: Array<Bytes>): Array<BigInt> {
    let result = super.call('ratesForCurrencies', 'ratesForCurrencies(bytes32[]):(uint256[])', [
      ethereum.Value.fromFixedBytesArray(currencyKeys),
    ]);

    return result[0].toBigIntArray();
  }

  try_ratesForCurrencies(currencyKeys: Array<Bytes>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall('ratesForCurrencies', 'ratesForCurrencies(bytes32[]):(uint256[])', [
      ethereum.Value.fromFixedBytesArray(currencyKeys),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  resolver(): Address {
    let result = super.call('resolver', 'resolver():(address)', []);

    return result[0].toAddress();
  }

  try_resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall('resolver', 'resolver():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverAddressesRequired(): Array<Bytes> {
    let result = super.call(
      'resolverAddressesRequired',
      'resolverAddressesRequired():(bytes32[])',
      []
    );

    return result[0].toBytesArray();
  }

  try_resolverAddressesRequired(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      'resolverAddressesRequired',
      'resolverAddressesRequired():(bytes32[])',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  synthTooVolatileForAtomicExchange(param0: Bytes): boolean {
    let result = super.call(
      'synthTooVolatileForAtomicExchange',
      'synthTooVolatileForAtomicExchange(bytes32):(bool)',
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_synthTooVolatileForAtomicExchange(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'synthTooVolatileForAtomicExchange',
      'synthTooVolatileForAtomicExchange(bytes32):(bool)',
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  synthTooVolatileForAtomicExchange1(
    param0: ExchangeRates__synthTooVolatileForAtomicExchange1InputParam0Struct
  ): boolean {
    let result = super.call(
      'synthTooVolatileForAtomicExchange',
      'synthTooVolatileForAtomicExchange((bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)):(bool)',
      [ethereum.Value.fromTuple(param0)]
    );

    return result[0].toBoolean();
  }

  try_synthTooVolatileForAtomicExchange1(
    param0: ExchangeRates__synthTooVolatileForAtomicExchange1InputParam0Struct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'synthTooVolatileForAtomicExchange',
      'synthTooVolatileForAtomicExchange((bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)):(bool)',
      [ethereum.Value.fromTuple(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddAggregatorCall extends ethereum.Call {
  get inputs(): AddAggregatorCall__Inputs {
    return new AddAggregatorCall__Inputs(this);
  }

  get outputs(): AddAggregatorCall__Outputs {
    return new AddAggregatorCall__Outputs(this);
  }
}

export class AddAggregatorCall__Inputs {
  _call: AddAggregatorCall;

  constructor(call: AddAggregatorCall) {
    this._call = call;
  }

  get currencyKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get aggregatorAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAggregatorCall__Outputs {
  _call: AddAggregatorCall;

  constructor(call: AddAggregatorCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class RateWithSafetyChecksCall extends ethereum.Call {
  get inputs(): RateWithSafetyChecksCall__Inputs {
    return new RateWithSafetyChecksCall__Inputs(this);
  }

  get outputs(): RateWithSafetyChecksCall__Outputs {
    return new RateWithSafetyChecksCall__Outputs(this);
  }
}

export class RateWithSafetyChecksCall__Inputs {
  _call: RateWithSafetyChecksCall;

  constructor(call: RateWithSafetyChecksCall) {
    this._call = call;
  }

  get currencyKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RateWithSafetyChecksCall__Outputs {
  _call: RateWithSafetyChecksCall;

  constructor(call: RateWithSafetyChecksCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get broken(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }

  get staleOrInvalid(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class RebuildCacheCall extends ethereum.Call {
  get inputs(): RebuildCacheCall__Inputs {
    return new RebuildCacheCall__Inputs(this);
  }

  get outputs(): RebuildCacheCall__Outputs {
    return new RebuildCacheCall__Outputs(this);
  }
}

export class RebuildCacheCall__Inputs {
  _call: RebuildCacheCall;

  constructor(call: RebuildCacheCall) {
    this._call = call;
  }
}

export class RebuildCacheCall__Outputs {
  _call: RebuildCacheCall;

  constructor(call: RebuildCacheCall) {
    this._call = call;
  }
}

export class RemoveAggregatorCall extends ethereum.Call {
  get inputs(): RemoveAggregatorCall__Inputs {
    return new RemoveAggregatorCall__Inputs(this);
  }

  get outputs(): RemoveAggregatorCall__Outputs {
    return new RemoveAggregatorCall__Outputs(this);
  }
}

export class RemoveAggregatorCall__Inputs {
  _call: RemoveAggregatorCall;

  constructor(call: RemoveAggregatorCall) {
    this._call = call;
  }

  get currencyKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveAggregatorCall__Outputs {
  _call: RemoveAggregatorCall;

  constructor(call: RemoveAggregatorCall) {
    this._call = call;
  }
}
