// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'SafeDecimalMath';
export const address = '0x84D626B2BB4D0F064067e4BF80FCe7055d8F3E7B';
export const source = 'SafeDecimalMath';
export const abi = [
  'function decimals() view returns (uint8)',
  'function PRECISE_UNIT() view returns (uint256)',
  'function unit() pure returns (uint256)',
  'function UNIT() view returns (uint256)',
  'function preciseUnit() pure returns (uint256)',
  'function highPrecisionDecimals() view returns (uint8)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface SafeDecimalMathInterface extends utils.Interface {
  functions: {
    'decimals()': FunctionFragment;
    'PRECISE_UNIT()': FunctionFragment;
    'unit()': FunctionFragment;
    'UNIT()': FunctionFragment;
    'preciseUnit()': FunctionFragment;
    'highPrecisionDecimals()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'decimals'
      | 'PRECISE_UNIT'
      | 'unit'
      | 'UNIT'
      | 'preciseUnit'
      | 'highPrecisionDecimals'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISE_UNIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'preciseUnit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'highPrecisionDecimals', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISE_UNIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'preciseUnit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'highPrecisionDecimals', data: BytesLike): Result;

  events: {};
}

export interface SafeDecimalMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeDecimalMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[number]>;

    PRECISE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    unit(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    preciseUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    highPrecisionDecimals(overrides?: CallOverrides): Promise<[number]>;
  };

  decimals(overrides?: CallOverrides): Promise<number>;

  PRECISE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  unit(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

  highPrecisionDecimals(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<number>;

    PRECISE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    unit(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    highPrecisionDecimals(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    unit(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    preciseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    highPrecisionDecimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preciseUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highPrecisionDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
