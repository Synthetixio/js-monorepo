// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'SynthetixBridgeToOptimism';
export const address = '0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F';
export const source = 'SynthetixBridgeToOptimism';
export const abi = [
  'constructor(address _owner, address _resolver)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event DepositInitiated(address indexed _from, address _to, uint256 _amount)',
  'event ExportedVestingEntries(address indexed account, uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)',
  'event FeePeriodClosed(uint256 snxBackedDebt, uint256 totalDebtShares)',
  'event FinalizeSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)',
  'event InitiateSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)',
  'event InitiationResumed()',
  'event InitiationSuspended()',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'event RewardDepositInitiated(address indexed account, uint256 amount)',
  'event WithdrawalFinalized(address indexed _to, uint256 _amount)',
  'function CONTRACT_NAME() pure returns (bytes32)',
  'function acceptOwnership()',
  'function closeFeePeriod(uint256 snxBackedAmount, uint256 totalDebtShares)',
  'function deposit(uint256 amount)',
  'function depositAndMigrateEscrow(uint256 depositAmount, uint256[][] entryIDs)',
  'function depositReward(uint256 amount)',
  'function depositTo(address to, uint256 amount)',
  'function finalizeSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)',
  'function finalizeWithdrawal(address to, uint256 amount)',
  'function forwardTokensToEscrow(address token)',
  'function initiateSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)',
  'function initiationActive() view returns (bool)',
  'function isResolverCached() view returns (bool)',
  'function migrateEscrow(uint256[][] entryIDs)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function notifyRewardAmount(uint256 amount)',
  'function owner() view returns (address)',
  'function rebuildCache()',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function resumeInitiation()',
  'function suspendInitiation()',
  'function synthTransferReceived() view returns (uint256)',
  'function synthTransferSent() view returns (uint256)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace VestingEntries {
  export type VestingEntryStruct = {
    endTime: PromiseOrValue<BigNumberish>;
    escrowAmount: PromiseOrValue<BigNumberish>;
  };

  export type VestingEntryStructOutput = [BigNumber, BigNumber] & {
    endTime: BigNumber;
    escrowAmount: BigNumber;
  };
}

export interface SynthetixBridgeToOptimismInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'closeFeePeriod(uint256,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositAndMigrateEscrow(uint256,uint256[][])': FunctionFragment;
    'depositReward(uint256)': FunctionFragment;
    'depositTo(address,uint256)': FunctionFragment;
    'finalizeSynthTransfer(bytes32,address,uint256)': FunctionFragment;
    'finalizeWithdrawal(address,uint256)': FunctionFragment;
    'forwardTokensToEscrow(address)': FunctionFragment;
    'initiateSynthTransfer(bytes32,address,uint256)': FunctionFragment;
    'initiationActive()': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'migrateEscrow(uint256[][])': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'notifyRewardAmount(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'resumeInitiation()': FunctionFragment;
    'suspendInitiation()': FunctionFragment;
    'synthTransferReceived()': FunctionFragment;
    'synthTransferSent()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'acceptOwnership'
      | 'closeFeePeriod'
      | 'deposit'
      | 'depositAndMigrateEscrow'
      | 'depositReward'
      | 'depositTo'
      | 'finalizeSynthTransfer'
      | 'finalizeWithdrawal'
      | 'forwardTokensToEscrow'
      | 'initiateSynthTransfer'
      | 'initiationActive'
      | 'isResolverCached'
      | 'migrateEscrow'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'notifyRewardAmount'
      | 'owner'
      | 'rebuildCache'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'resumeInitiation'
      | 'suspendInitiation'
      | 'synthTransferReceived'
      | 'synthTransferSent'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'closeFeePeriod',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositAndMigrateEscrow',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositReward',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeSynthTransfer',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeWithdrawal',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'forwardTokensToEscrow',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateSynthTransfer',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'initiationActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'migrateEscrow',
    values: [PromiseOrValue<BigNumberish>[][]]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'notifyRewardAmount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resumeInitiation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'suspendInitiation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'synthTransferReceived', values?: undefined): string;
  encodeFunctionData(functionFragment: 'synthTransferSent', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFeePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndMigrateEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeSynthTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forwardTokensToEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiateSynthTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiationActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resumeInitiation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'suspendInitiation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthTransferReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthTransferSent', data: BytesLike): Result;

  events: {
    'CacheUpdated(bytes32,address)': EventFragment;
    'DepositInitiated(address,address,uint256)': EventFragment;
    'ExportedVestingEntries(address,uint256,tuple[])': EventFragment;
    'FeePeriodClosed(uint256,uint256)': EventFragment;
    'FinalizeSynthTransfer(bytes32,address,uint256)': EventFragment;
    'InitiateSynthTransfer(bytes32,address,uint256)': EventFragment;
    'InitiationResumed()': EventFragment;
    'InitiationSuspended()': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'RewardDepositInitiated(address,uint256)': EventFragment;
    'WithdrawalFinalized(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositInitiated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExportedVestingEntries'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeePeriodClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FinalizeSynthTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiateSynthTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiationResumed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiationSuspended'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardDepositInitiated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalFinalized'): EventFragment;
}

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface DepositInitiatedEventObject {
  _from: string;
  _to: string;
  _amount: BigNumber;
}
export type DepositInitiatedEvent = TypedEvent<
  [string, string, BigNumber],
  DepositInitiatedEventObject
>;

export type DepositInitiatedEventFilter = TypedEventFilter<DepositInitiatedEvent>;

export interface ExportedVestingEntriesEventObject {
  account: string;
  escrowedAccountBalance: BigNumber;
  vestingEntries: VestingEntries.VestingEntryStructOutput[];
}
export type ExportedVestingEntriesEvent = TypedEvent<
  [string, BigNumber, VestingEntries.VestingEntryStructOutput[]],
  ExportedVestingEntriesEventObject
>;

export type ExportedVestingEntriesEventFilter = TypedEventFilter<ExportedVestingEntriesEvent>;

export interface FeePeriodClosedEventObject {
  snxBackedDebt: BigNumber;
  totalDebtShares: BigNumber;
}
export type FeePeriodClosedEvent = TypedEvent<[BigNumber, BigNumber], FeePeriodClosedEventObject>;

export type FeePeriodClosedEventFilter = TypedEventFilter<FeePeriodClosedEvent>;

export interface FinalizeSynthTransferEventObject {
  currencyKey: string;
  destination: string;
  amount: BigNumber;
}
export type FinalizeSynthTransferEvent = TypedEvent<
  [string, string, BigNumber],
  FinalizeSynthTransferEventObject
>;

export type FinalizeSynthTransferEventFilter = TypedEventFilter<FinalizeSynthTransferEvent>;

export interface InitiateSynthTransferEventObject {
  currencyKey: string;
  destination: string;
  amount: BigNumber;
}
export type InitiateSynthTransferEvent = TypedEvent<
  [string, string, BigNumber],
  InitiateSynthTransferEventObject
>;

export type InitiateSynthTransferEventFilter = TypedEventFilter<InitiateSynthTransferEvent>;

export interface InitiationResumedEventObject {}
export type InitiationResumedEvent = TypedEvent<[], InitiationResumedEventObject>;

export type InitiationResumedEventFilter = TypedEventFilter<InitiationResumedEvent>;

export interface InitiationSuspendedEventObject {}
export type InitiationSuspendedEvent = TypedEvent<[], InitiationSuspendedEventObject>;

export type InitiationSuspendedEventFilter = TypedEventFilter<InitiationSuspendedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface RewardDepositInitiatedEventObject {
  account: string;
  amount: BigNumber;
}
export type RewardDepositInitiatedEvent = TypedEvent<
  [string, BigNumber],
  RewardDepositInitiatedEventObject
>;

export type RewardDepositInitiatedEventFilter = TypedEventFilter<RewardDepositInitiatedEvent>;

export interface WithdrawalFinalizedEventObject {
  _to: string;
  _amount: BigNumber;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, BigNumber],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter = TypedEventFilter<WithdrawalFinalizedEvent>;

export interface SynthetixBridgeToOptimism extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthetixBridgeToOptimismInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeFeePeriod(
      snxBackedAmount: PromiseOrValue<BigNumberish>,
      totalDebtShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndMigrateEscrow(
      depositAmount: PromiseOrValue<BigNumberish>,
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeWithdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forwardTokensToEscrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiationActive(overrides?: CallOverrides): Promise<[boolean]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    migrateEscrow(
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    resumeInitiation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendInitiation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    synthTransferReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    synthTransferSent(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeFeePeriod(
    snxBackedAmount: PromiseOrValue<BigNumberish>,
    totalDebtShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndMigrateEscrow(
    depositAmount: PromiseOrValue<BigNumberish>,
    entryIDs: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositReward(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeSynthTransfer(
    currencyKey: PromiseOrValue<BytesLike>,
    destination: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeWithdrawal(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forwardTokensToEscrow(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateSynthTransfer(
    currencyKey: PromiseOrValue<BytesLike>,
    destination: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiationActive(overrides?: CallOverrides): Promise<boolean>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  migrateEscrow(
    entryIDs: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  resumeInitiation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendInitiation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  synthTransferReceived(overrides?: CallOverrides): Promise<BigNumber>;

  synthTransferSent(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    closeFeePeriod(
      snxBackedAmount: PromiseOrValue<BigNumberish>,
      totalDebtShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositAndMigrateEscrow(
      depositAmount: PromiseOrValue<BigNumberish>,
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    depositReward(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardTokensToEscrow(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    initiateSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiationActive(overrides?: CallOverrides): Promise<boolean>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    migrateEscrow(
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    resumeInitiation(overrides?: CallOverrides): Promise<void>;

    suspendInitiation(overrides?: CallOverrides): Promise<void>;

    synthTransferReceived(overrides?: CallOverrides): Promise<BigNumber>;

    synthTransferSent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'DepositInitiated(address,address,uint256)'(
      _from?: PromiseOrValue<string> | null,
      _to?: null,
      _amount?: null
    ): DepositInitiatedEventFilter;
    DepositInitiated(
      _from?: PromiseOrValue<string> | null,
      _to?: null,
      _amount?: null
    ): DepositInitiatedEventFilter;

    'ExportedVestingEntries(address,uint256,tuple[])'(
      account?: PromiseOrValue<string> | null,
      escrowedAccountBalance?: null,
      vestingEntries?: null
    ): ExportedVestingEntriesEventFilter;
    ExportedVestingEntries(
      account?: PromiseOrValue<string> | null,
      escrowedAccountBalance?: null,
      vestingEntries?: null
    ): ExportedVestingEntriesEventFilter;

    'FeePeriodClosed(uint256,uint256)'(
      snxBackedDebt?: null,
      totalDebtShares?: null
    ): FeePeriodClosedEventFilter;
    FeePeriodClosed(snxBackedDebt?: null, totalDebtShares?: null): FeePeriodClosedEventFilter;

    'FinalizeSynthTransfer(bytes32,address,uint256)'(
      currencyKey?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): FinalizeSynthTransferEventFilter;
    FinalizeSynthTransfer(
      currencyKey?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): FinalizeSynthTransferEventFilter;

    'InitiateSynthTransfer(bytes32,address,uint256)'(
      currencyKey?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): InitiateSynthTransferEventFilter;
    InitiateSynthTransfer(
      currencyKey?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): InitiateSynthTransferEventFilter;

    'InitiationResumed()'(): InitiationResumedEventFilter;
    InitiationResumed(): InitiationResumedEventFilter;

    'InitiationSuspended()'(): InitiationSuspendedEventFilter;
    InitiationSuspended(): InitiationSuspendedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'RewardDepositInitiated(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardDepositInitiatedEventFilter;
    RewardDepositInitiated(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardDepositInitiatedEventFilter;

    'WithdrawalFinalized(address,uint256)'(
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawalFinalizedEventFilter;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    closeFeePeriod(
      snxBackedAmount: PromiseOrValue<BigNumberish>,
      totalDebtShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndMigrateEscrow(
      depositAmount: PromiseOrValue<BigNumberish>,
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeWithdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forwardTokensToEscrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiationActive(overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    migrateEscrow(
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    resumeInitiation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    suspendInitiation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    synthTransferReceived(overrides?: CallOverrides): Promise<BigNumber>;

    synthTransferSent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeFeePeriod(
      snxBackedAmount: PromiseOrValue<BigNumberish>,
      totalDebtShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndMigrateEscrow(
      depositAmount: PromiseOrValue<BigNumberish>,
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositReward(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forwardTokensToEscrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateSynthTransfer(
      currencyKey: PromiseOrValue<BytesLike>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiationActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateEscrow(
      entryIDs: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resumeInitiation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendInitiation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    synthTransferReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synthTransferSent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
