/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface RewardsDistributionInterface extends utils.Interface {
  functions: {
    'distributionsLength()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'distributions(uint256)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'distributeRewards(uint256)': FunctionFragment;
    'setRewardEscrow(address)': FunctionFragment;
    'addRewardDistribution(address,uint256)': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'setAuthority(address)': FunctionFragment;
    'removeRewardDistribution(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'setSynthetixProxy(address)': FunctionFragment;
    'rewardEscrow()': FunctionFragment;
    'synthetixProxy()': FunctionFragment;
    'authority()': FunctionFragment;
    'feePoolProxy()': FunctionFragment;
    'setFeePoolProxy(address)': FunctionFragment;
    'editRewardDistribution(uint256,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'distributionsLength'
      | 'nominateNewOwner'
      | 'distributions'
      | 'nominatedOwner'
      | 'distributeRewards'
      | 'setRewardEscrow'
      | 'addRewardDistribution'
      | 'acceptOwnership'
      | 'setAuthority'
      | 'removeRewardDistribution'
      | 'owner'
      | 'setSynthetixProxy'
      | 'rewardEscrow'
      | 'synthetixProxy'
      | 'authority'
      | 'feePoolProxy'
      | 'setFeePoolProxy'
      | 'editRewardDistribution'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'distributionsLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'distributions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'distributeRewards',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setRewardEscrow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addRewardDistribution',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAuthority', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'removeRewardDistribution',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setSynthetixProxy',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'rewardEscrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'synthetixProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feePoolProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFeePoolProxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'editRewardDistribution',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'distributionsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRewardDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSynthetixProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthetixProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePoolProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeePoolProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'editRewardDistribution', data: BytesLike): Result;

  events: {
    'RewardDistributionAdded(uint256,address,uint256)': EventFragment;
    'RewardsDistributed(uint256)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RewardDistributionAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
}

export interface RewardDistributionAddedEventObject {
  index: BigNumber;
  destination: string;
  amount: BigNumber;
}
export type RewardDistributionAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RewardDistributionAddedEventObject
>;

export type RewardDistributionAddedEventFilter = TypedEventFilter<RewardDistributionAddedEvent>;

export interface RewardsDistributedEventObject {
  amount: BigNumber;
}
export type RewardsDistributedEvent = TypedEvent<[BigNumber], RewardsDistributedEventObject>;

export type RewardsDistributedEventFilter = TypedEventFilter<RewardsDistributedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface RewardsDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsDistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distributionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { destination: string; amount: BigNumber }>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardEscrow(
      _rewardEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewardDistribution(
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      _authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setSynthetixProxy(
      _synthetixProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardEscrow(overrides?: CallOverrides): Promise<[string]>;

    synthetixProxy(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    feePoolProxy(overrides?: CallOverrides): Promise<[string]>;

    setFeePoolProxy(
      _feePoolProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { destination: string; amount: BigNumber }>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  distributeRewards(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardEscrow(
    _rewardEscrow: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewardDistribution(
    destination: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    _authority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRewardDistribution(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setSynthetixProxy(
    _synthetixProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardEscrow(overrides?: CallOverrides): Promise<string>;

  synthetixProxy(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  feePoolProxy(overrides?: CallOverrides): Promise<string>;

  setFeePoolProxy(
    _feePoolProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editRewardDistribution(
    index: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { destination: string; amount: BigNumber }>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRewardEscrow(
      _rewardEscrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardDistribution(
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    setAuthority(_authority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setSynthetixProxy(
      _synthetixProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardEscrow(overrides?: CallOverrides): Promise<string>;

    synthetixProxy(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    feePoolProxy(overrides?: CallOverrides): Promise<string>;

    setFeePoolProxy(
      _feePoolProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    'RewardDistributionAdded(uint256,address,uint256)'(
      index?: null,
      destination?: null,
      amount?: null
    ): RewardDistributionAddedEventFilter;
    RewardDistributionAdded(
      index?: null,
      destination?: null,
      amount?: null
    ): RewardDistributionAddedEventFilter;

    'RewardsDistributed(uint256)'(amount?: null): RewardsDistributedEventFilter;
    RewardsDistributed(amount?: null): RewardsDistributedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
  };

  estimateGas: {
    distributionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardEscrow(
      _rewardEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewardDistribution(
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAuthority(
      _authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setSynthetixProxy(
      _synthetixProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    synthetixProxy(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    feePoolProxy(overrides?: CallOverrides): Promise<BigNumber>;

    setFeePoolProxy(
      _feePoolProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardEscrow(
      _rewardEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewardDistribution(
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSynthetixProxy(
      _synthetixProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synthetixProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePoolProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeePoolProxy(
      _feePoolProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editRewardDistribution(
      index: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
