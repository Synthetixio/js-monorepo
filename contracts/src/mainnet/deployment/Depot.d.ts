/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface DepotInterface extends utils.Interface {
  functions: {
    'exchangeEtherForSNX()': FunctionFragment;
    'resolver()': FunctionFragment;
    'minimumDepositAmount()': FunctionFragment;
    'exchangeEtherForSynthsAtRate(uint256)': FunctionFragment;
    'synthsReceivedForEther(uint256)': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'initiationTime()': FunctionFragment;
    'exchangeEtherForSynths()': FunctionFragment;
    'setSelfDestructBeneficiary(address)': FunctionFragment;
    'fundsWallet()': FunctionFragment;
    'terminateSelfDestruct()': FunctionFragment;
    'totalSellableDeposits()': FunctionFragment;
    'setResolver(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'paused()': FunctionFragment;
    'setFundsWallet(address)': FunctionFragment;
    'depositStartIndex()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'withdrawMyDepositedSynths()': FunctionFragment;
    'owner()': FunctionFragment;
    'lastPauseTime()': FunctionFragment;
    'exchangeEtherForSNXAtRate(uint256,uint256)': FunctionFragment;
    'selfDestruct()': FunctionFragment;
    'synthetixReceivedForSynths(uint256)': FunctionFragment;
    'SELFDESTRUCT_DELAY()': FunctionFragment;
    'setMinimumDepositAmount(uint256)': FunctionFragment;
    'deposits(uint256)': FunctionFragment;
    'exchangeSynthsForSNXAtRate(uint256,uint256)': FunctionFragment;
    'maxEthPurchase()': FunctionFragment;
    'selfDestructInitiated()': FunctionFragment;
    'setMaxEthPurchase(uint256)': FunctionFragment;
    'initiateSelfDestruct()': FunctionFragment;
    'selfDestructBeneficiary()': FunctionFragment;
    'smallDeposits(address)': FunctionFragment;
    'synthetixReceivedForEther(uint256)': FunctionFragment;
    'depositSynths(uint256)': FunctionFragment;
    'withdrawSynthetix(uint256)': FunctionFragment;
    'exchangeSynthsForSNX(uint256)': FunctionFragment;
    'depositEndIndex()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'exchangeEtherForSNX'
      | 'resolver'
      | 'minimumDepositAmount'
      | 'exchangeEtherForSynthsAtRate'
      | 'synthsReceivedForEther'
      | 'nominateNewOwner'
      | 'setPaused'
      | 'initiationTime'
      | 'exchangeEtherForSynths'
      | 'setSelfDestructBeneficiary'
      | 'fundsWallet'
      | 'terminateSelfDestruct'
      | 'totalSellableDeposits'
      | 'setResolver'
      | 'nominatedOwner'
      | 'paused'
      | 'setFundsWallet'
      | 'depositStartIndex'
      | 'acceptOwnership'
      | 'withdrawMyDepositedSynths'
      | 'owner'
      | 'lastPauseTime'
      | 'exchangeEtherForSNXAtRate'
      | 'selfDestruct'
      | 'synthetixReceivedForSynths'
      | 'SELFDESTRUCT_DELAY'
      | 'setMinimumDepositAmount'
      | 'deposits'
      | 'exchangeSynthsForSNXAtRate'
      | 'maxEthPurchase'
      | 'selfDestructInitiated'
      | 'setMaxEthPurchase'
      | 'initiateSelfDestruct'
      | 'selfDestructBeneficiary'
      | 'smallDeposits'
      | 'synthetixReceivedForEther'
      | 'depositSynths'
      | 'withdrawSynthetix'
      | 'exchangeSynthsForSNX'
      | 'depositEndIndex'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'exchangeEtherForSNX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minimumDepositAmount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'exchangeEtherForSynthsAtRate',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'synthsReceivedForEther',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'initiationTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeEtherForSynths', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setSelfDestructBeneficiary',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'fundsWallet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'terminateSelfDestruct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSellableDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setResolver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFundsWallet', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'depositStartIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawMyDepositedSynths', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPauseTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'exchangeEtherForSNXAtRate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'selfDestruct', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'synthetixReceivedForSynths',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'SELFDESTRUCT_DELAY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setMinimumDepositAmount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'deposits', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'exchangeSynthsForSNXAtRate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'maxEthPurchase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'selfDestructInitiated', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setMaxEthPurchase',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'initiateSelfDestruct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'selfDestructBeneficiary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'smallDeposits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'synthetixReceivedForEther',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositSynths',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawSynthetix',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangeSynthsForSNX',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'depositEndIndex', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'exchangeEtherForSNX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimumDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeEtherForSynthsAtRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthsReceivedForEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeEtherForSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSelfDestructBeneficiary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundsWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminateSelfDestruct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSellableDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setResolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFundsWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositStartIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawMyDepositedSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPauseTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeEtherForSNXAtRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'selfDestruct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthetixReceivedForSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SELFDESTRUCT_DELAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinimumDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeSynthsForSNXAtRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxEthPurchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'selfDestructInitiated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxEthPurchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiateSelfDestruct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'selfDestructBeneficiary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'smallDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthetixReceivedForEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSynths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSynthetix', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeSynthsForSNX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositEndIndex', data: BytesLike): Result;

  events: {
    'MaxEthPurchaseUpdated(uint256)': EventFragment;
    'FundsWalletUpdated(address)': EventFragment;
    'Exchange(string,uint256,string,uint256)': EventFragment;
    'SynthWithdrawal(address,uint256)': EventFragment;
    'SynthDeposit(address,uint256,uint256)': EventFragment;
    'SynthDepositRemoved(address,uint256,uint256)': EventFragment;
    'SynthDepositNotAccepted(address,uint256,uint256)': EventFragment;
    'MinimumDepositAmountUpdated(uint256)': EventFragment;
    'NonPayableContract(address,uint256)': EventFragment;
    'ClearedDeposit(address,address,uint256,uint256,uint256)': EventFragment;
    'PauseChanged(bool)': EventFragment;
    'SelfDestructTerminated()': EventFragment;
    'SelfDestructed(address)': EventFragment;
    'SelfDestructInitiated(uint256)': EventFragment;
    'SelfDestructBeneficiaryUpdated(address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MaxEthPurchaseUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundsWalletUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exchange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthDepositRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthDepositNotAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumDepositAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NonPayableContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClearedDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SelfDestructTerminated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SelfDestructed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SelfDestructInitiated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SelfDestructBeneficiaryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
}

export interface MaxEthPurchaseUpdatedEventObject {
  amount: BigNumber;
}
export type MaxEthPurchaseUpdatedEvent = TypedEvent<[BigNumber], MaxEthPurchaseUpdatedEventObject>;

export type MaxEthPurchaseUpdatedEventFilter = TypedEventFilter<MaxEthPurchaseUpdatedEvent>;

export interface FundsWalletUpdatedEventObject {
  newFundsWallet: string;
}
export type FundsWalletUpdatedEvent = TypedEvent<[string], FundsWalletUpdatedEventObject>;

export type FundsWalletUpdatedEventFilter = TypedEventFilter<FundsWalletUpdatedEvent>;

export interface ExchangeEventObject {
  fromCurrency: string;
  fromAmount: BigNumber;
  toCurrency: string;
  toAmount: BigNumber;
}
export type ExchangeEvent = TypedEvent<[string, BigNumber, string, BigNumber], ExchangeEventObject>;

export type ExchangeEventFilter = TypedEventFilter<ExchangeEvent>;

export interface SynthWithdrawalEventObject {
  user: string;
  amount: BigNumber;
}
export type SynthWithdrawalEvent = TypedEvent<[string, BigNumber], SynthWithdrawalEventObject>;

export type SynthWithdrawalEventFilter = TypedEventFilter<SynthWithdrawalEvent>;

export interface SynthDepositEventObject {
  user: string;
  amount: BigNumber;
  depositIndex: BigNumber;
}
export type SynthDepositEvent = TypedEvent<[string, BigNumber, BigNumber], SynthDepositEventObject>;

export type SynthDepositEventFilter = TypedEventFilter<SynthDepositEvent>;

export interface SynthDepositRemovedEventObject {
  user: string;
  amount: BigNumber;
  depositIndex: BigNumber;
}
export type SynthDepositRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SynthDepositRemovedEventObject
>;

export type SynthDepositRemovedEventFilter = TypedEventFilter<SynthDepositRemovedEvent>;

export interface SynthDepositNotAcceptedEventObject {
  user: string;
  amount: BigNumber;
  minimum: BigNumber;
}
export type SynthDepositNotAcceptedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SynthDepositNotAcceptedEventObject
>;

export type SynthDepositNotAcceptedEventFilter = TypedEventFilter<SynthDepositNotAcceptedEvent>;

export interface MinimumDepositAmountUpdatedEventObject {
  amount: BigNumber;
}
export type MinimumDepositAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  MinimumDepositAmountUpdatedEventObject
>;

export type MinimumDepositAmountUpdatedEventFilter =
  TypedEventFilter<MinimumDepositAmountUpdatedEvent>;

export interface NonPayableContractEventObject {
  receiver: string;
  amount: BigNumber;
}
export type NonPayableContractEvent = TypedEvent<
  [string, BigNumber],
  NonPayableContractEventObject
>;

export type NonPayableContractEventFilter = TypedEventFilter<NonPayableContractEvent>;

export interface ClearedDepositEventObject {
  fromAddress: string;
  toAddress: string;
  fromETHAmount: BigNumber;
  toAmount: BigNumber;
  depositIndex: BigNumber;
}
export type ClearedDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ClearedDepositEventObject
>;

export type ClearedDepositEventFilter = TypedEventFilter<ClearedDepositEvent>;

export interface PauseChangedEventObject {
  isPaused: boolean;
}
export type PauseChangedEvent = TypedEvent<[boolean], PauseChangedEventObject>;

export type PauseChangedEventFilter = TypedEventFilter<PauseChangedEvent>;

export interface SelfDestructTerminatedEventObject {}
export type SelfDestructTerminatedEvent = TypedEvent<[], SelfDestructTerminatedEventObject>;

export type SelfDestructTerminatedEventFilter = TypedEventFilter<SelfDestructTerminatedEvent>;

export interface SelfDestructedEventObject {
  beneficiary: string;
}
export type SelfDestructedEvent = TypedEvent<[string], SelfDestructedEventObject>;

export type SelfDestructedEventFilter = TypedEventFilter<SelfDestructedEvent>;

export interface SelfDestructInitiatedEventObject {
  selfDestructDelay: BigNumber;
}
export type SelfDestructInitiatedEvent = TypedEvent<[BigNumber], SelfDestructInitiatedEventObject>;

export type SelfDestructInitiatedEventFilter = TypedEventFilter<SelfDestructInitiatedEvent>;

export interface SelfDestructBeneficiaryUpdatedEventObject {
  newBeneficiary: string;
}
export type SelfDestructBeneficiaryUpdatedEvent = TypedEvent<
  [string],
  SelfDestructBeneficiaryUpdatedEventObject
>;

export type SelfDestructBeneficiaryUpdatedEventFilter =
  TypedEventFilter<SelfDestructBeneficiaryUpdatedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface Depot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exchangeEtherForSNX(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeEtherForSynthsAtRate(
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    synthsReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeEtherForSynths(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSelfDestructBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundsWallet(overrides?: CallOverrides): Promise<[string]>;

    terminateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSellableDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    setResolver(
      _resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setFundsWallet(
      _fundsWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositStartIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMyDepositedSynths(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeEtherForSNXAtRate(
      guaranteedEtherRate: PromiseOrValue<BigNumberish>,
      guaranteedSynthetixRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    synthetixReceivedForSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinimumDepositAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { user: string; amount: BigNumber }>;

    exchangeSynthsForSNXAtRate(
      synthAmount: PromiseOrValue<BigNumberish>,
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxEthPurchase(overrides?: CallOverrides): Promise<[BigNumber]>;

    selfDestructInitiated(overrides?: CallOverrides): Promise<[boolean]>;

    setMaxEthPurchase(
      _maxEthPurchase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    smallDeposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    synthetixReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSynthetix(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeSynthsForSNX(
      synthAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEndIndex(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  exchangeEtherForSNX(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeEtherForSynthsAtRate(
    guaranteedRate: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  synthsReceivedForEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiationTime(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeEtherForSynths(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSelfDestructBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundsWallet(overrides?: CallOverrides): Promise<string>;

  terminateSelfDestruct(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSellableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  setResolver(
    _resolver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setFundsWallet(
    _fundsWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMyDepositedSynths(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeEtherForSNXAtRate(
    guaranteedEtherRate: PromiseOrValue<BigNumberish>,
    guaranteedSynthetixRate: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfDestruct(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  synthetixReceivedForSynths(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  setMinimumDepositAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { user: string; amount: BigNumber }>;

  exchangeSynthsForSNXAtRate(
    synthAmount: PromiseOrValue<BigNumberish>,
    guaranteedRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxEthPurchase(overrides?: CallOverrides): Promise<BigNumber>;

  selfDestructInitiated(overrides?: CallOverrides): Promise<boolean>;

  setMaxEthPurchase(
    _maxEthPurchase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateSelfDestruct(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfDestructBeneficiary(overrides?: CallOverrides): Promise<string>;

  smallDeposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  synthetixReceivedForEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositSynths(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSynthetix(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeSynthsForSNX(
    synthAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEndIndex(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    exchangeEtherForSNX(overrides?: CallOverrides): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<string>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSynthsAtRate(
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthsReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    initiationTime(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSynths(overrides?: CallOverrides): Promise<BigNumber>;

    setSelfDestructBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundsWallet(overrides?: CallOverrides): Promise<string>;

    terminateSelfDestruct(overrides?: CallOverrides): Promise<void>;

    totalSellableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    setResolver(_resolver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setFundsWallet(_fundsWallet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    depositStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    withdrawMyDepositedSynths(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSNXAtRate(
      guaranteedEtherRate: PromiseOrValue<BigNumberish>,
      guaranteedSynthetixRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    synthetixReceivedForSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumDepositAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { user: string; amount: BigNumber }>;

    exchangeSynthsForSNXAtRate(
      synthAmount: PromiseOrValue<BigNumberish>,
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxEthPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    selfDestructInitiated(overrides?: CallOverrides): Promise<boolean>;

    setMaxEthPurchase(
      _maxEthPurchase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateSelfDestruct(overrides?: CallOverrides): Promise<void>;

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<string>;

    smallDeposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    synthetixReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositSynths(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawSynthetix(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeSynthsForSNX(
      synthAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositEndIndex(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'MaxEthPurchaseUpdated(uint256)'(amount?: null): MaxEthPurchaseUpdatedEventFilter;
    MaxEthPurchaseUpdated(amount?: null): MaxEthPurchaseUpdatedEventFilter;

    'FundsWalletUpdated(address)'(newFundsWallet?: null): FundsWalletUpdatedEventFilter;
    FundsWalletUpdated(newFundsWallet?: null): FundsWalletUpdatedEventFilter;

    'Exchange(string,uint256,string,uint256)'(
      fromCurrency?: null,
      fromAmount?: null,
      toCurrency?: null,
      toAmount?: null
    ): ExchangeEventFilter;
    Exchange(
      fromCurrency?: null,
      fromAmount?: null,
      toCurrency?: null,
      toAmount?: null
    ): ExchangeEventFilter;

    'SynthWithdrawal(address,uint256)'(user?: null, amount?: null): SynthWithdrawalEventFilter;
    SynthWithdrawal(user?: null, amount?: null): SynthWithdrawalEventFilter;

    'SynthDeposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): SynthDepositEventFilter;
    SynthDeposit(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): SynthDepositEventFilter;

    'SynthDepositRemoved(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): SynthDepositRemovedEventFilter;
    SynthDepositRemoved(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): SynthDepositRemovedEventFilter;

    'SynthDepositNotAccepted(address,uint256,uint256)'(
      user?: null,
      amount?: null,
      minimum?: null
    ): SynthDepositNotAcceptedEventFilter;
    SynthDepositNotAccepted(
      user?: null,
      amount?: null,
      minimum?: null
    ): SynthDepositNotAcceptedEventFilter;

    'MinimumDepositAmountUpdated(uint256)'(amount?: null): MinimumDepositAmountUpdatedEventFilter;
    MinimumDepositAmountUpdated(amount?: null): MinimumDepositAmountUpdatedEventFilter;

    'NonPayableContract(address,uint256)'(
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): NonPayableContractEventFilter;
    NonPayableContract(
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): NonPayableContractEventFilter;

    'ClearedDeposit(address,address,uint256,uint256,uint256)'(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<string> | null,
      fromETHAmount?: null,
      toAmount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): ClearedDepositEventFilter;
    ClearedDeposit(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<string> | null,
      fromETHAmount?: null,
      toAmount?: null,
      depositIndex?: PromiseOrValue<BigNumberish> | null
    ): ClearedDepositEventFilter;

    'PauseChanged(bool)'(isPaused?: null): PauseChangedEventFilter;
    PauseChanged(isPaused?: null): PauseChangedEventFilter;

    'SelfDestructTerminated()'(): SelfDestructTerminatedEventFilter;
    SelfDestructTerminated(): SelfDestructTerminatedEventFilter;

    'SelfDestructed(address)'(beneficiary?: null): SelfDestructedEventFilter;
    SelfDestructed(beneficiary?: null): SelfDestructedEventFilter;

    'SelfDestructInitiated(uint256)'(selfDestructDelay?: null): SelfDestructInitiatedEventFilter;
    SelfDestructInitiated(selfDestructDelay?: null): SelfDestructInitiatedEventFilter;

    'SelfDestructBeneficiaryUpdated(address)'(
      newBeneficiary?: null
    ): SelfDestructBeneficiaryUpdatedEventFilter;
    SelfDestructBeneficiaryUpdated(
      newBeneficiary?: null
    ): SelfDestructBeneficiaryUpdatedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
  };

  estimateGas: {
    exchangeEtherForSNX(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSynthsAtRate(
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    synthsReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiationTime(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSynths(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSelfDestructBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundsWallet(overrides?: CallOverrides): Promise<BigNumber>;

    terminateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSellableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    setResolver(
      _resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setFundsWallet(
      _fundsWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawMyDepositedSynths(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeEtherForSNXAtRate(
      guaranteedEtherRate: PromiseOrValue<BigNumberish>,
      guaranteedSynthetixRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfDestruct(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    synthetixReceivedForSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumDepositAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exchangeSynthsForSNXAtRate(
      synthAmount: PromiseOrValue<BigNumberish>,
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxEthPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    selfDestructInitiated(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxEthPurchase(
      _maxEthPurchase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    smallDeposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    synthetixReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSynthetix(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeSynthsForSNX(
      synthAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEndIndex(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    exchangeEtherForSNX(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeEtherForSynthsAtRate(
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    synthsReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeEtherForSynths(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSelfDestructBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundsWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSellableDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setResolver(
      _resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundsWallet(
      _fundsWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositStartIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMyDepositedSynths(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeEtherForSNXAtRate(
      guaranteedEtherRate: PromiseOrValue<BigNumberish>,
      guaranteedSynthetixRate: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    synthetixReceivedForSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimumDepositAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeSynthsForSNXAtRate(
      synthAmount: PromiseOrValue<BigNumberish>,
      guaranteedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxEthPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfDestructInitiated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxEthPurchase(
      _maxEthPurchase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateSelfDestruct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    smallDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthetixReceivedForEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositSynths(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSynthetix(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeSynthsForSNX(
      synthAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEndIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
