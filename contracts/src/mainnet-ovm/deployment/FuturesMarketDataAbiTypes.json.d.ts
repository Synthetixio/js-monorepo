/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface FuturesMarketDataAbiTypesInterface extends utils.Interface {
  functions: {
    'allMarketSummaries()': FunctionFragment;
    'globals()': FunctionFragment;
    'marketDetails(address)': FunctionFragment;
    'marketDetailsForKey(bytes32)': FunctionFragment;
    'marketSummaries(address[])': FunctionFragment;
    'marketSummariesForKeys(bytes32[])': FunctionFragment;
    'parameters(bytes32)': FunctionFragment;
    'positionDetails(address,address)': FunctionFragment;
    'positionDetailsForMarketKey(bytes32,address)': FunctionFragment;
    'resolverProxy()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allMarketSummaries'
      | 'globals'
      | 'marketDetails'
      | 'marketDetailsForKey'
      | 'marketSummaries'
      | 'marketSummariesForKeys'
      | 'parameters'
      | 'positionDetails'
      | 'positionDetailsForMarketKey'
      | 'resolverProxy'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allMarketSummaries', values?: undefined): string;
  encodeFunctionData(functionFragment: 'globals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketDetails', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'marketDetailsForKey',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketSummaries',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketSummariesForKeys',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'parameters', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'positionDetails',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'positionDetailsForMarketKey',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'resolverProxy', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allMarketSummaries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketDetailsForKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSummaries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketSummariesForKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'parameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionDetailsForMarketKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverProxy', data: BytesLike): Result;

  events: {};
}

export interface FuturesMarketDataAbiTypes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FuturesMarketDataAbiTypesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allMarketSummaries(overrides?: CallOverrides): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          }
        ] &
          {
            market: string;
            asset: string;
            key: string;
            maxLeverage: BigNumber;
            price: BigNumber;
            marketSize: BigNumber;
            marketSkew: BigNumber;
            marketDebt: BigNumber;
            currentFundingRate: BigNumber;
            feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              takerFee: BigNumber;
              makerFee: BigNumber;
              takerFeeNextPrice: BigNumber;
              makerFeeNextPrice: BigNumber;
            };
          }[]
      ]
    >;

    globals(overrides?: CallOverrides): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          minInitialMargin: BigNumber;
          liquidationFeeRatio: BigNumber;
          liquidationBufferRatio: BigNumber;
          minKeeperFee: BigNumber;
        }
      ]
    >;

    marketDetails(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          },
          [BigNumber, BigNumber] & {
            maxLeverage: BigNumber;
            maxMarketValueUSD: BigNumber;
          },
          [BigNumber, BigNumber] & {
            maxFundingRate: BigNumber;
            skewScaleUSD: BigNumber;
          },
          [
            BigNumber,
            [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
            BigNumber,
            BigNumber
          ] & {
            marketSize: BigNumber;
            sides: [BigNumber, BigNumber] & {
              long: BigNumber;
              short: BigNumber;
            };
            marketDebt: BigNumber;
            marketSkew: BigNumber;
          },
          [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
        ] & {
          market: string;
          baseAsset: string;
          marketKey: string;
          feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          };
          limits: [BigNumber, BigNumber] & {
            maxLeverage: BigNumber;
            maxMarketValueUSD: BigNumber;
          };
          fundingParameters: [BigNumber, BigNumber] & {
            maxFundingRate: BigNumber;
            skewScaleUSD: BigNumber;
          };
          marketSizeDetails: [
            BigNumber,
            [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
            BigNumber,
            BigNumber
          ] & {
            marketSize: BigNumber;
            sides: [BigNumber, BigNumber] & {
              long: BigNumber;
              short: BigNumber;
            };
            marketDebt: BigNumber;
            marketSkew: BigNumber;
          };
          priceDetails: [BigNumber, boolean] & {
            price: BigNumber;
            invalid: boolean;
          };
        }
      ]
    >;

    marketDetailsForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          },
          [BigNumber, BigNumber] & {
            maxLeverage: BigNumber;
            maxMarketValueUSD: BigNumber;
          },
          [BigNumber, BigNumber] & {
            maxFundingRate: BigNumber;
            skewScaleUSD: BigNumber;
          },
          [
            BigNumber,
            [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
            BigNumber,
            BigNumber
          ] & {
            marketSize: BigNumber;
            sides: [BigNumber, BigNumber] & {
              long: BigNumber;
              short: BigNumber;
            };
            marketDebt: BigNumber;
            marketSkew: BigNumber;
          },
          [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
        ] & {
          market: string;
          baseAsset: string;
          marketKey: string;
          feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          };
          limits: [BigNumber, BigNumber] & {
            maxLeverage: BigNumber;
            maxMarketValueUSD: BigNumber;
          };
          fundingParameters: [BigNumber, BigNumber] & {
            maxFundingRate: BigNumber;
            skewScaleUSD: BigNumber;
          };
          marketSizeDetails: [
            BigNumber,
            [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
            BigNumber,
            BigNumber
          ] & {
            marketSize: BigNumber;
            sides: [BigNumber, BigNumber] & {
              long: BigNumber;
              short: BigNumber;
            };
            marketDebt: BigNumber;
            marketSkew: BigNumber;
          };
          priceDetails: [BigNumber, boolean] & {
            price: BigNumber;
            invalid: boolean;
          };
        }
      ]
    >;

    marketSummaries(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          }
        ] &
          {
            market: string;
            asset: string;
            key: string;
            maxLeverage: BigNumber;
            price: BigNumber;
            marketSize: BigNumber;
            marketSkew: BigNumber;
            marketDebt: BigNumber;
            currentFundingRate: BigNumber;
            feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              takerFee: BigNumber;
              makerFee: BigNumber;
              takerFeeNextPrice: BigNumber;
              makerFeeNextPrice: BigNumber;
            };
          }[]
      ]
    >;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          }
        ] &
          {
            market: string;
            asset: string;
            key: string;
            maxLeverage: BigNumber;
            price: BigNumber;
            marketSize: BigNumber;
            marketSkew: BigNumber;
            marketDebt: BigNumber;
            currentFundingRate: BigNumber;
            feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              takerFee: BigNumber;
              makerFee: BigNumber;
              takerFeeNextPrice: BigNumber;
              makerFeeNextPrice: BigNumber;
            };
          }[]
      ]
    >;

    parameters(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
          nextPriceConfirmWindow: BigNumber;
          maxLeverage: BigNumber;
          maxMarketValueUSD: BigNumber;
          maxFundingRate: BigNumber;
          skewScaleUSD: BigNumber;
        }
      ]
    >;

    positionDetails(
      market: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            id: BigNumber;
            lastFundingIndex: BigNumber;
            margin: BigNumber;
            lastPrice: BigNumber;
            size: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            id: BigNumber;
            lastFundingIndex: BigNumber;
            margin: BigNumber;
            lastPrice: BigNumber;
            size: BigNumber;
          };
          notionalValue: BigNumber;
          profitLoss: BigNumber;
          accruedFunding: BigNumber;
          remainingMargin: BigNumber;
          accessibleMargin: BigNumber;
          liquidationPrice: BigNumber;
          canLiquidatePosition: boolean;
        }
      ]
    >;

    positionDetailsForMarketKey(
      marketKey: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            id: BigNumber;
            lastFundingIndex: BigNumber;
            margin: BigNumber;
            lastPrice: BigNumber;
            size: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            id: BigNumber;
            lastFundingIndex: BigNumber;
            margin: BigNumber;
            lastPrice: BigNumber;
            size: BigNumber;
          };
          notionalValue: BigNumber;
          profitLoss: BigNumber;
          accruedFunding: BigNumber;
          remainingMargin: BigNumber;
          accessibleMargin: BigNumber;
          liquidationPrice: BigNumber;
          canLiquidatePosition: boolean;
        }
      ]
    >;

    resolverProxy(overrides?: CallOverrides): Promise<[string]>;
  };

  allMarketSummaries(overrides?: CallOverrides): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      }
    ] &
      {
        market: string;
        asset: string;
        key: string;
        maxLeverage: BigNumber;
        price: BigNumber;
        marketSize: BigNumber;
        marketSkew: BigNumber;
        marketDebt: BigNumber;
        currentFundingRate: BigNumber;
        feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        };
      }[]
  >;

  globals(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      minInitialMargin: BigNumber;
      liquidationFeeRatio: BigNumber;
      liquidationBufferRatio: BigNumber;
      minKeeperFee: BigNumber;
    }
  >;

  marketDetails(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      },
      [BigNumber, BigNumber] & {
        maxLeverage: BigNumber;
        maxMarketValueUSD: BigNumber;
      },
      [BigNumber, BigNumber] & {
        maxFundingRate: BigNumber;
        skewScaleUSD: BigNumber;
      },
      [
        BigNumber,
        [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        marketSize: BigNumber;
        sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
        marketDebt: BigNumber;
        marketSkew: BigNumber;
      },
      [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
    ] & {
      market: string;
      baseAsset: string;
      marketKey: string;
      feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      };
      limits: [BigNumber, BigNumber] & {
        maxLeverage: BigNumber;
        maxMarketValueUSD: BigNumber;
      };
      fundingParameters: [BigNumber, BigNumber] & {
        maxFundingRate: BigNumber;
        skewScaleUSD: BigNumber;
      };
      marketSizeDetails: [
        BigNumber,
        [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        marketSize: BigNumber;
        sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
        marketDebt: BigNumber;
        marketSkew: BigNumber;
      };
      priceDetails: [BigNumber, boolean] & {
        price: BigNumber;
        invalid: boolean;
      };
    }
  >;

  marketDetailsForKey(
    marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      },
      [BigNumber, BigNumber] & {
        maxLeverage: BigNumber;
        maxMarketValueUSD: BigNumber;
      },
      [BigNumber, BigNumber] & {
        maxFundingRate: BigNumber;
        skewScaleUSD: BigNumber;
      },
      [
        BigNumber,
        [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        marketSize: BigNumber;
        sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
        marketDebt: BigNumber;
        marketSkew: BigNumber;
      },
      [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
    ] & {
      market: string;
      baseAsset: string;
      marketKey: string;
      feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      };
      limits: [BigNumber, BigNumber] & {
        maxLeverage: BigNumber;
        maxMarketValueUSD: BigNumber;
      };
      fundingParameters: [BigNumber, BigNumber] & {
        maxFundingRate: BigNumber;
        skewScaleUSD: BigNumber;
      };
      marketSizeDetails: [
        BigNumber,
        [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        marketSize: BigNumber;
        sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
        marketDebt: BigNumber;
        marketSkew: BigNumber;
      };
      priceDetails: [BigNumber, boolean] & {
        price: BigNumber;
        invalid: boolean;
      };
    }
  >;

  marketSummaries(
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      }
    ] &
      {
        market: string;
        asset: string;
        key: string;
        maxLeverage: BigNumber;
        price: BigNumber;
        marketSize: BigNumber;
        marketSkew: BigNumber;
        marketDebt: BigNumber;
        currentFundingRate: BigNumber;
        feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        };
      }[]
  >;

  marketSummariesForKeys(
    marketKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
      }
    ] &
      {
        market: string;
        asset: string;
        key: string;
        maxLeverage: BigNumber;
        price: BigNumber;
        marketSize: BigNumber;
        marketSkew: BigNumber;
        marketDebt: BigNumber;
        currentFundingRate: BigNumber;
        feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        };
      }[]
  >;

  parameters(
    marketKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      takerFee: BigNumber;
      makerFee: BigNumber;
      takerFeeNextPrice: BigNumber;
      makerFeeNextPrice: BigNumber;
      nextPriceConfirmWindow: BigNumber;
      maxLeverage: BigNumber;
      maxMarketValueUSD: BigNumber;
      maxFundingRate: BigNumber;
      skewScaleUSD: BigNumber;
    }
  >;

  positionDetails(
    market: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        lastFundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        lastFundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      };
      notionalValue: BigNumber;
      profitLoss: BigNumber;
      accruedFunding: BigNumber;
      remainingMargin: BigNumber;
      accessibleMargin: BigNumber;
      liquidationPrice: BigNumber;
      canLiquidatePosition: boolean;
    }
  >;

  positionDetailsForMarketKey(
    marketKey: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        lastFundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        lastFundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      };
      notionalValue: BigNumber;
      profitLoss: BigNumber;
      accruedFunding: BigNumber;
      remainingMargin: BigNumber;
      accessibleMargin: BigNumber;
      liquidationPrice: BigNumber;
      canLiquidatePosition: boolean;
    }
  >;

  resolverProxy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allMarketSummaries(overrides?: CallOverrides): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        }
      ] &
        {
          market: string;
          asset: string;
          key: string;
          maxLeverage: BigNumber;
          price: BigNumber;
          marketSize: BigNumber;
          marketSkew: BigNumber;
          marketDebt: BigNumber;
          currentFundingRate: BigNumber;
          feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          };
        }[]
    >;

    globals(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        minInitialMargin: BigNumber;
        liquidationFeeRatio: BigNumber;
        liquidationBufferRatio: BigNumber;
        minKeeperFee: BigNumber;
      }
    >;

    marketDetails(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        },
        [BigNumber, BigNumber] & {
          maxLeverage: BigNumber;
          maxMarketValueUSD: BigNumber;
        },
        [BigNumber, BigNumber] & {
          maxFundingRate: BigNumber;
          skewScaleUSD: BigNumber;
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          marketSize: BigNumber;
          sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
          marketDebt: BigNumber;
          marketSkew: BigNumber;
        },
        [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
      ] & {
        market: string;
        baseAsset: string;
        marketKey: string;
        feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        };
        limits: [BigNumber, BigNumber] & {
          maxLeverage: BigNumber;
          maxMarketValueUSD: BigNumber;
        };
        fundingParameters: [BigNumber, BigNumber] & {
          maxFundingRate: BigNumber;
          skewScaleUSD: BigNumber;
        };
        marketSizeDetails: [
          BigNumber,
          [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          marketSize: BigNumber;
          sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
          marketDebt: BigNumber;
          marketSkew: BigNumber;
        };
        priceDetails: [BigNumber, boolean] & {
          price: BigNumber;
          invalid: boolean;
        };
      }
    >;

    marketDetailsForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        },
        [BigNumber, BigNumber] & {
          maxLeverage: BigNumber;
          maxMarketValueUSD: BigNumber;
        },
        [BigNumber, BigNumber] & {
          maxFundingRate: BigNumber;
          skewScaleUSD: BigNumber;
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          marketSize: BigNumber;
          sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
          marketDebt: BigNumber;
          marketSkew: BigNumber;
        },
        [BigNumber, boolean] & { price: BigNumber; invalid: boolean }
      ] & {
        market: string;
        baseAsset: string;
        marketKey: string;
        feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        };
        limits: [BigNumber, BigNumber] & {
          maxLeverage: BigNumber;
          maxMarketValueUSD: BigNumber;
        };
        fundingParameters: [BigNumber, BigNumber] & {
          maxFundingRate: BigNumber;
          skewScaleUSD: BigNumber;
        };
        marketSizeDetails: [
          BigNumber,
          [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          marketSize: BigNumber;
          sides: [BigNumber, BigNumber] & { long: BigNumber; short: BigNumber };
          marketDebt: BigNumber;
          marketSkew: BigNumber;
        };
        priceDetails: [BigNumber, boolean] & {
          price: BigNumber;
          invalid: boolean;
        };
      }
    >;

    marketSummaries(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        }
      ] &
        {
          market: string;
          asset: string;
          key: string;
          maxLeverage: BigNumber;
          price: BigNumber;
          marketSize: BigNumber;
          marketSkew: BigNumber;
          marketDebt: BigNumber;
          currentFundingRate: BigNumber;
          feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          };
        }[]
    >;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          takerFee: BigNumber;
          makerFee: BigNumber;
          takerFeeNextPrice: BigNumber;
          makerFeeNextPrice: BigNumber;
        }
      ] &
        {
          market: string;
          asset: string;
          key: string;
          maxLeverage: BigNumber;
          price: BigNumber;
          marketSize: BigNumber;
          marketSkew: BigNumber;
          marketDebt: BigNumber;
          currentFundingRate: BigNumber;
          feeRates: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            takerFee: BigNumber;
            makerFee: BigNumber;
            takerFeeNextPrice: BigNumber;
            makerFeeNextPrice: BigNumber;
          };
        }[]
    >;

    parameters(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        takerFee: BigNumber;
        makerFee: BigNumber;
        takerFeeNextPrice: BigNumber;
        makerFeeNextPrice: BigNumber;
        nextPriceConfirmWindow: BigNumber;
        maxLeverage: BigNumber;
        maxMarketValueUSD: BigNumber;
        maxFundingRate: BigNumber;
        skewScaleUSD: BigNumber;
      }
    >;

    positionDetails(
      market: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          id: BigNumber;
          lastFundingIndex: BigNumber;
          margin: BigNumber;
          lastPrice: BigNumber;
          size: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          id: BigNumber;
          lastFundingIndex: BigNumber;
          margin: BigNumber;
          lastPrice: BigNumber;
          size: BigNumber;
        };
        notionalValue: BigNumber;
        profitLoss: BigNumber;
        accruedFunding: BigNumber;
        remainingMargin: BigNumber;
        accessibleMargin: BigNumber;
        liquidationPrice: BigNumber;
        canLiquidatePosition: boolean;
      }
    >;

    positionDetailsForMarketKey(
      marketKey: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          id: BigNumber;
          lastFundingIndex: BigNumber;
          margin: BigNumber;
          lastPrice: BigNumber;
          size: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        position: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          id: BigNumber;
          lastFundingIndex: BigNumber;
          margin: BigNumber;
          lastPrice: BigNumber;
          size: BigNumber;
        };
        notionalValue: BigNumber;
        profitLoss: BigNumber;
        accruedFunding: BigNumber;
        remainingMargin: BigNumber;
        accessibleMargin: BigNumber;
        liquidationPrice: BigNumber;
        canLiquidatePosition: boolean;
      }
    >;

    resolverProxy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allMarketSummaries(overrides?: CallOverrides): Promise<BigNumber>;

    globals(overrides?: CallOverrides): Promise<BigNumber>;

    marketDetails(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketDetailsForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketSummaries(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameters(marketKey: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    positionDetails(
      market: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionDetailsForMarketKey(
      marketKey: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolverProxy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allMarketSummaries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketDetails(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketDetailsForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketSummaries(
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketSummariesForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameters(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionDetails(
      market: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionDetailsForMarketKey(
      marketKey: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolverProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
