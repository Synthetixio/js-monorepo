// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'RewardEscrowV2';
export const address = '0xe7d7943a1d731CcD474B4cD688288F3662F74a19';
export const source = 'RewardEscrowV2';
export const abi = [
  'constructor(address _owner, address _resolver)',
  'event AccountMerged(address indexed accountToMerge, address destinationAddress, uint256 escrowAmountMerged, uint256[] entryIDs, uint256 time)',
  'event AccountMergingDurationUpdated(uint256 newDuration)',
  'event AccountMergingStarted(uint256 time, uint256 endTime)',
  'event BurnedForMigrationToL2(address indexed account, uint256[] entryIDs, uint256 escrowedAmountMigrated, uint256 time)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event MaxAccountMergingDurationUpdated(uint256 newDuration)',
  'event MaxEscrowDurationUpdated(uint256 newDuration)',
  'event NominateAccountToMerge(address indexed account, address destination)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'event Revoked(address indexed account, address indexed recipient, uint256 targetAmount, uint256 startIndex, uint256 endIndex)',
  'event Vested(address indexed beneficiary, uint256 time, uint256 value)',
  'event VestingEntryCreated(address indexed beneficiary, uint256 time, uint256 value, uint256 duration, uint256 entryID)',
  'function acceptOwnership()',
  'function accountMergingDuration() view returns (uint256)',
  'function accountMergingIsOpen() view returns (bool)',
  'function accountMergingStartTime() view returns (uint256)',
  'function accountVestingEntryIDs(address account, uint256 index) view returns (uint256)',
  'function appendVestingEntry(address account, uint256 quantity, uint256 duration)',
  'function balanceOf(address account) view returns (uint256)',
  'function burnForMigration(address account, uint256[] entryIDs) returns (uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)',
  'function createEscrowEntry(address beneficiary, uint256 deposit, uint256 duration)',
  'function getAccountVestingEntryIDs(address account, uint256 index, uint256 pageSize) view returns (uint256[])',
  'function getVestingEntry(address account, uint256 entryID) view returns (uint64 endTime, uint256 escrowAmount)',
  'function getVestingEntryClaimable(address account, uint256 entryID) view returns (uint256)',
  'function getVestingQuantity(address account, uint256[] entryIDs) view returns (uint256 total)',
  'function getVestingSchedules(address account, uint256 index, uint256 pageSize) view returns (tuple(uint64 endTime, uint256 escrowAmount, uint256 entryID)[])',
  'function importVestingEntries(address, uint256, tuple(uint64 endTime, uint256 escrowAmount)[])',
  'function isResolverCached() view returns (bool)',
  'function maxAccountMergingDuration() view returns (uint256)',
  'function max_duration() view returns (uint256)',
  'function mergeAccount(address from, uint256[] entryIDs)',
  'function migrateAccountEscrowBalances(address[], uint256[], uint256[])',
  'function migrateVestingSchedule(address)',
  'function nextEntryId() view returns (uint256)',
  'function nominateAccountToMerge(address account)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function nominatedReceiver(address) view returns (address)',
  'function numVestingEntries(address account) view returns (uint256)',
  'function owner() view returns (address)',
  'function rebuildCache()',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function revokeFrom(address account, address recipient, uint256 targetAmount, uint256 startIndex)',
  'function setAccountMergingDuration(uint256 duration)',
  'function setMaxAccountMergingWindow(uint256 duration)',
  'function setMaxEscrowDuration(uint256 duration)',
  'function setupExpiryTime() view returns (uint256)',
  'function startMergingWindow()',
  'function totalEscrowedAccountBalance(address account) view returns (uint256)',
  'function totalEscrowedBalance() view returns (uint256)',
  'function totalVestedAccountBalance(address account) view returns (uint256)',
  'function vest(uint256[] entryIDs)',
  'function vestingSchedules(address account, uint256 entryId) view returns (tuple(uint64 endTime, uint256 escrowAmount))',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace VestingEntries {
  export type VestingEntryStruct = {
    endTime: PromiseOrValue<BigNumberish>;
    escrowAmount: PromiseOrValue<BigNumberish>;
  };

  export type VestingEntryStructOutput = [BigNumber, BigNumber] & {
    endTime: BigNumber;
    escrowAmount: BigNumber;
  };

  export type VestingEntryWithIDStruct = {
    endTime: PromiseOrValue<BigNumberish>;
    escrowAmount: PromiseOrValue<BigNumberish>;
    entryID: PromiseOrValue<BigNumberish>;
  };

  export type VestingEntryWithIDStructOutput = [BigNumber, BigNumber, BigNumber] & {
    endTime: BigNumber;
    escrowAmount: BigNumber;
    entryID: BigNumber;
  };
}

export interface RewardEscrowV2Interface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'accountMergingDuration()': FunctionFragment;
    'accountMergingIsOpen()': FunctionFragment;
    'accountMergingStartTime()': FunctionFragment;
    'accountVestingEntryIDs(address,uint256)': FunctionFragment;
    'appendVestingEntry(address,uint256,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burnForMigration(address,uint256[])': FunctionFragment;
    'createEscrowEntry(address,uint256,uint256)': FunctionFragment;
    'getAccountVestingEntryIDs(address,uint256,uint256)': FunctionFragment;
    'getVestingEntry(address,uint256)': FunctionFragment;
    'getVestingEntryClaimable(address,uint256)': FunctionFragment;
    'getVestingQuantity(address,uint256[])': FunctionFragment;
    'getVestingSchedules(address,uint256,uint256)': FunctionFragment;
    'importVestingEntries(address,uint256,(uint64,uint256)[])': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'maxAccountMergingDuration()': FunctionFragment;
    'max_duration()': FunctionFragment;
    'mergeAccount(address,uint256[])': FunctionFragment;
    'migrateAccountEscrowBalances(address[],uint256[],uint256[])': FunctionFragment;
    'migrateVestingSchedule(address)': FunctionFragment;
    'nextEntryId()': FunctionFragment;
    'nominateAccountToMerge(address)': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'nominatedReceiver(address)': FunctionFragment;
    'numVestingEntries(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'revokeFrom(address,address,uint256,uint256)': FunctionFragment;
    'setAccountMergingDuration(uint256)': FunctionFragment;
    'setMaxAccountMergingWindow(uint256)': FunctionFragment;
    'setMaxEscrowDuration(uint256)': FunctionFragment;
    'setupExpiryTime()': FunctionFragment;
    'startMergingWindow()': FunctionFragment;
    'totalEscrowedAccountBalance(address)': FunctionFragment;
    'totalEscrowedBalance()': FunctionFragment;
    'totalVestedAccountBalance(address)': FunctionFragment;
    'vest(uint256[])': FunctionFragment;
    'vestingSchedules(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'accountMergingDuration'
      | 'accountMergingIsOpen'
      | 'accountMergingStartTime'
      | 'accountVestingEntryIDs'
      | 'appendVestingEntry'
      | 'balanceOf'
      | 'burnForMigration'
      | 'createEscrowEntry'
      | 'getAccountVestingEntryIDs'
      | 'getVestingEntry'
      | 'getVestingEntryClaimable'
      | 'getVestingQuantity'
      | 'getVestingSchedules'
      | 'importVestingEntries'
      | 'isResolverCached'
      | 'maxAccountMergingDuration'
      | 'max_duration'
      | 'mergeAccount'
      | 'migrateAccountEscrowBalances'
      | 'migrateVestingSchedule'
      | 'nextEntryId'
      | 'nominateAccountToMerge'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'nominatedReceiver'
      | 'numVestingEntries'
      | 'owner'
      | 'rebuildCache'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'revokeFrom'
      | 'setAccountMergingDuration'
      | 'setMaxAccountMergingWindow'
      | 'setMaxEscrowDuration'
      | 'setupExpiryTime'
      | 'startMergingWindow'
      | 'totalEscrowedAccountBalance'
      | 'totalEscrowedBalance'
      | 'totalVestedAccountBalance'
      | 'vest'
      | 'vestingSchedules'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountMergingDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountMergingIsOpen', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountMergingStartTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accountVestingEntryIDs',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'appendVestingEntry',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'burnForMigration',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createEscrowEntry',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountVestingEntryIDs',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVestingEntry',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVestingEntryClaimable',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVestingQuantity',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVestingSchedules',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'importVestingEntries',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      VestingEntries.VestingEntryStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxAccountMergingDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'max_duration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mergeAccount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateAccountEscrowBalances',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateVestingSchedule',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nextEntryId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateAccountToMerge',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominatedReceiver',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'numVestingEntries',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccountMergingDuration',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxAccountMergingWindow',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxEscrowDuration',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setupExpiryTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startMergingWindow', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalEscrowedAccountBalance',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'totalEscrowedBalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalVestedAccountBalance',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'vest', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'vestingSchedules',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountMergingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountMergingIsOpen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountMergingStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountVestingEntryIDs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appendVestingEntry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnForMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createEscrowEntry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountVestingEntryIDs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingEntry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingEntryClaimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingQuantity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingSchedules', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'importVestingEntries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAccountMergingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'max_duration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mergeAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateAccountEscrowBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateVestingSchedule', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextEntryId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateAccountToMerge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numVestingEntries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccountMergingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxAccountMergingWindow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxEscrowDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupExpiryTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startMergingWindow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalEscrowedAccountBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalEscrowedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalVestedAccountBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingSchedules', data: BytesLike): Result;

  events: {
    'AccountMerged(address,address,uint256,uint256[],uint256)': EventFragment;
    'AccountMergingDurationUpdated(uint256)': EventFragment;
    'AccountMergingStarted(uint256,uint256)': EventFragment;
    'BurnedForMigrationToL2(address,uint256[],uint256,uint256)': EventFragment;
    'CacheUpdated(bytes32,address)': EventFragment;
    'MaxAccountMergingDurationUpdated(uint256)': EventFragment;
    'MaxEscrowDurationUpdated(uint256)': EventFragment;
    'NominateAccountToMerge(address,address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'Revoked(address,address,uint256,uint256,uint256)': EventFragment;
    'Vested(address,uint256,uint256)': EventFragment;
    'VestingEntryCreated(address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountMerged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccountMergingDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccountMergingStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurnedForMigrationToL2'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxAccountMergingDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxEscrowDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NominateAccountToMerge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Revoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Vested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingEntryCreated'): EventFragment;
}

export interface AccountMergedEventObject {
  accountToMerge: string;
  destinationAddress: string;
  escrowAmountMerged: BigNumber;
  entryIDs: BigNumber[];
  time: BigNumber;
}
export type AccountMergedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber],
  AccountMergedEventObject
>;

export type AccountMergedEventFilter = TypedEventFilter<AccountMergedEvent>;

export interface AccountMergingDurationUpdatedEventObject {
  newDuration: BigNumber;
}
export type AccountMergingDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  AccountMergingDurationUpdatedEventObject
>;

export type AccountMergingDurationUpdatedEventFilter =
  TypedEventFilter<AccountMergingDurationUpdatedEvent>;

export interface AccountMergingStartedEventObject {
  time: BigNumber;
  endTime: BigNumber;
}
export type AccountMergingStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AccountMergingStartedEventObject
>;

export type AccountMergingStartedEventFilter = TypedEventFilter<AccountMergingStartedEvent>;

export interface BurnedForMigrationToL2EventObject {
  account: string;
  entryIDs: BigNumber[];
  escrowedAmountMigrated: BigNumber;
  time: BigNumber;
}
export type BurnedForMigrationToL2Event = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber],
  BurnedForMigrationToL2EventObject
>;

export type BurnedForMigrationToL2EventFilter = TypedEventFilter<BurnedForMigrationToL2Event>;

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface MaxAccountMergingDurationUpdatedEventObject {
  newDuration: BigNumber;
}
export type MaxAccountMergingDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxAccountMergingDurationUpdatedEventObject
>;

export type MaxAccountMergingDurationUpdatedEventFilter =
  TypedEventFilter<MaxAccountMergingDurationUpdatedEvent>;

export interface MaxEscrowDurationUpdatedEventObject {
  newDuration: BigNumber;
}
export type MaxEscrowDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxEscrowDurationUpdatedEventObject
>;

export type MaxEscrowDurationUpdatedEventFilter = TypedEventFilter<MaxEscrowDurationUpdatedEvent>;

export interface NominateAccountToMergeEventObject {
  account: string;
  destination: string;
}
export type NominateAccountToMergeEvent = TypedEvent<
  [string, string],
  NominateAccountToMergeEventObject
>;

export type NominateAccountToMergeEventFilter = TypedEventFilter<NominateAccountToMergeEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface RevokedEventObject {
  account: string;
  recipient: string;
  targetAmount: BigNumber;
  startIndex: BigNumber;
  endIndex: BigNumber;
}
export type RevokedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface VestedEventObject {
  beneficiary: string;
  time: BigNumber;
  value: BigNumber;
}
export type VestedEvent = TypedEvent<[string, BigNumber, BigNumber], VestedEventObject>;

export type VestedEventFilter = TypedEventFilter<VestedEvent>;

export interface VestingEntryCreatedEventObject {
  beneficiary: string;
  time: BigNumber;
  value: BigNumber;
  duration: BigNumber;
  entryID: BigNumber;
}
export type VestingEntryCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  VestingEntryCreatedEventObject
>;

export type VestingEntryCreatedEventFilter = TypedEventFilter<VestingEntryCreatedEvent>;

export interface RewardEscrowV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardEscrowV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountMergingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountMergingIsOpen(overrides?: CallOverrides): Promise<[boolean]>;

    accountMergingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    appendVestingEntry(
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnForMigration(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEscrowEntry(
      beneficiary: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVestingEntry(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { endTime: BigNumber; escrowAmount: BigNumber }>;

    getVestingEntryClaimable(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingQuantity(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VestingEntries.VestingEntryWithIDStructOutput[]]>;

    importVestingEntries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: VestingEntries.VestingEntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    maxAccountMergingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    max_duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    mergeAccount(
      from: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateAccountEscrowBalances(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateVestingSchedule(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextEntryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateAccountToMerge(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    nominatedReceiver(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    numVestingEntries(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    revokeFrom(
      account: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccountMergingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxAccountMergingWindow(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxEscrowDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupExpiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    startMergingWindow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalEscrowedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEscrowedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVestedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vest(
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingSchedules(
      account: PromiseOrValue<string>,
      entryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VestingEntries.VestingEntryStructOutput]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  accountMergingIsOpen(overrides?: CallOverrides): Promise<boolean>;

  accountMergingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  accountVestingEntryIDs(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  appendVestingEntry(
    account: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burnForMigration(
    account: PromiseOrValue<string>,
    entryIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEscrowEntry(
    beneficiary: PromiseOrValue<string>,
    deposit: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountVestingEntryIDs(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVestingEntry(
    account: PromiseOrValue<string>,
    entryID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { endTime: BigNumber; escrowAmount: BigNumber }>;

  getVestingEntryClaimable(
    account: PromiseOrValue<string>,
    entryID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingQuantity(
    account: PromiseOrValue<string>,
    entryIDs: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingSchedules(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VestingEntries.VestingEntryWithIDStructOutput[]>;

  importVestingEntries(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: VestingEntries.VestingEntryStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  maxAccountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  max_duration(overrides?: CallOverrides): Promise<BigNumber>;

  mergeAccount(
    from: PromiseOrValue<string>,
    entryIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateAccountEscrowBalances(
    arg0: PromiseOrValue<string>[],
    arg1: PromiseOrValue<BigNumberish>[],
    arg2: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateVestingSchedule(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextEntryId(overrides?: CallOverrides): Promise<BigNumber>;

  nominateAccountToMerge(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  nominatedReceiver(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  numVestingEntries(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  revokeFrom(
    account: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    targetAmount: PromiseOrValue<BigNumberish>,
    startIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccountMergingDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxAccountMergingWindow(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxEscrowDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  startMergingWindow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalEscrowedAccountBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEscrowedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalVestedAccountBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vest(
    entryIDs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingSchedules(
    account: PromiseOrValue<string>,
    entryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VestingEntries.VestingEntryStructOutput>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    accountMergingIsOpen(overrides?: CallOverrides): Promise<boolean>;

    accountMergingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    accountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appendVestingEntry(
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnForMigration(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, VestingEntries.VestingEntryStructOutput[]] & {
        escrowedAccountBalance: BigNumber;
        vestingEntries: VestingEntries.VestingEntryStructOutput[];
      }
    >;

    createEscrowEntry(
      beneficiary: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVestingEntry(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { endTime: BigNumber; escrowAmount: BigNumber }>;

    getVestingEntryClaimable(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingQuantity(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VestingEntries.VestingEntryWithIDStructOutput[]>;

    importVestingEntries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: VestingEntries.VestingEntryStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    maxAccountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    max_duration(overrides?: CallOverrides): Promise<BigNumber>;

    mergeAccount(
      from: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    migrateAccountEscrowBalances(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    migrateVestingSchedule(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nextEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateAccountToMerge(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    nominatedReceiver(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    numVestingEntries(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    revokeFrom(
      account: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountMergingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAccountMergingWindow(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxEscrowDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    startMergingWindow(overrides?: CallOverrides): Promise<void>;

    totalEscrowedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEscrowedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vest(entryIDs: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    vestingSchedules(
      account: PromiseOrValue<string>,
      entryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VestingEntries.VestingEntryStructOutput>;
  };

  filters: {
    'AccountMerged(address,address,uint256,uint256[],uint256)'(
      accountToMerge?: PromiseOrValue<string> | null,
      destinationAddress?: null,
      escrowAmountMerged?: null,
      entryIDs?: null,
      time?: null
    ): AccountMergedEventFilter;
    AccountMerged(
      accountToMerge?: PromiseOrValue<string> | null,
      destinationAddress?: null,
      escrowAmountMerged?: null,
      entryIDs?: null,
      time?: null
    ): AccountMergedEventFilter;

    'AccountMergingDurationUpdated(uint256)'(
      newDuration?: null
    ): AccountMergingDurationUpdatedEventFilter;
    AccountMergingDurationUpdated(newDuration?: null): AccountMergingDurationUpdatedEventFilter;

    'AccountMergingStarted(uint256,uint256)'(
      time?: null,
      endTime?: null
    ): AccountMergingStartedEventFilter;
    AccountMergingStarted(time?: null, endTime?: null): AccountMergingStartedEventFilter;

    'BurnedForMigrationToL2(address,uint256[],uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      entryIDs?: null,
      escrowedAmountMigrated?: null,
      time?: null
    ): BurnedForMigrationToL2EventFilter;
    BurnedForMigrationToL2(
      account?: PromiseOrValue<string> | null,
      entryIDs?: null,
      escrowedAmountMigrated?: null,
      time?: null
    ): BurnedForMigrationToL2EventFilter;

    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'MaxAccountMergingDurationUpdated(uint256)'(
      newDuration?: null
    ): MaxAccountMergingDurationUpdatedEventFilter;
    MaxAccountMergingDurationUpdated(
      newDuration?: null
    ): MaxAccountMergingDurationUpdatedEventFilter;

    'MaxEscrowDurationUpdated(uint256)'(newDuration?: null): MaxEscrowDurationUpdatedEventFilter;
    MaxEscrowDurationUpdated(newDuration?: null): MaxEscrowDurationUpdatedEventFilter;

    'NominateAccountToMerge(address,address)'(
      account?: PromiseOrValue<string> | null,
      destination?: null
    ): NominateAccountToMergeEventFilter;
    NominateAccountToMerge(
      account?: PromiseOrValue<string> | null,
      destination?: null
    ): NominateAccountToMergeEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'Revoked(address,address,uint256,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      targetAmount?: null,
      startIndex?: null,
      endIndex?: null
    ): RevokedEventFilter;
    Revoked(
      account?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      targetAmount?: null,
      startIndex?: null,
      endIndex?: null
    ): RevokedEventFilter;

    'Vested(address,uint256,uint256)'(
      beneficiary?: PromiseOrValue<string> | null,
      time?: null,
      value?: null
    ): VestedEventFilter;
    Vested(
      beneficiary?: PromiseOrValue<string> | null,
      time?: null,
      value?: null
    ): VestedEventFilter;

    'VestingEntryCreated(address,uint256,uint256,uint256,uint256)'(
      beneficiary?: PromiseOrValue<string> | null,
      time?: null,
      value?: null,
      duration?: null,
      entryID?: null
    ): VestingEntryCreatedEventFilter;
    VestingEntryCreated(
      beneficiary?: PromiseOrValue<string> | null,
      time?: null,
      value?: null,
      duration?: null,
      entryID?: null
    ): VestingEntryCreatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    accountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    accountMergingIsOpen(overrides?: CallOverrides): Promise<BigNumber>;

    accountMergingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    accountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appendVestingEntry(
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnForMigration(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEscrowEntry(
      beneficiary: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingEntry(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingEntryClaimable(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingQuantity(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    importVestingEntries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: VestingEntries.VestingEntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    maxAccountMergingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    max_duration(overrides?: CallOverrides): Promise<BigNumber>;

    mergeAccount(
      from: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateAccountEscrowBalances(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateVestingSchedule(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    nominateAccountToMerge(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    nominatedReceiver(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numVestingEntries(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    revokeFrom(
      account: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccountMergingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxAccountMergingWindow(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxEscrowDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    startMergingWindow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalEscrowedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEscrowedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vest(
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingSchedules(
      account: PromiseOrValue<string>,
      entryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountMergingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountMergingIsOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountMergingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendVestingEntry(
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnForMigration(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEscrowEntry(
      beneficiary: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountVestingEntryIDs(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingEntry(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingEntryClaimable(
      account: PromiseOrValue<string>,
      entryID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingQuantity(
      account: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importVestingEntries(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: VestingEntries.VestingEntryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAccountMergingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max_duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeAccount(
      from: PromiseOrValue<string>,
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateAccountEscrowBalances(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateVestingSchedule(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextEntryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateAccountToMerge(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominatedReceiver(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numVestingEntries(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeFrom(
      account: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccountMergingDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAccountMergingWindow(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxEscrowDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupExpiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startMergingWindow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalEscrowedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEscrowedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVestedAccountBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vest(
      entryIDs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingSchedules(
      account: PromiseOrValue<string>,
      entryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
