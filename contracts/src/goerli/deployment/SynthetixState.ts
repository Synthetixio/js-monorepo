// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'SynthetixState';
export const address = '0xcbcFB6E2d8517DB83BedB30f79D5197607207A2c';
export const source = 'SynthetixState';
export const abi = [
  'constructor(address _owner, address _associatedContract)',
  'event AssociatedContractUpdated(address associatedContract)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'function acceptOwnership()',
  'function appendDebtLedgerValue(uint256 value)',
  'function associatedContract() view returns (address)',
  'function clearIssuanceData(address account)',
  'function debtLedger(uint256) view returns (uint256)',
  'function debtLedgerLength() view returns (uint256)',
  'function decrementTotalIssuerCount()',
  'function hasIssued(address account) view returns (bool)',
  'function incrementTotalIssuerCount()',
  'function issuanceData(address) view returns (uint256 initialDebtOwnership, uint256 debtEntryIndex)',
  'function lastDebtLedgerEntry() view returns (uint256)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function setAssociatedContract(address _associatedContract)',
  'function setCurrentIssuanceData(address account, uint256 initialDebtOwnership)',
  'function totalIssuerCount() view returns (uint256)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface SynthetixStateInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'appendDebtLedgerValue(uint256)': FunctionFragment;
    'associatedContract()': FunctionFragment;
    'clearIssuanceData(address)': FunctionFragment;
    'debtLedger(uint256)': FunctionFragment;
    'debtLedgerLength()': FunctionFragment;
    'decrementTotalIssuerCount()': FunctionFragment;
    'hasIssued(address)': FunctionFragment;
    'incrementTotalIssuerCount()': FunctionFragment;
    'issuanceData(address)': FunctionFragment;
    'lastDebtLedgerEntry()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'setAssociatedContract(address)': FunctionFragment;
    'setCurrentIssuanceData(address,uint256)': FunctionFragment;
    'totalIssuerCount()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'appendDebtLedgerValue'
      | 'associatedContract'
      | 'clearIssuanceData'
      | 'debtLedger'
      | 'debtLedgerLength'
      | 'decrementTotalIssuerCount'
      | 'hasIssued'
      | 'incrementTotalIssuerCount'
      | 'issuanceData'
      | 'lastDebtLedgerEntry'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'setAssociatedContract'
      | 'setCurrentIssuanceData'
      | 'totalIssuerCount'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'appendDebtLedgerValue',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'associatedContract', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'clearIssuanceData',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'debtLedger',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'debtLedgerLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decrementTotalIssuerCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasIssued', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'incrementTotalIssuerCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'issuanceData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastDebtLedgerEntry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAssociatedContract',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCurrentIssuanceData',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'totalIssuerCount', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appendDebtLedgerValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'associatedContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clearIssuanceData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtLedger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtLedgerLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decrementTotalIssuerCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasIssued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incrementTotalIssuerCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issuanceData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDebtLedgerEntry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssociatedContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurrentIssuanceData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalIssuerCount', data: BytesLike): Result;

  events: {
    'AssociatedContractUpdated(address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssociatedContractUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface AssociatedContractUpdatedEventObject {
  associatedContract: string;
}
export type AssociatedContractUpdatedEvent = TypedEvent<
  [string],
  AssociatedContractUpdatedEventObject
>;

export type AssociatedContractUpdatedEventFilter = TypedEventFilter<AssociatedContractUpdatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface SynthetixState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthetixStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appendDebtLedgerValue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    associatedContract(overrides?: CallOverrides): Promise<[string]>;

    clearIssuanceData(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debtLedger(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    debtLedgerLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    decrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasIssued(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    incrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issuanceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { initialDebtOwnership: BigNumber; debtEntryIndex: BigNumber }
    >;

    lastDebtLedgerEntry(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAssociatedContract(
      _associatedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentIssuanceData(
      account: PromiseOrValue<string>,
      initialDebtOwnership: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalIssuerCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appendDebtLedgerValue(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  associatedContract(overrides?: CallOverrides): Promise<string>;

  clearIssuanceData(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debtLedger(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  debtLedgerLength(overrides?: CallOverrides): Promise<BigNumber>;

  decrementTotalIssuerCount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasIssued(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  incrementTotalIssuerCount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issuanceData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { initialDebtOwnership: BigNumber; debtEntryIndex: BigNumber }
  >;

  lastDebtLedgerEntry(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAssociatedContract(
    _associatedContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentIssuanceData(
    account: PromiseOrValue<string>,
    initialDebtOwnership: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalIssuerCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    appendDebtLedgerValue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    associatedContract(overrides?: CallOverrides): Promise<string>;

    clearIssuanceData(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    debtLedger(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    debtLedgerLength(overrides?: CallOverrides): Promise<BigNumber>;

    decrementTotalIssuerCount(overrides?: CallOverrides): Promise<void>;

    hasIssued(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    incrementTotalIssuerCount(overrides?: CallOverrides): Promise<void>;

    issuanceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { initialDebtOwnership: BigNumber; debtEntryIndex: BigNumber }
    >;

    lastDebtLedgerEntry(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAssociatedContract(
      _associatedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentIssuanceData(
      account: PromiseOrValue<string>,
      initialDebtOwnership: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalIssuerCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AssociatedContractUpdated(address)'(
      associatedContract?: null
    ): AssociatedContractUpdatedEventFilter;
    AssociatedContractUpdated(associatedContract?: null): AssociatedContractUpdatedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    appendDebtLedgerValue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    associatedContract(overrides?: CallOverrides): Promise<BigNumber>;

    clearIssuanceData(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debtLedger(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    debtLedgerLength(overrides?: CallOverrides): Promise<BigNumber>;

    decrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasIssued(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    incrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issuanceData(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastDebtLedgerEntry(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAssociatedContract(
      _associatedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentIssuanceData(
      account: PromiseOrValue<string>,
      initialDebtOwnership: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalIssuerCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appendDebtLedgerValue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    associatedContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearIssuanceData(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debtLedger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtLedgerLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasIssued(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementTotalIssuerCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issuanceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDebtLedgerEntry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssociatedContract(
      _associatedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentIssuanceData(
      account: PromiseOrValue<string>,
      initialDebtOwnership: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalIssuerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
