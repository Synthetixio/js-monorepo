/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface FuturesMarketManagerInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'allMarkets()': FunctionFragment;
    'marketForKey(bytes32)': FunctionFragment;
    'markets(uint256,uint256)': FunctionFragment;
    'marketsForKeys(bytes32[])': FunctionFragment;
    'numMarkets()': FunctionFragment;
    'totalDebt()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'allMarkets'
      | 'marketForKey'
      | 'markets'
      | 'marketsForKeys'
      | 'numMarkets'
      | 'totalDebt'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketForKey', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'markets',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketsForKeys',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'numMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketForKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketsForKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;

  events: {};
}

export interface FuturesMarketManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FuturesMarketManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    marketForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    markets(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    numMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  allMarkets(overrides?: CallOverrides): Promise<string[]>;

  marketForKey(marketKey: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  markets(
    index: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  marketsForKeys(
    marketKeys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  numMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    allMarkets(overrides?: CallOverrides): Promise<string[]>;

    marketForKey(marketKey: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    markets(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    numMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;
  };

  filters: {};

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    marketForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketForKey(
      marketKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      index: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketsForKeys(
      marketKeys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
