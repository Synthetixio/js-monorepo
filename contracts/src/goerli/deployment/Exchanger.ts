// !!! DO NOT EDIT !!! Automatically generated file

export const name = 'Exchanger';
export const address = '0x889d8a97f43809Ef3FBb002B4b7a6A65319B61eD';
export const source = 'ExchangerWithFeeRecAlternatives';
export const abi = [
  'constructor(address _owner, address _resolver)',
  'event CacheUpdated(bytes32 name, address destination)',
  'event ExchangeEntryAppended(address indexed account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 roundIdForSrc, uint256 roundIdForDest)',
  'event ExchangeEntrySettled(address indexed from, bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 exchangeTimestamp)',
  'event OwnerChanged(address oldOwner, address newOwner)',
  'event OwnerNominated(address newOwner)',
  'event VirtualSynthCreated(address indexed synth, address indexed recipient, address vSynth, bytes32 currencyKey, uint256 amount)',
  'function CONTRACT_NAME() view returns (bytes32)',
  'function acceptOwnership()',
  'function atomicMaxVolumePerBlock() view returns (uint256)',
  'function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint256 amount, uint256 refunded) view returns (uint256 amountAfterSettlement)',
  'function dynamicFeeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 feeRate, bool tooVolatile)',
  'function exchange(address exchangeForAddress, address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bool virtualSynth, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived, address vSynth)',
  'function exchangeAtomically(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bytes32 trackingCode, uint256 minAmount) returns (uint256 amountReceived)',
  'function feeRateForAtomicExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 exchangeFeeRate)',
  'function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256)',
  'function getAmountsForAtomicExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)',
  'function getAmountsForExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)',
  'function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) view returns (bool)',
  'function isResolverCached() view returns (bool)',
  'function isSynthRateInvalid(bytes32 currencyKey) view returns (bool)',
  'function lastAtomicVolume() view returns (uint64 time, uint192 volume)',
  'function lastExchangeRate(bytes32 currencyKey) view returns (uint256)',
  'function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) view returns (uint256)',
  'function nominateNewOwner(address _owner)',
  'function nominatedOwner() view returns (address)',
  'function owner() view returns (address)',
  'function priceDeviationThresholdFactor() view returns (uint256)',
  'function rebuildCache()',
  'function resolver() view returns (address)',
  'function resolverAddressesRequired() view returns (bytes32[] addresses)',
  'function settle(address from, bytes32 currencyKey) returns (uint256 reclaimed, uint256 refunded, uint256 numEntriesSettled)',
  'function settlementOwing(address account, bytes32 currencyKey) view returns (uint256 reclaimAmount, uint256 rebateAmount, uint256 numEntries)',
  'function suspendSynthWithInvalidRate(bytes32 currencyKey)',
  'function tradingRewardsEnabled() view returns (bool)',
  'function waitingPeriodSecs() view returns (uint256)',
];
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface ExchangerInterface extends utils.Interface {
  functions: {
    'CONTRACT_NAME()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'atomicMaxVolumePerBlock()': FunctionFragment;
    'calculateAmountAfterSettlement(address,bytes32,uint256,uint256)': FunctionFragment;
    'dynamicFeeRateForExchange(bytes32,bytes32)': FunctionFragment;
    'exchange(address,address,bytes32,uint256,bytes32,address,bool,address,bytes32)': FunctionFragment;
    'exchangeAtomically(address,bytes32,uint256,bytes32,address,bytes32,uint256)': FunctionFragment;
    'feeRateForAtomicExchange(bytes32,bytes32)': FunctionFragment;
    'feeRateForExchange(bytes32,bytes32)': FunctionFragment;
    'getAmountsForAtomicExchange(uint256,bytes32,bytes32)': FunctionFragment;
    'getAmountsForExchange(uint256,bytes32,bytes32)': FunctionFragment;
    'hasWaitingPeriodOrSettlementOwing(address,bytes32)': FunctionFragment;
    'isResolverCached()': FunctionFragment;
    'isSynthRateInvalid(bytes32)': FunctionFragment;
    'lastAtomicVolume()': FunctionFragment;
    'lastExchangeRate(bytes32)': FunctionFragment;
    'maxSecsLeftInWaitingPeriod(address,bytes32)': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'priceDeviationThresholdFactor()': FunctionFragment;
    'rebuildCache()': FunctionFragment;
    'resolver()': FunctionFragment;
    'resolverAddressesRequired()': FunctionFragment;
    'settle(address,bytes32)': FunctionFragment;
    'settlementOwing(address,bytes32)': FunctionFragment;
    'suspendSynthWithInvalidRate(bytes32)': FunctionFragment;
    'tradingRewardsEnabled()': FunctionFragment;
    'waitingPeriodSecs()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CONTRACT_NAME'
      | 'acceptOwnership'
      | 'atomicMaxVolumePerBlock'
      | 'calculateAmountAfterSettlement'
      | 'dynamicFeeRateForExchange'
      | 'exchange'
      | 'exchangeAtomically'
      | 'feeRateForAtomicExchange'
      | 'feeRateForExchange'
      | 'getAmountsForAtomicExchange'
      | 'getAmountsForExchange'
      | 'hasWaitingPeriodOrSettlementOwing'
      | 'isResolverCached'
      | 'isSynthRateInvalid'
      | 'lastAtomicVolume'
      | 'lastExchangeRate'
      | 'maxSecsLeftInWaitingPeriod'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'priceDeviationThresholdFactor'
      | 'rebuildCache'
      | 'resolver'
      | 'resolverAddressesRequired'
      | 'settle'
      | 'settlementOwing'
      | 'suspendSynthWithInvalidRate'
      | 'tradingRewardsEnabled'
      | 'waitingPeriodSecs'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CONTRACT_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'atomicMaxVolumePerBlock', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateAmountAfterSettlement',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'dynamicFeeRateForExchange',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangeAtomically',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeRateForAtomicExchange',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeRateForExchange',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAmountsForAtomicExchange',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAmountsForExchange',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasWaitingPeriodOrSettlementOwing',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'isResolverCached', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isSynthRateInvalid',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'lastAtomicVolume', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastExchangeRate',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxSecsLeftInWaitingPeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceDeviationThresholdFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCache', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolverAddressesRequired', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'settlementOwing',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'suspendSynthWithInvalidRate',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'tradingRewardsEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'waitingPeriodSecs', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CONTRACT_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'atomicMaxVolumePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateAmountAfterSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dynamicFeeRateForExchange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeAtomically', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRateForAtomicExchange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRateForExchange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountsForAtomicExchange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountsForExchange', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'hasWaitingPeriodOrSettlementOwing',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isResolverCached', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSynthRateInvalid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAtomicVolume', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSecsLeftInWaitingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceDeviationThresholdFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolverAddressesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settlementOwing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'suspendSynthWithInvalidRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingRewardsEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'waitingPeriodSecs', data: BytesLike): Result;

  events: {
    'CacheUpdated(bytes32,address)': EventFragment;
    'ExchangeEntryAppended(address,bytes32,uint256,bytes32,uint256,uint256,uint256,uint256)': EventFragment;
    'ExchangeEntrySettled(address,bytes32,uint256,bytes32,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'VirtualSynthCreated(address,address,address,bytes32,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExchangeEntryAppended'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExchangeEntrySettled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VirtualSynthCreated'): EventFragment;
}

export interface CacheUpdatedEventObject {
  name: string;
  destination: string;
}
export type CacheUpdatedEvent = TypedEvent<[string, string], CacheUpdatedEventObject>;

export type CacheUpdatedEventFilter = TypedEventFilter<CacheUpdatedEvent>;

export interface ExchangeEntryAppendedEventObject {
  account: string;
  src: string;
  amount: BigNumber;
  dest: string;
  amountReceived: BigNumber;
  exchangeFeeRate: BigNumber;
  roundIdForSrc: BigNumber;
  roundIdForDest: BigNumber;
}
export type ExchangeEntryAppendedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ExchangeEntryAppendedEventObject
>;

export type ExchangeEntryAppendedEventFilter = TypedEventFilter<ExchangeEntryAppendedEvent>;

export interface ExchangeEntrySettledEventObject {
  from: string;
  src: string;
  amount: BigNumber;
  dest: string;
  reclaim: BigNumber;
  rebate: BigNumber;
  srcRoundIdAtPeriodEnd: BigNumber;
  destRoundIdAtPeriodEnd: BigNumber;
  exchangeTimestamp: BigNumber;
}
export type ExchangeEntrySettledEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ExchangeEntrySettledEventObject
>;

export type ExchangeEntrySettledEventFilter = TypedEventFilter<ExchangeEntrySettledEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface VirtualSynthCreatedEventObject {
  synth: string;
  recipient: string;
  vSynth: string;
  currencyKey: string;
  amount: BigNumber;
}
export type VirtualSynthCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  VirtualSynthCreatedEventObject
>;

export type VirtualSynthCreatedEventFilter = TypedEventFilter<VirtualSynthCreatedEvent>;

export interface Exchanger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    atomicMaxVolumePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateAmountAfterSettlement(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      refunded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountAfterSettlement: BigNumber }>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }>;

    exchange(
      exchangeForAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      virtualSynth: PromiseOrValue<boolean>,
      rewardAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeAtomically(
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRateForAtomicExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exchangeFeeRate: BigNumber }>;

    feeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountsForAtomicExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    getAmountsForExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    hasWaitingPeriodOrSettlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    isSynthRateInvalid(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastAtomicVolume(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; volume: BigNumber }>;

    lastExchangeRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSecsLeftInWaitingPeriod(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    settle(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimAmount: BigNumber;
        rebateAmount: BigNumber;
        numEntries: BigNumber;
      }
    >;

    suspendSynthWithInvalidRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradingRewardsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  atomicMaxVolumePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  calculateAmountAfterSettlement(
    from: PromiseOrValue<string>,
    currencyKey: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    refunded: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dynamicFeeRateForExchange(
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }>;

  exchange(
    exchangeForAddress: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    sourceAmount: PromiseOrValue<BigNumberish>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    destinationAddress: PromiseOrValue<string>,
    virtualSynth: PromiseOrValue<boolean>,
    rewardAddress: PromiseOrValue<string>,
    trackingCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeAtomically(
    from: PromiseOrValue<string>,
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    sourceAmount: PromiseOrValue<BigNumberish>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    destinationAddress: PromiseOrValue<string>,
    trackingCode: PromiseOrValue<BytesLike>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRateForAtomicExchange(
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeRateForExchange(
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsForAtomicExchange(
    sourceAmount: PromiseOrValue<BigNumberish>,
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountReceived: BigNumber;
      fee: BigNumber;
      exchangeFeeRate: BigNumber;
    }
  >;

  getAmountsForExchange(
    sourceAmount: PromiseOrValue<BigNumberish>,
    sourceCurrencyKey: PromiseOrValue<BytesLike>,
    destinationCurrencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountReceived: BigNumber;
      fee: BigNumber;
      exchangeFeeRate: BigNumber;
    }
  >;

  hasWaitingPeriodOrSettlementOwing(
    account: PromiseOrValue<string>,
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  isSynthRateInvalid(
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastAtomicVolume(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; volume: BigNumber }>;

  lastExchangeRate(
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxSecsLeftInWaitingPeriod(
    account: PromiseOrValue<string>,
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

  rebuildCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  settle(
    from: PromiseOrValue<string>,
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlementOwing(
    account: PromiseOrValue<string>,
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      reclaimAmount: BigNumber;
      rebateAmount: BigNumber;
      numEntries: BigNumber;
    }
  >;

  suspendSynthWithInvalidRate(
    currencyKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradingRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

  waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    atomicMaxVolumePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAmountAfterSettlement(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      refunded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }>;

    exchange(
      exchangeForAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      virtualSynth: PromiseOrValue<boolean>,
      rewardAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amountReceived: BigNumber; vSynth: string }>;

    exchangeAtomically(
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRateForAtomicExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForAtomicExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    getAmountsForExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    hasWaitingPeriodOrSettlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    isSynthRateInvalid(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastAtomicVolume(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; volume: BigNumber }>;

    lastExchangeRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSecsLeftInWaitingPeriod(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    settle(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimed: BigNumber;
        refunded: BigNumber;
        numEntriesSettled: BigNumber;
      }
    >;

    settlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimAmount: BigNumber;
        rebateAmount: BigNumber;
        numEntries: BigNumber;
      }
    >;

    suspendSynthWithInvalidRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradingRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'CacheUpdated(bytes32,address)'(name?: null, destination?: null): CacheUpdatedEventFilter;
    CacheUpdated(name?: null, destination?: null): CacheUpdatedEventFilter;

    'ExchangeEntryAppended(address,bytes32,uint256,bytes32,uint256,uint256,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      src?: null,
      amount?: null,
      dest?: null,
      amountReceived?: null,
      exchangeFeeRate?: null,
      roundIdForSrc?: null,
      roundIdForDest?: null
    ): ExchangeEntryAppendedEventFilter;
    ExchangeEntryAppended(
      account?: PromiseOrValue<string> | null,
      src?: null,
      amount?: null,
      dest?: null,
      amountReceived?: null,
      exchangeFeeRate?: null,
      roundIdForSrc?: null,
      roundIdForDest?: null
    ): ExchangeEntryAppendedEventFilter;

    'ExchangeEntrySettled(address,bytes32,uint256,bytes32,uint256,uint256,uint256,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      src?: null,
      amount?: null,
      dest?: null,
      reclaim?: null,
      rebate?: null,
      srcRoundIdAtPeriodEnd?: null,
      destRoundIdAtPeriodEnd?: null,
      exchangeTimestamp?: null
    ): ExchangeEntrySettledEventFilter;
    ExchangeEntrySettled(
      from?: PromiseOrValue<string> | null,
      src?: null,
      amount?: null,
      dest?: null,
      reclaim?: null,
      rebate?: null,
      srcRoundIdAtPeriodEnd?: null,
      destRoundIdAtPeriodEnd?: null,
      exchangeTimestamp?: null
    ): ExchangeEntrySettledEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'VirtualSynthCreated(address,address,address,bytes32,uint256)'(
      synth?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      vSynth?: null,
      currencyKey?: null,
      amount?: null
    ): VirtualSynthCreatedEventFilter;
    VirtualSynthCreated(
      synth?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      vSynth?: null,
      currencyKey?: null,
      amount?: null
    ): VirtualSynthCreatedEventFilter;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    atomicMaxVolumePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAmountAfterSettlement(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      refunded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      exchangeForAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      virtualSynth: PromiseOrValue<boolean>,
      rewardAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeAtomically(
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRateForAtomicExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForAtomicExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasWaitingPeriodOrSettlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    isSynthRateInvalid(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastAtomicVolume(overrides?: CallOverrides): Promise<BigNumber>;

    lastExchangeRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSecsLeftInWaitingPeriod(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    settle(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendSynthWithInvalidRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradingRewardsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    atomicMaxVolumePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateAmountAfterSettlement(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      refunded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      exchangeForAddress: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      virtualSynth: PromiseOrValue<boolean>,
      rewardAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeAtomically(
      from: PromiseOrValue<string>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      destinationAddress: PromiseOrValue<string>,
      trackingCode: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRateForAtomicExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRateForExchange(
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForAtomicExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForExchange(
      sourceAmount: PromiseOrValue<BigNumberish>,
      sourceCurrencyKey: PromiseOrValue<BytesLike>,
      destinationCurrencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasWaitingPeriodOrSettlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSynthRateInvalid(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAtomicVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastExchangeRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSecsLeftInWaitingPeriod(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settle(
      from: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlementOwing(
      account: PromiseOrValue<string>,
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suspendSynthWithInvalidRate(
      currencyKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradingRewardsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
